/*
 *  BEEN: Benchmarking Environment
 *  ==============================
 *
 *  File author: Branislav Repcek
 *
 *  GNU Lesser General Public License Version 2.1
 *  ---------------------------------------------
 *  Copyright (C) 2004-2006 Distributed Systems Research Group,
 *  Faculty of Mathematics and Physics, Charles University in Prague
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public
 *  License version 2.1, as published by the Free Software Foundation.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public
 *  License along with this library; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place, Suite 330, Boston,
 *  MA  02111-1307  USA
 */

package cz.cuni.mff.been.hostmanager.load;

import java.io.Serializable;

import java.nio.BufferOverflowException;
import java.nio.BufferUnderflowException;
import java.nio.ByteBuffer;

import java.util.Date;

import cz.cuni.mff.been.common.util.TimeUtils;
import cz.cuni.mff.been.hostmanager.InputParseException;
import cz.cuni.mff.been.hostmanager.InvalidArgumentException;
import cz.cuni.mff.been.hostmanager.OutputWriteException;

/**
 * Event generated by the Load Monitor on host. There are several types of events (see EventType enum).
 * Each event can have LoadSample attached to it. For event of type MONITOR_SAMPLE load sample is
 * mandatory (that is, MONITOR_SAMPLE event with <tt>null</tt> sample is invalid).
 * Each event has its own time stamp and contains name of the originating host. Note that time stamp
 * stored within event may not be exactly same as the time stamp stored in the accompanying load 
 * sample.
 *
 * @author Branislav Repcek
 */
public class LoadMonitorEvent implements Serializable, ByteBufferSerializableInterface {

	private static final long	serialVersionUID	= 5043405538264555309L;

	/**
	 * Id of the chunk in file.
	 */
	private static final byte FILE_NODE_ID = 0x2;

	/**
	 * Size of the required fields in the event.
	 */
	private static final int REQUIRED_DATA_SIZE = 19;
	
	/**
	 * Type of the event.
	 *
	 * @author Branislav Repcek
	 */
	public static enum EventType {
		
		/**
		 * This event is generated when load monitor starts taking samples.
		 */
		MONITOR_START,
		
		/**
		 * This event is generated when load monitor stops taking samples.
		 */
		MONITOR_STOP,
		
		/**
		 * Event generated when Load Monitor starts measuring detailed load.
		 */
		MONITOR_START_DETAILED,
		
		/**
		 * Event generated when Load Monitor stops measuring detailed load.
		 */
		MONITOR_STOP_DETAILED,
		
		/**
		 * Event generated on Load Monitor star-up. This is normally followed by MONITOR_START event.
		 */
		MONITOR_START_UP,
		
		/**
		 * Event generated when Load Monitor stops (Host Runtime is terminating). This element
		 * should be preceded by the MONITOR_STOP event.
		 */
		MONITOR_SHUT_DOWN,
		
		/**
		 * This event contains sample data.
		 */
		MONITOR_SAMPLE,
		
		/**
		 * Event contains hardware description data.
		 */
		MONITOR_HW_DESCRIPTION,
		
		/**
		 * Unknown event type.
		 */
		MONITOR_UNKNOWN;
		
		/**
		 * Create new enum from integer.
		 * 
		 * @param value Value to convert to enum. Valid values are 0 to 6 (included).
		 * 
		 * @return Enum constant for given value.
		 * 
		 * @throws IllegalArgumentException If value is invalid (less than 0 or greater than 6).
		 */
		public static EventType valueOf(int value) throws IllegalArgumentException {
			
			if ( value >= 0 && value < EventType.values().length ) {
				return EventType.values()[ value ];
			} else {
				throw new IllegalArgumentException( "Invalid enum value: " + value );
			}
			
			/* OH SHIT!!!
			switch (value) {
				case 0:
					return MONITOR_START;
					
				case 1:
					return MONITOR_STOP;
					
				case 2:
					return MONITOR_START_DETAILED;
					
				case 3:
					return MONITOR_STOP_DETAILED;
					
				case 4:
					return MONITOR_START_UP;
					
				case 5:
					return MONITOR_SHUT_DOWN;
					
				case 6:
					return MONITOR_SAMPLE;
					
				case 7:
					return MONITOR_HW_DESCRIPTION;
					
				case 8:
					return MONITOR_UNKNOWN;
					
				default:
					throw new IllegalArgumentException("Invalid enum value: " + String.valueOf(value));
			} */
		}
	}
	
	/**
	 * Type of the event.
	 */
	private EventType type;
	
	/**
	 * Data associated with the sample.
	 */
	private LoadSample sample;
	
	/**
	 * Hardware description data.
	 */
	private HardwareDescription hardware;
	
	/**
	 * Name of the host on which event has been generated.
	 */
	private String hostName;
	
	/**
	 * Date and time when event was generated.
	 */
	private Date time;
	
	/**
	 * Create empty event with unknown type.
	 */
	public LoadMonitorEvent() {
		
		type = EventType.MONITOR_UNKNOWN;
		hostName = "";
		time = new Date();
	}
	
	/**
	 * Create new event of given type. Time of event creation is set automatically.
	 * 
	 * @param type Event type.
	 * @param hostName Name of the host on which event was generated.
	 * 
	 * @throws InvalidArgumentException If type is MONITOR_SAMPLE or hostName is <tt>null</tt>.
	 */
	public LoadMonitorEvent(EventType type, String hostName) throws InvalidArgumentException {
		
		if (hostName == null) {
			throw new InvalidArgumentException("Hostname cannot be set to null.");
		}

		if (type == EventType.MONITOR_SAMPLE) {
			throw new InvalidArgumentException("Unable to create MONITOR_SAMPLE event with empty sample.");
		}
		
		this.type = type;
		this.sample = null;
		this.hostName = hostName;
		this.time = new Date();
	}
	
	/**
	 * Generate event with given sample data. Time is set automatically. Event type is automatically
	 * set to MONITOR_SAMPLE.
	 * 
	 * @param sample Sample data that will be attached to the event.
	 * @param hostName Name of the host on which event was generated.
	 * 
	 * @throws InvalidArgumentException if hostName is <tt>null</tt> or sampe is <tt>null</tt>.
	 */
	public LoadMonitorEvent(LoadSample sample, String hostName) throws InvalidArgumentException {

		if (hostName == null) {
			throw new InvalidArgumentException("Hostname cannot be set to null.");
		}
		
		if (sample == null) {
			throw new InvalidArgumentException("Empty sample is not allowed for MONITOR_SAMPLE events.");
		}
		
		this.sample = sample;
		this.type = EventType.MONITOR_SAMPLE;
		this.hostName = hostName;
		this.time = new Date();
	}
	
	/**
	 * Create event with given hardware description data. Time is set automatically. Event type is 
	 * set to the MONITOR_HW_DESCRIPTION.
	 * 
	 * @param hardware Hardware description data. This parameter cannot be <tt>null</tt>.
	 * @param hostName Name of the host on which event was generated.
	 * 
	 * @throws InvalidArgumentException If hostname is <tt>null</tt> or if hardware description
	 *         is <tt>null</tt>.
	 */
	public LoadMonitorEvent(HardwareDescription hardware, String hostName) throws InvalidArgumentException {

		if (hostName == null) {
			throw new InvalidArgumentException("Hostname cannot be set to null.");
		}
		
		if (hardware == null) {
			throw new InvalidArgumentException("Empty hardware description is not allowed for "
					+ "MONITOR_HW_DESCRIPTION events.");
		}
		
		this.hardware = hardware;
		this.type = EventType.MONITOR_HW_DESCRIPTION;
		this.hostName = hostName;
		this.time = new Date();
	}
	
	/**
	 * Generate event with of given type containing sample data. Time is set automatically.
	 *  
	 * @param type Type of event.
	 * @param sample Sample data. If event type is MONITOR_SAMPLE, this cannot be <tt>null</tt>.
	 * @param hostName Name of the host on which event was generated.
	 * 
	 * @throws InvalidArgumentException If event type is MONITOR_SAMPLE and sample is <tt>null</tt> or
	 *         if hostName is <tt>null</tt>.
	 */
	public LoadMonitorEvent(EventType type, LoadSample sample, String hostName) 
		throws InvalidArgumentException {
		
		if (hostName == null) {
			throw new InvalidArgumentException("Hostname cannot be set to null.");
		}
		
		this.type = type;
		this.sample = sample;
		this.hostName = hostName;
		this.time = new Date();
		
		if ((type == EventType.MONITOR_SAMPLE) && (sample == null)) {
			throw new InvalidArgumentException("Empty sample is not allowed for MONITOR_SAMPLE events.");
		}
	}
	
	/**
	 * @return Event type.
	 */
	public EventType getType() {
		
		return type;
	}
	
	/**
	 * @return Sample data associated with the event. Can be <tt>null</tt>.
	 */
	public LoadSample getSample() {
		
		return sample;
	}
	
	/**
	 * @return Hardware description data stored in the event. Can be <tt>null</tt>.
	 */
	public HardwareDescription getHardwareDescription() {
		
		return hardware;
	}
	
	/**
	 * @return Name of the host event was raised on.
	 */
	public String getHostName() {
		
		return hostName;
	}
	
	/**
	 * @return Event time.
	 */
	public Date getTime() {
		
		return time;
	}
	
	/**
	 * @return Timestamp (Windows time).
	 */
	public long getTimestamp() {
		
		return TimeUtils.convertJavaDateToWindowsTime(time);
	}
	
	/**
	 * @param sample New sample data. If event type is MONITOR_SAMPLE this cannot be <tt>null</tt>.
	 * 
	 * @throws InvalidArgumentException If event type is MONITOR_SAMPLE and sample is <tt>null</tt>.
	 */
	public void setSample(LoadSample sample) throws InvalidArgumentException {
		
		if ((type == EventType.MONITOR_SAMPLE) && (sample == null)) {
			throw new InvalidArgumentException("Sample data cannot be null in MONITOR_SAMPLE event.");
		}
		
		this.sample = sample;
	}

	/**
	 * @param hardware New hardware description data. If event type is MONITOR_HW_DESCRIPTION this
	 *        cannot be set to <tt>null</tt>.
	 *        
	 * @throws InvalidArgumentException If event type is MONITOR_HW_DESCRIPTION and hardware
	 *         description is <tt>null</tt>.
	 */
	public void setHardwareDescription(HardwareDescription hardware) throws InvalidArgumentException {
		
		if ((type == EventType.MONITOR_HW_DESCRIPTION) && (hardware == null)) {
			throw new InvalidArgumentException("Hardware description data cannot be null in"
					+ "MONITOR_HW_DESCRIPTION event.");
		}
		
		this.hardware = hardware;
	}
	
	/*
	 * @see cz.cuni.mff.been.hostmanager.load.ByteBufferSerializableInterface#getTotalSize()
	 */
	public int getDataSize() {

		return REQUIRED_DATA_SIZE
		       + (hasSample() ? sample.getDataSize() : 0)
		       + (hasHardwareDescription() ? hardware.getDataSize() : 0)
		       + 2 * hostName.length();
	}

	/*
	 * @see cz.cuni.mff.been.hostmanager.load.ByteBufferSerializableInterface#load(java.nio.ByteBuffer)
	 */
	public ByteBuffer load(ByteBuffer buffer) throws InputParseException {

		try {
			byte eventType = buffer.get();
			
			try {
				type = EventType.valueOf(eventType);
			} catch (IllegalArgumentException e) {
				throw new InputParseException("Unknown event type: \"" + eventType + "\".");
			}
			
			long ts = buffer.getLong();
			
			time = new Date(ts);

			short len = buffer.getShort();
			
			if (len < 0) {
				throw new InputParseException("Invalid hostname length.");
			}
			
			hostName = "";
			
			for (short i = 0; i < len; ++i) {
				hostName += buffer.getChar();
			}

			int dataLen = buffer.getInt();

			if (dataLen < 0) {
				throw new InputParseException("Invalid sample data length.");
			}
			
			if ((dataLen == 0) && (type == EventType.MONITOR_SAMPLE)) {
				throw new InputParseException("Sample cannot be empty in MONITOR_SAMPLE event.");
			}
			
			if (dataLen > 0) {
				sample = new LoadSample();
				sample.load(buffer);
			}
			
			int hwLen = buffer.getInt();
			
			if (hwLen < 0) {
				throw new InputParseException("Invalid hardware description data length.");
			}

			if ((hwLen == 0) && (type == EventType.MONITOR_HW_DESCRIPTION)) {
				throw new InputParseException("Hardware description cannot be empty in "
						+ "MONITOR_HW_DESCRIPTION event.");
			}
			
			if (hwLen > 0) {
				hardware = new HardwareDescription();
				hardware.load(buffer);
			}
			
		} catch (BufferUnderflowException e) {
			throw new InputParseException("Buffer underflow.", e);
		}
		
		return buffer;
	}

	/*
	 * @see cz.cuni.mff.been.hostmanager.load.ByteBufferSerializableInterface#save(java.nio.ByteBuffer)
	 */
	public ByteBuffer save(ByteBuffer buffer) throws OutputWriteException {
		
		/*
		 * Event is serialised as follows:
		 * 
		 * Byte offset            Data type        Description
		 *     0                    byte           Event type (see EventType enum).
		 *     1                    long           Timestamp (number of milliseconds since Unix epoch).
		 *     9                    short          Length of the hostname string in characters (N).
		 *    11                    char[]         Hostname.
		 *  11+2*N                   int           Length of the Load Sample. If no sample is stored
		 *                                         in the event, this will be zero.
		 *  15+2*N                LoadSample       Serialised LoadSample (may be empty).
		 *  15+2*N+sample.len        int           Length of the HW description. If no description
		 *                                         is stored in the event this will be 0.
		 *  19+2*N+sample.len HardwareDescription  Hardware description data.
		 */
		
		if (buffer.isReadOnly()) {
			throw new OutputWriteException("Unable to write to the read-only buffer.");
		}
		
		try {
			buffer.put((byte) type.ordinal());
			buffer.putLong(time.getTime());
			buffer.putShort((short) hostName.length());
			
			for (int i = 0; i < hostName.length(); ++i) {
				buffer.putChar(hostName.charAt(i));
			}

			if (!hasSample()) {
				buffer.putInt(0);
			} else {
				buffer.putInt(sample.getDataSize());
				sample.save(buffer);
			}
			
			if (!hasHardwareDescription()) {
				buffer.putInt(0);
			} else {
				buffer.putInt(hardware.getDataSize());
				hardware.save(buffer);
			}
			
		} catch (BufferOverflowException e) {
			throw new OutputWriteException("Buffer overflow.", e);
		}
		
		return buffer;
	}
	
	/*
	 * @see java.lang.Object#equals(java.lang.Object)
	 */
	@Override
	public boolean equals(Object o) {
		
		if (o instanceof LoadMonitorEvent) {
			return equals((LoadMonitorEvent) o);
		} else {
			return false;
		}
	}
	
	/**
	 * Test if two events are equal.
	 * 
	 * @param event Event to compare to.
	 * 
	 * @return <tt>true</tt> if both events contain same data, <tt>false</tt> otherwise.
	 */
	public boolean equals(LoadMonitorEvent event) {
		
		if (event == this) {
			return true;
		}
		
		if (event == null) {
			return false;
		}
		
		if (type != event.type) {
			return false;
		}

		if (time != null) {
			if (!time.equals(event.getTime())) {
				return false;
			}
		} else {
			if (event.time != null) {
				return false;
			}
		}
		
		if (hostName != null) {
			if (!hostName.equals(event.hostName)) {
				return false;
			}
		} else {
			if (event.hostName != null) {
				return false;
			}
		}
		
		if (sample != null) {
			if (!sample.equals(event.sample)) {
				return false;
			}
		} else {
			if (event.sample != null) {
				return false;
			}
		}
		
		if (hardware != null) {
			if (!hardware.equals(event.hardware)) {
				return false;
			}
		} else {
			if (event.hardware != null) {
				return false;
			}
		}

		return true;
	}
	
	/*
	 * @see java.lang.Object#hashCode()
	 */
	@Override
	public int hashCode() {
		
		return 2 * type.ordinal()
		     + 3 * (sample != null ? sample.hashCode() : 0)
		     + 5 * (hostName != null ? hostName.hashCode() : 0)
		     + 7 * (time != null ? (int) time.getTime() : 0)
		     + 11 * (hardware != null ? hardware.hashCode() : 0);
	}

	/**
	 * @param hostName New hostname.
	 */
	public void setHostName(String hostName) {

		if (hostName == null) {
			throw new InvalidArgumentException("Hostname cannot be set to null.");
		}
		
		this.hostName = hostName;
	}

	/**
	 * @param time New time.
	 */
	public void setTime(Date time) {
		
		if (time == null) {
			throw new InvalidArgumentException("Time cannot be set to null.");
		}
		
		this.time = time;
	}

	/**
	 * @param type New type of the event.
	 */
	public void setType(EventType type) {
		
		this.type = type;
	}
	
	/*
	 * @see cz.cuni.mff.been.hostmanager.load.ByteBufferSerializableInterface#getChunkID()
	 */
	public byte getChunkID() {
		
		return FILE_NODE_ID;
	}
	
	/**
	 * @return <tt>true</tt> if event contains sample data, <tt>false</tt> otherwise.
	 */
	public boolean hasSample() {
		
		return sample != null;
	}
	
	/**
	 * @return <tt>true</tt> if event contains hardware description data, <tt>false</tt> otherwise.
	 */
	public boolean hasHardwareDescription() {
		
		return hardware != null;
	}
}
