/*
 *  BEEN: Benchmarking Environment
 *  ==============================
 *
 *  File author: Jan Tattermusch
 *
 *  GNU Lesser General Public License Version 2.1
 *  ---------------------------------------------
 *  Copyright (C) 2004-2006 Distributed Systems Research Group,
 *  Faculty of Mathematics and Physics, Charles University in Prague
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public
 *  License version 2.1, as published by the Free Software Foundation.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public
 *  License along with this library; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place, Suite 330, Boston,
 *  MA  02111-1307  USA
 */
package cz.cuni.mff.been.benchmarkmanagerng.common.planner;

import java.util.ArrayList;
import java.util.List;


/**
 * Abstract representation for Download-Build-Run workflow in benchmark.
 * Object of this class is intended to be generated by DBRPlanner
 * and stores sufficient information for generator to be 
 * able to generate tasks that will fulfill activity described by 
 * this object.
 * 
 * Build activity can contain one or more build activities.
 * This relation describes that build activities are dependent on
 * given download activity.
 *   
 * @author Jan Tattermusch
 *
 */
public class DownloadActivity {
	
	/**
	 * Constructs new instance of download activity 
	 * based on software version that should be downloaded.
	 * 
	 * @param version software version
	 */
	public DownloadActivity(String version) {
		super();
		this.version = version;
	}

	private String version;
	List<BuildActivity> buildActivities = new ArrayList<BuildActivity>();

	/**
	 * 
	 * @return version of software that should be downloaded
	 */
	public String getVersion() {
		return version;
	}

	/**
	 * 
	 * @return list of dependent build activities
	 */
	public List<BuildActivity> getBuildActivities() {
		return buildActivities;
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result
				+ ((buildActivities == null) ? 0 : buildActivities.hashCode());
		result = prime * result + ((version == null) ? 0 : version.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		DownloadActivity other = (DownloadActivity) obj;
		if (buildActivities == null) {
			if (other.buildActivities != null)
				return false;
		} else if (!buildActivities.equals(other.buildActivities))
			return false;
		if (version == null) {
			if (other.version != null)
				return false;
		} else if (!version.equals(other.version))
			return false;
		return true;
	}

	

}