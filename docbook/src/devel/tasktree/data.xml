<?xml version="1.0" encoding="UTF-8"?>

<sect1
	xmlns="http://docbook.org/ns/docbook"
	xmlns:xlink="http://www.w3.org/1999/xlink"
	xmlns:xml="http://www.w3.org/XML/1998/namespace"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:xi="http://www.w3.org/2001/XInclude"
	xsi:schemaLocation="http://docbook.org/ns/docbook ../../../docbook-5.0/xsd/docbook.xsd"
>
	<title>Data Structures</title>
	
	<para>The Task Tree uses standard classes from the Collections Framework. Most data structures
	are accessible from the <classname>TaskTree</classname> class and documented in JavaDoc.
	There are separate hash maps for leaves, nodes and tree element (leaf or node) type information. This simplifies
	most queries that expect the address to point at a tree element of a specific type.</para>
	
	<para>The <classname>TaskTreeAddress</classname> class
	is no more than an encapsulated <classname>long</classname> value in the current
	implementation.</para>
	
	<para>Since public methods of the Task Tree can be invoked using RMI, it is necessary to provide
	an efficient way of extracting as much information as possible from a Task Tree element in one
	call, yet avoid unnecessary transfers. This is what the <classname>TaskTreeRecord</classname>
	instances are good for. They are
	returned by a query method and can contain various optional data items extracted from a tree node or
	leaf.</para>
	
	<para>As noted in the previous section, tree flags are identifiers rather than data structures.
	Any class implementing the <interfacename>TaskTreeFlag</interfacename> interface can be used
	to identify a flag. More precisely, the return value of its <methodname>toString()</methodname>
	method will be used as a flag identifier. Three basic implementations of flags with simple
	<glossterm baseform="inheritance rule">inheritance rules</glossterm> can
	be found in the <classname>BasicFlags</classname> enumeration. They are called
	<constant>COMPLETED</constant>, <constant>ERROR</constant> and <constant>WARNING</constant>,
	which is self-explanatory.</para>
	
	<para>The value associated with a tree flag consists of two items. The
	<interfacename>Serializable</interfacename> component is optional. It may carry a piece of
	<classname>String</classname> information for the user, such as a progress summary, a
	concatenation of error messages from the corresponding subtree or just any other data.
	The <classname>Enum&lt;?&gt;</classname> component is mandatory and represents an ordinal
	value assigned to the flag. In most cases, this can be as simple as
	<constant>TRUE</constant> and <constant>FALSE</constant>, but more complex sets of values
	and inheritance rules can be easily implemented.</para>
</sect1>