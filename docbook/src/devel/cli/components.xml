<?xml version="1.0" encoding="UTF-8"?>

<sect1
	xml:id="been.devel.cli.components"
	xmlns="http://docbook.org/ns/docbook"
	xmlns:xlink="http://www.w3.org/1999/xlink"
	xmlns:xml="http://www.w3.org/XML/1998/namespace"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:xi="http://www.w3.org/2001/XInclude"
	xsi:schemaLocation="http://docbook.org/ns/docbook ../../../docbook-5.0/xsd/docbook.xsd"
>
	<title>Structure of the CLI</title>
	
	<para>This section lists only the most important parts of the CLI. All the subcomponents are
	documented in JavaDoc.</para>
	
	<sect2>
		<title>Core Runtime</title>
		
		<para>This component is mostly implemented in the main
		<package>cz.cuni.mff.been.clinterface</package> package. The most important classes that
		form the core of the CLI runtime are listed below. The package also contains standard
		classes for BEEN framework integration, which will not be mentioned here.</para>

		<variablelist>
			<varlistentry>
				<term><classname>CommandLineAction</classname></term>
				<listitem><para>This is a generic superclass of all the implemented command line
				<glossterm baseform="action">actions</glossterm>. Descendants of this class are used
				in maps that resolve action names to the corresponding implementations. (That's
				the Java way of using function pointers.)</para></listitem>
			</varlistentry>
			<varlistentry>
				<term><classname>CommandLineModule</classname></term>
				<listitem><para>This is a superclass of all the implemented command line
				<glossterm baseform="module">modules</glossterm>. Command line modules group actions
				that use the same BEEN component and can share data (remote references, XML
				parsers). The abstract class contains maps of module instance pools. Module instance
				pooling reduces response time.</para></listitem>
			</varlistentry>
			<varlistentry>
				<term><classname>CommandLineRequest</classname></term>
				<listitem><para>This class is inspired by the way Tomcat based HTTP servers get
				request data. It contains a parser that reads the command line and the (optional)
				data blob received from the native client and provides flags, parameters, an input
				stream and consistency check routines.</para></listitem>
			</varlistentry>
			<varlistentry>
				<term><classname>CommandLineResponse</classname></term>
				<listitem><para>This class is inspired by the way Tomcat based HTTP servers compose
				their responses. It provides methods to send strings and arrays of bytes to the
				command line client's standard and error output. It also provides implementations
				of <classname>OutputStream</classname>, which is useful when interfacing with other
				components and libraries.</para></listitem>
			</varlistentry>
			<varlistentry>
				<term><classname>CommandLineThreads</classname></term>
				<listitem><para>As already mentioned, CLI is designed for concurrent access. This
				class is responsible for accepting TCP connections, creating server threads and
				finding or spawning module instances to handle the requests.</para></listitem>
			</varlistentry>
			<varlistentry>
				<term><classname>*Stream</classname></term>
				<listitem><para>Input and output streams are implemented. Most of them are used to
				deal with the subtleties of the communication protocol, such as escape sequences,
				and some technical issues, such as rogue <methodname>close()</methodname> requests
				from libraries.</para></listitem>
			</varlistentry>
		</variablelist>		
		
		<para>All the data structures that store module instances and map module names to instance
		pools and action names to action implementations provide constant or logarithmic access
		times. Linear searches are never used inside the core CLI runtime.</para>
	</sect2>
	
	<sect2>
		<title>Adapters Framework</title>
		<para>Numerous adapters are implemented in the
		<package>cz.cuni.mff.been.clinterface.adapters</package> package. All of these classes are
		deprecated. In fact they break one of the design goals mentioned in
		<xref linkend="been.devel.cli.purpose"/>. (CLI should be as thin a layer as possible and
		should restrain from extending the functionality of other components.)</para>
		
		<para>Most interfaces of the old BEEN components were designed with only the
		Web Interface in mind. Some of them were rather unfriendly to both RMI and synchronization.
		Most of them could not be easily modified. They were used too often throughout the framework
		and the team had limited time and human resources. For these reasons, some data conversion routines,
		adapters and facades had to be implemented to make the code of modules easier to read.</para>
		
		<para>CLI uses the JAXB technology and automatically generated data structures extensively.
		This technology did not exist when the original project was implemented.
		Most data convertors translate BEEN's internal data structures to JAXB-generated classes
		and vice versa.</para>
		
		<para>One of the most frequently used classes, the <classname>TaskDescriptor</classname>,
		has been fully replaced by an XML bound data structure. This makes both unmarshalling and
		marshalling much easier and avoids the need of data conversion routines. Most public data
		structures manipulated by the convertor classes should be replaced by automatically
		generated XML binding classes sooner or later.</para>
	</sect2>
	
	<sect2>
		<title>Command Line Modules</title>
		<para>Classes contained in the <package>cz.cuni.mff.been.clinterface.modules</package> package
		implement command line modules. A module is a mapping of action names to the corresponding
		implementations. It also contains data structures shared by all the actions. A module can
		be imagined as a directory with related commands that control the same component or
		manipulate the same data structure. An action is an equivalent of a command. It specifies
		what should be done and accepts parameters, flags and input data.</para>
		
		<para>Modules are designed in a way similar to their counterparts in the Web Interface,
		with some improvements that make reading of parameters much easier and simplify the code
		of action handler methods.</para>
		
		<para>Each module contains a nested enumeration of error messages. These error messages
		are sent back to the command line client's error output when something goes wrong. Ordinal
		numbers of the enumeration members are used as process return codes produced by the command
		line client. A detailed description of these codes can be found in
		<xref linkend="been.user.cli.inout"/>.</para>
	</sect2>
	
	<sect2>
		<title>Output Data Formatting</title>
		
		<para>The package <package>cz.cuni.mff.been.clinterface.writers</package> contains classes
		that produce formatted plain text output. They convert public data structures used by
		the components of BEEN to human-readable fields and records.</para>
		
		<para>This code only generates plain text. Actions that produce XML output use an XML
		marshaller directly and do not require any data conversion on output.</para>
	</sect2>
	
	<sect2>
		<title>The Command Line Client</title>
		<para>The command line client program is implemented in C99. Source files are located in
		the <filename>native/client</filename> subdirectory. The default name for the binary is
		<command>bcmd</command>.</para>
		<para>The source code is POSIX compliant and should compile on compatible operating systems.
		Linux and OpenSolaris on both 32-bit and 64-bit platforms (including SPARC) have been
		tested. The Intel Compiler and GCC can build the client. (The former has been tested on
		Linux only.)</para>
		<para>The client implementation avoids data preprocessing, so that most of the work
		can be done in the portable Java code.</para>
		<para>The <function>getaddrinfo()</function> function is used to resolve host names.
		IPv6 addresses are always preferred over the deprecated IPv4 addresses. The client will
		not compile on platforms that do not provide <function>getaddrinfo()</function>.</para>
	</sect2>
	
	<sect2>
		<title>External Resources</title>
		<para>CLI uses the <package>rmiio</package> library for file transfers to and from
		the Results Repository and the Software Repository. It does not depend on any other
		external libraries. Only standard components bundled with every JRE are used.</para>
		<para>As a control interface, CLI uses and depends on all the components of the BEEN
		framework. Most RMI interfaces and public data structures are used. However, there is no
		relation to the Web Interface or to a servlet container.</para>
	</sect2>
	
	<sect2>
		<title>Request Lifecycle</title>
		<para>This section describes the lifecycle of a request processed by the Command Line
		Interface. It is very similar to a HTTP server operation. There are no interactive sessions,
		just separate requests. There is always one request and one response per connection. Request
		handling is perfectly stateless, as far as the CLI is concerned. (Presumably, other BEEN
		components may change state as a result of requests processed by CLI.)</para>
		
		<orderedlist>
			<listitem><para>The user invokes the <command>bcmd</command> client binary and provides
			the command line and (optionally) a stream of input data.</para></listitem>
			<listitem><para>The client binary establishes a TCP connection to the BEEN service.
			Host and port information can be specified directly, read from environment variables or
			set to deafult values. (The three possibilities are tried in this order.)</para></listitem>
			<listitem><para>The client binary transfers the command line and the input data to the
			BEEN service.</para></listitem>
			<listitem><para>The BEEN service evaluates the command line, receives the input data
			and calls one of its specialized modules to process the request.</para></listitem>
			<listitem><para>The module finds and calls the action required by the user. The BEEN
			component that can process the request is then contacted by the action using RMI.</para></listitem>
			<listitem><para>The return value obtained from the BEEN component that processed the
			request is sent back to the command line client. The return data is preprocessed in
			most cases. This may include plain text formatting or XML marshalling. File downloads
			are the only case when raw data is sent.</para></listitem>
			<listitem><para>The command line client parses the response and returns the data
			using its standard output, error output and process return value. Output streams and
			return values are set using metadata contained in the response.</para></listitem>
		</orderedlist>
		
		<para>Of course, many things can go wrong. The communication protocol can handle most
		unusual situations gracefully and the command line client provides human-readable error
		messages. Details about the protocol can be found in
		<xref linkend="been.devel.cli.api"/>.</para>
	</sect2>
</sect1>