<?xml version="1.0" encoding="UTF-8"?>

<sect3
	xml:id="been.user.cli.reference.results.examples"
	xmlns="http://docbook.org/ns/docbook"
	xmlns:xlink="http://www.w3.org/1999/xlink"
	xmlns:xml="http://www.w3.org/XML/1998/namespace"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:xi="http://www.w3.org/2001/XInclude"
	xsi:schemaLocation="http://docbook.org/ns/docbook ../../../../docbook-5.0/xsd/docbook.xsd"
>
	<title>Results Module Examples</title>
	
	<para>XML Schema files related to this module: <filename>condition.xsd</filename>,
	<filename>dataset.xsd</filename>, <filename>td.xsd</filename>,
	<filename>trigger.xsd</filename>, <filename>tuplit.xsd</filename></para>
	
	<para>The Results Module queries the Results Repository. It can manipulate both data and
	metadata (definitions) of <glossterm baseform="dataset">datasets</glossterm>. Furthermore,
	it can manage <glossterm baseform="trigger">triggers</glossterm>. Last but not least, it can
	store, download and upload data files.</para>
	
	<para>The <command>dataset-data</command> action and both <command>*-dump</command> actions
	produce XML output. Example XML data will be shown in this chapter. Some other actions produce
	plain text output described in <xref linkend="been.user.cli.reference.results"/>.</para>
	
	<para>Listing <glossterm baseform="analysis">analyses</glossterm> known to the Results
	Repository with optional regular expression filtering:</para>
	<screen>$ <emphasis role="strong">./bcmd results analysis-list</emphasis></screen>
	<screen>$ <emphasis role="strong">./bcmd results analysis-list pattern='.*Xampler'</emphasis></screen>

	<para>Note that there is an <command>analysis-list</command> action in the Benchmarks Module as
	well. See <xref linkend="been.user.cli.reference.benchmarks.examples"/> for details. Both actions read
	different data structures and produce different output. Analyses known to the Benchmark
	Manager may or may not be known to the Results Repository. In most cases, the Results Repository
	doesn't list new analyses that haven't created any
	<glossterm baseform="dataset">datasets</glossterm> yet.</para>
	
	<para>Listing datasets of an analysis with optional regular expression filtering:</para>
	<screen>$ <emphasis role="strong">./bcmd results dataset-list analysis=MyXampler</emphasis></screen>
	<screen>$ <emphasis role="strong">./bcmd results dataset-list analysis=MyXampler pattern='.*runs'</emphasis></screen>
	
	<para>Listing triggers bound to a dataset with optional regular expression filtering:</para>
	<screen>$ <emphasis role="strong">./bcmd results trigger-list analysis=a1 dataset=results</emphasis></screen>
	<screen>$ <emphasis role="strong">./bcmd results trigger-list analysis=a2 dataset=results pattern='eval.*'</emphasis></screen>
	
	<para>Dumping dataset structure (metadata) to XML:</para>
	<screen>$ <emphasis role="strong">./bcmd results dataset-dump analysis=MyXampler dataset=results</emphasis></screen>
	
	<para>Creating a dataset definition from XML input:</para>
	<screen>$ <emphasis role="strong">./bcmd -b- results dataset-create</emphasis></screen>
	<screen>$ <emphasis role="strong">./bcmd -b dataset.xml results dataset-create</emphasis></screen>
	
	<para>Possible input/output metadata format:</para>
	<screen><![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<dataset
    xmlns="http://been.mff.cuni.cz/resultsrepositoryng/dataset"
    name="xampler_results"
    analysis="MyXampler"
>
    <int key="true" name="build_number"/>
    <file key="false" name="fileid"/>
    <string key="true" name="omniorb_timestamp"/>
    <int key="true" name="run_number"/>
    <string key="true" name="suite_name"/>
    <long key="true" name="xampler_revision"/>
</dataset>]]></screen>
	
	<para>Dumping data from a dataset to a plain text table, with optional column names:</para>
	<screen>$ <emphasis role="strong">./bcmd results dataset-data analysis=MyXampler dataset=results plain</emphasis></screen>
	<screen>$ <emphasis role="strong">./bcmd results dataset-data analysis=MyXampler dataset=results plain names</emphasis></screen>
	
	<para>Dumping data from a dataset to XML:</para>
	<screen>$ <emphasis role="strong">./bcmd results dataset-data analysis=MyXampler dataset=results plain</emphasis></screen>
	
	<para>Upper and/or lower bound on row serial numbers can be specified:</para>
	<screen>$ <emphasis role="strong">./bcmd results dataset-data analysis=a dataset=d from=100 to=200</emphasis></screen>
	
	<para>All the flags and options mentioned above can be combined with an optional condition
	specifiecation:</para>
	<screen>$ <emphasis role="strong">./bcmd -b- results dataset-data analysis=a dataset=d</emphasis></screen>
	<screen>$ <emphasis role="strong">./bcmd -b condition.xml results dataset-data analysis=a dataset=d</emphasis></screen>
	
	<para>A simple example of XML condition data follows. Logical operators
	(<option>&lt;and&gt;</option>, <option>&lt;or&gt;</option>), comparison operators
	(<option>&lt;lt&gt;</option>, <option>&lt;gt&gt;</option>, <option>&lt;le&gt;</option>,
	<option>&lt;ge&gt;</option>, <option>&lt;eq&gt;</option>, <option>&lt;ne&gt;</option>), null
	test (<option>&lt;null&gt;</option>) and trivial conjunction (<option>&lt;true&gt;</option>)
	are implemented. See the XML Schema for details and other operators.</para>
	
	<screen><![CDATA[<condition xmlns="http://been.mff.cuni.cz/taskmanager/td">
    <and>
        <eq property="omniorb_timestamp">
            <strval class="java.lang.String">2009-07-19 17:35:00</strval>
        </eq>
        <or>
            <null property="fileid">false</null>
            <ge property="run_number">
                <strval class="java.lang.Integer">10</strval>
            </ge>
        </or>
        <lt property="build_number">
            <strval class="java.lang.Integer">10</strval>
        </lt>
    </and>
</condition>]]></screen>
	
	<para>Storing data from XML into a dataset:</para>
	<screen>$ <emphasis role="strong">./bcmd -b- results dataset-store analysis=MyXampler dataset=results</emphasis></screen>
	<screen>$ <emphasis role="strong">./bcmd -b data.xml results dataset-store analysis=MyXampler dataset=result</emphasis></screen>
	
	<para>Possible input/output data format:</para>
<screen><![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<tuplit xmlns="http://been.mff.cuni.cz/resultsrepositoryng/tuplit">
    <row serial="13">
        <int name="build_number">1</int>
        <file name="fileid">af2d29c5-523d-4a07-b4e8-51a77e2fd148</file>
        <string name="omniorb_timestamp">2009-07-19 17:35:43</string>
        <int name="run_number">1</int>
        <string name="suite_name">ping</string>
        <long name="xampler_revision">476</long>
    </row>
    <row serial="14">
        <int name="build_number">1</int>
        <file name="fileid">2b9c6b34-afdf-48ed-b775-53a3c7bd54e1</file>
        <string name="omniorb_timestamp">2009-07-19 17:35:00</string>
        <int name="run_number">1</int>
        <string name="suite_name">ping</string>
        <long name="xampler_revision">476</long>
    </row>
</tuplit>]]></screen>
	
	<para>Serial numbers are ignored on input, so they need not be present. (The database generates
	them automatically.) They are included in both XML and plain text output.</para>
	
	<para>Removing (dropping) a dataset:</para>
	<screen>$ <emphasis role="strong">./bcmd results dataset-delete analysis=MyXampler dataset=results</emphasis></screen>
	
	<para>Dumping a trigger definition to XML:</para>
	<screen>$ <emphasis role="strong">./bcmd results trigger-dump uuid=6eb21a02-4aee-4d9c-9b12-3574d83b4b76</emphasis></screen>
	
	<para>Constants in condition expressions can be printed out in binary form.</para>
	<screen>$ <emphasis role="strong">./bcmd results trigger-dump uuid=6eb21a02-4aee-4d9c-9b12-3574d83b4b76 binary</emphasis></screen>
	
	<para>Creating a new trigger using an XML definition:</para>
	<screen>$ <emphasis role="strong">./bcmd -b- results trigger-create</emphasis></screen>
	<screen>$ <emphasis role="strong">./bcmd -b trigger.xml results trigger-create</emphasis></screen>
	
	<para>Possible input/output data format:</para>
	<screen><![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<trigger
    xmlns="http://been.mff.cuni.cz/taskmanager/td"
    analysis="MyXampler"
    dataset="xampler_results"
    evaluator="Xampler"
    uuid="6eb21a02-4aee-4d9c-9b12-3574d83b4b76"
>
    <condition>
        <eq property="suite_name">
            <binval>rO0ABXQAA210YQ==</binval>
        </eq>
    </condition>
    <taskDescriptor
        taskId="XamplerEvaluator-MyXampler"
        contextId="MyXampler-evaluators"
        treeAddress="/evaluator/xampler-MyXampler"
        name="xampler-evaluator-task"
    >
        <taskProperties>
            <taskProperty key="analysis.name" value="MyXampler"/>
            <taskProperty key="process.old.data" value="false"/>
        </taskProperties>
        <package>
            <rsl>]]><emphasis>[...]</emphasis><![CDATA[</rsl>
        </package>
        <hostRuntimes>
            <rsl>name =~ /.*/</rsl>
        </hostRuntimes>
    </taskDescriptor>
</trigger>]]></screen>

	<para>Presumably, the <option>uuid</option> attribute is ignored when a trigger is created.
	A new UUID will be generated instead. The example above contains a Task Descriptor definition.
	A more complex example of the XML task descriptor using most of the available optional elements
	and attributes can be seen in <xref linkend="been.user.cli.reference.tasks.examples"/>.</para>
	
	<para>Comparison of the default (<option>&lt;strval&gt;</option>) and binary
	(<option>&lt;binval&gt;</option>) representation of the same equality condition:</para>
	
	<screen><![CDATA[<condition>
    <eq property="suite_name">
        <strval class="java.lang.String">mta</strval>
    </eq>
</condition>]]></screen>
	<screen><![CDATA[<condition>
    <eq property="suite_name">
        <binval>rO0ABXQAA210YQ==</binval>
    </eq>
</condition>]]></screen>
	
	<para>Note that the two representations are equivalent for an instance <varname>x</varname> of
	class <classname>X</classname> if and only if the following conditions hold:</para>
	
	<itemizedlist>
	<listitem><para><classname>X</classname> is Serializable.</para></listitem>
	<listitem><para><classname>X</classname> has a constructor <methodname>X(String)</methodname>.</para></listitem>
	<listitem><para><code>x.equals(new X(x.toString()))</code></para></listitem>
	</itemizedlist>
	
	<para>Removing a trigger definition:</para>
	<screen>$ <emphasis role="strong">./bcmd results trigger-delete uuid=6eb21a02-4aee-4d9c-9b12-3574d83b4b76</emphasis></screen>
	
	<para>Removing all trigger definitions associated with the (analysis, dataset, evaluator) tuple:</para>
	<screen>$ <emphasis role="strong">./bcmd results trigger-delete analysis=a1 dataset=d1 evaluator=e1</emphasis></screen>
	
	<para>Uploading a file to the Results Repository:</para>
	<screen>$ <emphasis role="strong">./bcmd -b- results file-upload</emphasis></screen>
	<screen>$ <emphasis role="strong">./bcmd -b myGreatFile results file-upload</emphasis></screen>
	
	<para>Downloading a file from the Results Repository:</para>
	<screen>$ <emphasis role="strong">./bcmd results file-dowload uuid=af2d29c5-523d-4a07-b4e8-51a77e2fd148</emphasis></screen>
	
	<para>Removing a file from the Results Repository:</para>
	<screen>$ <emphasis role="strong">./bcmd results file-delete uuid=af2d29c5-523d-4a07-b4e8-51a77e2fd148</emphasis></screen>
	
	<para>Note that there are no file listing routines. Listing would not make sense, for all the
	files are indexed and accessed by UUIDs stored in the datasets. There are no names or other
	human-readable strings associated with them.</para>
</sect3>