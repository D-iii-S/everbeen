<?xml version="1.0" encoding="UTF-8"?>

<sect1
	xml:id="been.user.cli.line"
	xmlns="http://docbook.org/ns/docbook"
	xmlns:xlink="http://www.w3.org/1999/xlink"
	xmlns:xml="http://www.w3.org/XML/1998/namespace"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:xi="http://www.w3.org/2001/XInclude"
	xsi:schemaLocation="http://docbook.org/ns/docbook ../../../docbook-5.0/xsd/docbook.xsd"
>
	<title>Command Line</title>
	
	<sect2>
		<title>The Client Side</title>
		
		<para>The <command>bcmd</command> command line client accepts command line options and reads
		environment variables. A brief overview of these options and variables can be obtained
		using <command>bcmd --help</command> as follows:</para>
	
		<programlisting>$ ./bcmd --help
	BEEN command line wrapper
	    -i --input <co xml:id="been.user.cli.line.input"/><co xml:id="been.user.cli.line.file"/>
	        Do not send command line arguments. Read from a file instead.
	        Reads standard input when either '-' or no attribute is given.
	    -b --blob <co xml:id="been.user.cli.line.blob"/><coref linkend="been.user.cli.line.file"/>
	        Transfer a blob together with the request. Reads from a file.
	        Reads standard input when either '-' or no attribute is given.
	    -h --host <co xml:id="been.user.cli.line.host"/>
	        Name or IP address where the BEEN command line service is listening.
	        If not set, then BEEN_HOST environment variable will be used.
	        When BEEN_HOST is not set, localhost will be contacted.
	    -p --port <co xml:id="been.user.cli.line.port"/>
	        Port number where the BEEN command line service is listening.
	        If not set, then BEEN_PORT environment variable will be used.
	        When BEEN_PORT is not set, port number 2336 will be used.</programlisting>
			
		<calloutlist>
		<callout arearefs="been.user.cli.line.input">
		<para>The command line client does not parse or preprocess the input for the Command Line
		Service in any way. It transfers either all command line arguments after the last option
		separated by a space character, or reads and transfers the contents of the file. The former
		happens by default and the latter can be achieved by specifying the <option>-i</option>
		(<option>--input</option>) option. When the command line arguments are read from a file, the
		command line can only contain options known to <command>bcmd</command>. Any other tokens will
		cause an error.</para>
		</callout>
		<callout arearefs="been.user.cli.line.blob">
		<para>When <option>-b</option> (<option>--blob</option>) is not set, <command>bcmd</command>
		will only transfer the command line arguments, without sending additional input data.</para>
		</callout>
		<callout arearefs="been.user.cli.line.file">
		<para>The input files are always read till the end. The command input and blob input should
		be distinct files and the <command>bcmd</command> client always checks inode numbers when
		available. Presumably, this protection can be easily circumvented by reading one of the files
		from standard input generated by <command>cat</command>. It is the user's responsibility to
		get the file references right.</para>
		</callout>
		<callout arearefs="been.user.cli.line.host">
		<para>Host identifier strings known to the <function>getaddrinfo()</function> library
		function are accepted. This can be a host name, an IPv6 address or a deprecated legacy IPv4
		address. When the host name resolves to multiple addresses, IPv6 is preferred over IPv4 and
		all the addresses are tried successively in the order obtained from
		<function>getaddrinfo()</function>. The connection timeout is rather short to prevent scripts
		from freezing for a long time on connection problems. The <option>-h</option>
		(<option>--host</option>) option is preferred over the <envar>BEEN_HOST</envar> environment
		variable when both are set.</para>
		</callout>
		<callout arearefs="been.user.cli.line.port">
		<para>Service and port identifier strings known to the <function>getaddrinfo()</function>
		library function are accepted. This can be a service name or a TCP port number. Most users
		will never need to set this option. It may be useful when you run multiple instances of the BEEN
		framework for testing and debugging porposes. The <option>-p</option> (<option>--port</option>)
		option is preferred over the <envar>BEEN_PORT</envar> environment variable when both are
		set.</para>
		</callout>
		</calloutlist>
	</sect2>
	
	<sect2>
		<title>Command Line Synopsis</title>
		
		<cmdsynopsis>
			<command>bcmd</command>
			<arg choice="opt">-i
				<group choice="opt">
					<arg choice="plain"><replaceable>file</replaceable></arg>
					<arg choice="plain">-</arg>
				</group>
			</arg>
			<arg choice="opt">-b
				<group choice="opt">
					<arg choice="plain"><replaceable>file</replaceable></arg>
					<arg choice="plain">-</arg>
				</group>
			</arg>
			<arg choice="opt">-h <arg choice="req"><replaceable>host</replaceable></arg></arg>
			<arg choice="opt">-p <arg choice="req"><replaceable>port</replaceable></arg></arg>
			<arg choice="opt">
				<arg choice="req"><replaceable>module</replaceable></arg>
				<arg choice="req"><replaceable>action</replaceable></arg>
				<group choice="opt" rep="repeat">
					<arg choice="plain"><replaceable>flag</replaceable></arg>
					<arg choice="plain"><replaceable>parameter</replaceable>=<replaceable>value</replaceable></arg>
				</group>
			</arg>
		</cmdsynopsis>
		
		<para>As already mentioned, when the <option>-i</option> (<option>--input</option>) option is
		used, all the command line arguments (starting from <replaceable>module</replaceable>) and any
		command line tokens not recognized by <command>bcmd</command> will cause an error.</para>
	</sect2>
	
	<sect2>
		<title>The Server Side</title>
		<subtitle>Getting Help and Command Structure</subtitle>
		
		<para>There is a virtual module called <command>help</command> that instructs CLI to send back
		a list of supported module names. Similarly, each module has a <command>help</command> action
		that can be used to obtain the list of actions supported by the module. Furthermore, each action
		has a <option>help</option> flag. When the <option>help</option> flag is set, a list of
		parameters and flags required and supported by the action is sent back. The (possibly optional)
		blob input is also on the list where applicable.</para>
		
		<para>Using the <command>help</command> module:</para>
		
		<screen>$ <emphasis role="strong">./bcmd help</emphasis>
benchmarks
csvcs
dummy
hosts
meta
packages
results
tasks</screen>
		
		<para>Using the <command>help</command> action of the <command>results</command> module:</para>
		
		<screen>$ <emphasis role="strong">./bcmd results help</emphasis>
analysis-list
dataset-create
dataset-data
dataset-delete
dataset-dump
dataset-list
dataset-store
file-delete
file-download
file-upload
trigger-create
trigger-delete
trigger-dump
trigger-list</screen>
	
		<para>Using the <option>help</option> flag of the <command>dataset-data</command> action of the
		<command>results</command> module:</para>
		
		<screen>$ <emphasis role="strong">./bcmd results dataset-data help</emphasis>
blob
P       analysis
P       dataset
p       from
p       to
f       names
f       plain</screen>
	
		<para>Capital <option>P</option> denotes mandatory parameters, <option>p</option>
		denotes optional parameters, <option>f</option> denotes flags, <option>BLOB</option> stands
		for mandatory standard input and <option>blob</option> stands for optional standard input. Note
		that dependencies among flags and parameters might be much more elaborate than this simple
		overview can show. Human-readable error messages are always returned when a contract is broken.
		Let's ask about the <command>dataset-data</command> action of the <command>results</command>
		module, for example.</para>
	</sect2>
</sect1>