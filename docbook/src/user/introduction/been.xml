<?xml version="1.0" encoding="UTF-8"?>

<sect1
	xmlns="http://docbook.org/ns/docbook"
	xmlns:xlink="http://www.w3.org/1999/xlink"
	xmlns:xml="http://www.w3.org/XML/1998/namespace"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:xi="http://www.w3.org/2001/XInclude"
	xsi:schemaLocation="http://docbook.org/ns/docbook ../../../docbook-5.0/xsd/docbook.xsd"
>	
	<title>Purpose of the BEEN Project</title>
		
	<para>When developing and evaluating software, it is often useful to automatically measure
	performance of the software and compare it with other similar products or with older versions
	of the same software. One of the possibilities of performance measurement is to run a model
	application (a benchmark) which simulates the behavior of real application and provides
	performance data. Usually, such benchmarks are conducted using tools built ad-hoc for each
	project, resulting in minimal code reuse and waste of resources. When benchmarking
	inherently distributed software, such as client-server applications or middleware, the
	construction of a benchmarking framework is a non-trivial task, as the framework has to cope
	with tasks such as distributed deployment, synchronization, monitoring and collection of
	results. Clearly, there is a place for a general framework for conducting benchmarks in a
	distributed environment.</para>
		
	<para>A special application of benchmarking is automatic performance evaluation of software during
	development – regression benchmarking. It is useful mainly to detect code changes with
	significant positive or negative impact on software performance. Regression benchmarking
	requires precise measurement, complicated statistical evaluation and full automation of the
	benchmark execution (downloading the software, compilation, etc.).</para>
		
	<para>We have solved the outlined problems in BEEN and created a generic tool for regression
	benchmarking in a heterogeneous distributed environment. BEEN presents a common
	execution environment suitable for running many kinds of different benchmarks (i.e. its
	architecture is not tied to any specific benchmark). The notable features include:</para>
	
	<itemizedlist>
		<listitem><para><emphasis role="strong">Support for heterogeneous environment.</emphasis> BEEN can be run on Windows and Linux
		platforms and in limited way on any platform capable of running Java.
		Regression benchmarking. It is easy to setup BEEN to scenarios such as download of
		the daily snapshot of a product from the source code repository, execution of specified
		benchmarks on the snapshot and processing of the results.</para></listitem>
			
		<listitem><para><emphasis role="strong">Automation.</emphasis> Everything is fully automatic from downloading and compilation of the
		benchmarked software, deploying software to hosts and running the benchmarks; to
		collecting and processing results. This allows for unattended execution of regression
		benchmarks.</para></listitem>
			
		<listitem><para><emphasis role="strong">Complete statistical analysis and visualization of the results.</emphasis> Results of the
		benchmarks can be statistically processed and various graphs can be generated from
		the results. Standard statistical environment R is used at the core of the results
		processing component. The results are always stored as a raw data; no information is
		lost by the system.</para></listitem>
			
		<listitem><para><emphasis role="strong">User-friendly web interface.</emphasis> The whole framework is controlled through a unified
		web interface – there is no need to install any special applications and the framework
		can be controlled from any computer with a web browser. Special care was taken to
		make the interface as easy to use as possible.</para></listitem>
		
		<listitem><para><emphasis role="strong">Logging and debugging facilities.</emphasis> Status of all BEEN components can be easily
		monitored. Almost every action in the system is logged and the logs are sent to a
		central repository, where they can be inspected via a web interface.</para></listitem>
	
		<listitem><para><emphasis role="strong">Extensibility.</emphasis> BEEN can be extended to support additional benchmarks via plugins.
		The statistical processing is customizable by writing scripts in the R language. User
		may use a rich library of built-in functions while working with the benchmark results.</para></listitem>
	</itemizedlist>
</sect1>
