<?xml version="1.0" encoding="UTF-8"?>

<sect1
	xmlns="http://docbook.org/ns/docbook"
	xmlns:xlink="http://www.w3.org/1999/xlink"
	xmlns:xml="http://www.w3.org/XML/1998/namespace"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:xi="http://www.w3.org/2001/XInclude"
	xsi:schemaLocation="http://docbook.org/ns/docbook ../../../docbook-5.0/xsd/docbook.xsd"
>
	<title>The RSL language</title>
	
	<para>Restriction Specification Language (RSL) is a simple, but general language for selecting objects
	matching specified conditions from a set. In BEEN, it is used in several places:</para>

	<itemizedlist>
		<listitem>
			<para>in the task descriptor</para>
			<itemizedlist>
				<listitem><para>to select a package for a task from packages stored in the Software Repository</para></listitem>
				<listitem><para>to select hosts where the task can run</para></listitem>
			</itemizedlist>
		</listitem>
		<listitem><para>in experiment configuration, to specify condition on hosts in various roles</para></listitem>
		<listitem><para>in Host Manager's software alias definitions, to specify restrictions for the operating
		system and for the application</para></listitem>
	</itemizedlist>

	<para>For generality, we will call queried objects items and their associated metadata properties.</para>
	
	<sect2>
		<title>Language Description</title>
		
		<para>We introduce the RSL syntax and semantics in the informal way. For the formal grammar of
		RSL, see RSL Grammar (Part IV, Appendix C).<footnote><para>WillBeen note: This refers to
		<biblioref linkend="BUD2"/>, the old BEEN documentation.</para></footnote></para>
	</sect2>
	
	<sect2>
		<title>Conditions</title>
		
		<para>Basic unit of the RSL is a simple condition. It has a form: <code>propertyPath operator value</code>.</para>
		
		<example>
			<screen><![CDATA[hostname == "localhost"
processor.speed > 500
java.version >= 1.5.0]]></screen>
		</example>
		
		<para>Simple condition restricts the query result to those items, whose properties match given
conditions. Available operators and allowed property and value types are described below.
Simple conditions can be combined using operators <![CDATA[&&]]> and ||, like boolean expressions in
Java. Parenthesis can be used to denote precedence.</para>

		<example>
			<screen><![CDATA[(name == "foo" || name == "bar") && version >= 3.0]]></screen>
		</example>
		
		<para>In case of hosts, properties have hierarchical structure and more items of same name exist on
		one level &#8212; the property is in fact array (for example, a host usually has many applications
		installed). Sometimes, it is necessary to specify more restrictions on concrete property in this
		array. This is done using qualified condition.</para>

		<example>
			<screen><![CDATA[application { name == "ssh" && version >= 2.0 }]]></screen>
		</example>
		
		<para>The example could be read as “select those items, which has at least one property ‘application’,
		which has name equal to ‘ssh’ and version greater or equal to 2.0”.</para>
		
		<para>Note the difference against:</para>
		
		<example><screen><![CDATA[application.name == "ssh" && application.version >= 2.0]]></screen></example>
		
		<para>This example means “select those items, which has at least one property ‘application’, which
		has name equal to ‘ssh’, and at least one property ‘application’ with version greater or equal to
		2.0”.</para>
	</sect2>
	
	<sect2>
		<title>Types</title>
		
		<para>Properties can be of following types:</para>
		
		<sect3>
			<title>Long</title>
			
			<para>This type can be written also as a literal on the right-hand side of the operator using usual
			syntax – sequence of digits – with optional unit appended. Following units are supported:</para>
			
			<table>
				<title>Units</title>
				<tgroup cols="2">
					<thead>
						<row><entry>Unit</entry><entry>Size</entry></row>
					</thead>
					<tbody>
						<row><entry><code>b</code></entry><entry><code>2<superscript>0</superscript></code></entry></row>
						<row><entry><code>k, kB</code></entry><entry><code>2<superscript>10</superscript></code></entry></row>
						<row><entry><code>M, MB</code></entry><entry><code>2<superscript>20</superscript></code></entry></row>
						<row><entry><code>G, GB</code></entry><entry><code>2<superscript>30</superscript></code></entry></row>
						<row><entry><code>T, TB</code></entry><entry><code>2<superscript>40</superscript></code></entry></row>
						<row><entry><code>P, PB</code></entry><entry><code>2<superscript>50</superscript></code></entry></row>
					</tbody>
				</tgroup>
			</table>
			
			<para>All units are case-sensitive and must be appended right after the last digit (no whitespace or
			other separator is allowed).</para>
			
			<example>
				<screen><![CDATA[1
1kB
100M
55TB]]></screen>
			</example>
		</sect3>
		
		<sect3>
			<title>Version</title>
			
			<para>This type can be written also as a literal on the right-hand side of the operator. Versions are
			composed from at least two parts, separated by dots (<quote><code>.</code></quote>). Those parts can contain letters,
			digits, dash (<quote><code>-</code></quote>) and underscore (<quote><code>_</code></quote>).
			First part of the version must begin with digit.</para>
			
			<example>
				<screen><![CDATA[1.0
100.100.100
1.2beta5
3.0_R3-3]]></screen>
			</example>
		</sect3>
		
		<sect3>
			<title>Date</title>
			
			<para>This type can be written also as a literal on the right-hand side of the operator. Used syntax is
taken from ISO 8601. Allowed formats are:</para>

			<variablelist>
				<varlistentry>
					<term>Year and month:</term>
					<listitem><para><code>YYYY-MM</code></para><para>(e.g. <code>1997-07</code>)</para></listitem>
				</varlistentry>
				<varlistentry>
					<term>Complete date:</term>
					<listitem><para><code>YYYY-MM-DD</code></para><para>(e.g. <code>1997-07-16</code>)</para></listitem>
				</varlistentry>
				<varlistentry>
					<term>Complete date plus hours and minutes:</term>
					<listitem><para><code>YYYY-MM-DDThh:mmTZD</code></para><para>(e.g. <code>1997-07-16T19:20+01:00</code>)</para></listitem>
				</varlistentry>
				<varlistentry>
					<term>Complete date plus hours, minutes and seconds:</term>
					<listitem><para><code>YYYY-MM-DDThh:mm:ssTZD</code></para><para>(e.g. <code>1997-07-16T19:20:30+01:00</code>)</para></listitem>
				</varlistentry>
				<varlistentry>
					<term>Complete date plus hours, minutes, seconds and a decimal fraction of a second:</term>
					<listitem><para><code>YYYY-MM-DDThh:mm:ss.sTZD</code></para><para>(e.g. <code>1997-07-16T19:20:30.45+01:00</code>)</para></listitem>
				</varlistentry>
			</variablelist>
		</sect3>
		
		<sect3>
			<title>String</title>
			
			<para>This type can be written also as a literal on the right-hand side of the operator using usual
			syntax &#8212; enclosing in quotes. Quote character in the string can be escaped using <code>\"</code>.</para>
		</sect3>
		
		<sect3>
			<title>PackageType</title>
			
			<para>This type can be written also as a literal on the right-hand side of the operator using reserved
			words source, binary, task and data.</para>
			
			<example>
				<screen><![CDATA[type == source
type != data]]></screen>
			</example>
		</sect3>
		
		<sect3>
			<title>List (of Strings)</title>
			
			<para>This type can’t be written as a literal on the right-hand side of the operator.</para>
		</sect3>
	</sect2>
	
	<sect2>
		<title>Operators</title>
		
		<sect3>
			<title>Equality Operators (<code>==</code>, <code>!=</code>)</title>
			<para>This operator can be applied to properties of types Long, Version, Date, String and
			PackageType. Values on the right-hand side of the operator must be of the same type as the
			restricted property.</para>
		</sect3>
		
		<sect3>
			<title>Comparison Operators (<code>&gt;</code>, <code>&gt;=</code>, <code>&lt;</code>, <code>&lt;=</code>)</title>
			<para>This operator can be applied to properties of types Long, Version, Date and String. Values
			on the right-hand side of the operator must be of the same type as the restricted property.</para>
		</sect3>
		
		<sect3>
			<title>Containment Operator (<code>contains</code>)</title>
			<para>This operator can be applied to properties of type List. Value on the right-hand side of the
			operator must be String.</para>
			
			<example>
				<screen><![CDATA[hardwarePlatforms contains "linux"]]></screen>
			</example>
		</sect3>
		
		<sect3>
			<title>Regular Expression Operators (<code>=~</code>, <code>!~</code>)</title>
			<para>This operator can be applied to properties of type String. Value on the right side of the
			operator must be a Java regular expression, enclosed in slashes (<quote><code>/</code></quote>). Slash characters in the
			regular expression can be escaped using <code>\/</code>. Optional flag <quote><code>i</code></quote> can be added at the end of the
			regular expression to denote case-insensitivity.
			The <code>=~</code> operator means <quote>matches</quote>, the <code>!~</code> operator means <quote>does not match</quote>.</para>
			
			<example>
				<screen><![CDATA[name =~ /mff\.cuni\.cz/
name =~ /MFF\.CUNI\.CZ/i
name !~ /\.com$/]]></screen>
			</example>
		</sect3>
	</sect2>
</sect1>