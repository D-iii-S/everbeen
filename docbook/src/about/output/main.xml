<?xml version="1.0" encoding="UTF-8"?>

<chapter
	xml:id="been.about.output"
	xmlns="http://docbook.org/ns/docbook"
	xmlns:xlink="http://www.w3.org/1999/xlink"
	xmlns:xml="http://www.w3.org/XML/1998/namespace"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:xi="http://www.w3.org/2001/XInclude"
	xsi:schemaLocation="http://docbook.org/ns/docbook ../../../docbook-5.0/xsd/docbook.xsd"
>
	<title>Project Output</title>

	<sect1>
		<title>Project Assignment</title>
		
		<para>This section contains text copied directly from the Project Committee's web site.</para>
		
		<address><uri>http://urtax.ms.mff.cuni.cz/prk/zadani/wbeen.txt</uri></address>
		
		<sect2>
			<title>Overview</title>
			
			<para>The Been framework is a student project, successfully completed during the
			2004-2006 period, which provides a framework for executing benchmark
			experiments in a heterogeneous networked environment.</para>
			
			<para>The basic architecture of the Been framework consists of a host runtime
			capable of executing arbitrary tasks, a task manager that relies on the
			host runtime to distribute and execute scheduled sequences of tasks, and
			a benchmark manager that creates sequences of tasks to perform benchmarks.
			Other components include a software repository, a results repository, and
			a graphical user interface.</para>
			
			<para>For a detailed overview of the Been framework, see a paper describing
			its main components (<biblioref linkend="B1"/>) or the homepage
			of the Been framework (<biblioref linkend="B2"/>).</para>
		</sect2>
		
		<sect2>
			<title>Goals</title>
		
			<para>The goal of this project is to extend the Been framework further, namely:</para>
		
			<itemizedlist>
				<listitem>
					<para>To integrate support for writing tasks as scripts.</para>
					<para>The current version of the Been framework requires that tasks are
						implemented as Java classes, which can be cumbersome especially
						for tasks that involve spawning multiple external processes.
						The support for writing tasks as scripts would make it possible
						to implement tasks in some common scripting language, making the
						entire framework more flexible when introducing new tasks.</para>
				</listitem>
		
				<listitem>
					<para>To create an interface that would allow driving the Been framework
						from other places than the user interface, especially from scripts.</para>
		
					<para>The current version of the Been framework requires that experiments
						are controlled from a web interface, making it difficult to create
						experiments that are not entirely managed by the Been framework.
						The external interface would allow creating such experiments.</para>
				</listitem>
		
				<listitem>
					<para>To create a modular results repository structure that would allow
						plugging in different results repositories, and to create an alternative
						results repository that would integrate with the newly developed Drupal
						Plugin for presenting regression benchmarking results, as a proof of
						concept of the modular results repository structure.</para>
		
					<para>The current version of the Been framework provides a repository
						that integrates Java and R using legacy libraries that are no
						longer maintained, making it difficult to deploy Been.</para>
				</listitem>
		
				<listitem>
					<para>To perform basic maintenance related to upgrades of packages that Been
						relies on for its functionality, making as many such packages as possible
						strictly optional.</para>
				</listitem>
			</itemizedlist>
		
			<para>Optional tasks depending on the success of the previous steps include:</para>
		
			<itemizedlist>
		
				<listitem>
					<para>Adding support for regression benchmarking calculations with additional
						experiment planning to improve regression benchmarking precision.
						The necessary calculations are described in <biblioref linkend="KT1"/>.</para>
				</listitem>
		
				<listitem>
					<para>Adding support for other benchmarks, such as DaCapo or SpecJVM.</para>
				</listitem>
			</itemizedlist>
		</sect2>
			
		<bibliography>
			<title>References</title>
			<biblioentry xml:id="B1">
				<title>Automated Benchmarking and Analysis Tool</title>
				<biblioid class="uri">http://dsrg.mff.cuni.cz/publications/Submitted_1404_BEEN.pdf</biblioid>
			</biblioentry>
			<biblioentry xml:id="B2">
				<title>BEEN &#8212; Benchmarking Environment</title>
				<biblioid class="uri">http://been.ow2.org/</biblioid>
			</biblioentry>
			<biblioentry xml:id="KT1">
				<authorgroup>
					<author><personname><firstname>Tomáš</firstname><surname>Kalibera</surname></personname></author>
					<author><personname><firstname>Petr</firstname><surname>Tůma</surname></personname></author>
				</authorgroup>
				<title>Precise Regression Benchmarking with Random Effects: Improving Mono Benchmark Results</title>
				<biblioid class="uri">http://dsrg.mff.cuni.cz/publications/KaliberaTuma-PreciseRegressionBenchmarking.pdf</biblioid>
			</biblioentry>
		</bibliography>
	</sect1>
	
	<sect1>
		<title>How Goals Were Met</title>
		
		<itemizedlist>
			<listitem>
				<para><emphasis role="strong"><quote>To integrate support for writing tasks as scripts.</quote></emphasis></para>
				<para>Support for new types of tasks has been implemented. Tasks can be coded in
				Python (using the Jython implementation) and in the platform-dependent shell language
				(i.e. Bash on UNIX platforms, Windows script on Windows platform).</para>
			</listitem>
	
			<listitem>
				<para><emphasis role="strong"><quote>To create an interface that would allow driving the Been framework
					from other places than the user interface, especially from scripts.</quote></emphasis></para>
				<para>The <glossterm>Command Line Interface</glossterm> was designed and implemented
				to meet this goal. The new component makes it possible to control the BEEN framework
				from a shell. All use cases provided by the Web Interface have been ported to the
				Command Line Interface. Furthermore, extra features (not supported by the Web
				Interface) have been implemented.</para>
			</listitem>
		
			<listitem>
				<para><emphasis role="strong"><quote>To create a modular results repository structure that would allow
					plugging in different results repositories, and to create an alternative
					results repository that would integrate with the newly developed Drupal
					Plugin for presenting regression benchmarking results, as a proof of
					concept of the modular results repository structure.</quote></emphasis></para>
				<para>A new <glossterm>Results Repository</glossterm> was designed and implemented
				from the ground up. This task was not addressed the way suggested by the assignment.
				Instead, a very flexible and event-driven framework for data evaluation has been
				implemented. The new Results Repository is based around the Derby database
				technology and can be easily extended to handle evaluation of complex multi-level
				results data automatically. Computations can be performed on multiple machines in
				parallel. It is easy to implement automatic data handlers to share the output data
				with the Drupal plugin. An example scenario using the Xampler benchmark and cooperating
				with the Drupal plugin has been implemented as a proof of concept.</para>
			</listitem>
	
			<listitem>
				<para><emphasis role="strong"><quote>To perform basic maintenance related to upgrades of packages that Been
					relies on for its functionality, making as many such packages as possible
					strictly optional.</quote></emphasis></para>
				<para>All the bundled libraries have been upgraded. Some of them were replaced by
				newer or more suitable ones. New and powerful technologies have been integrated
				integrated into the BEEN framework. (JAXB and Derby are the most important
				examples.)</para>
				<para>Numerous bugs have been fixed. Some original components have been extended
				and refactored thoroughly. This work was not planned by the project assignment.
				Surprisingly, it is worth about 50% of time and effort spent on the project. It had
				to be done in order to move the project forward and improve the poor code quality
				of some components.</para>
			</listitem>
	
			<listitem>
				<para><emphasis role="strong"><quote>Adding support for regression benchmarking calculations with additional
					experiment planning to improve regression benchmarking precision. [...]</quote></emphasis></para>
				<para>A new <glossterm>Benchmark Manager</glossterm> has been designed and implemented
				from the ground up. The new component removed the fixed structure of benchmarks
				and many other limitations. Experiments can be planned dynamically and planning
				can be adjusted to meet the needs of various benchmarking suites. Full support for
				the Xampler benchmarking suite with the OmniORB CORBA framework has been implemented
				as a proof of concept. The implementation includes dynamic planning based on software
				repository status and on overall progress of the whole benchmark.</para>
			</listitem>
	
			<listitem>
				<para><emphasis role="strong"><quote>Adding support for other benchmarks, such as DaCapo or
				SpecJVM.</quote></emphasis></para>
				<para>The team had neither time nor human resources to work on this optional task.
				Only the Xampler benchmarking suite is supported at the moment.</para>
			</listitem>
		</itemizedlist>
	</sect1>
	
	<sect1>
		<title>Short Summary of Changes</title>
	
		<para>This section gives a brief summary of the most important changes made to the original code
		base the WillBeen project started with.</para>
		
		<itemizedlist>
			<listitem><para>The Command Line Interface component designed and implemented</para></listitem>
			<listitem><para>The Results Repository component redesigned and reimplemented</para></listitem>
			<listitem><para>The Benchmark Manager component redesigned and reimplemented</para></listitem>
			<listitem><para>The mechanism of pluggable modules introduced</para></listitem>
			<listitem><para>Support for tasks implemented in Python or platform-dependent shell added</para></listitem>
			<listitem><para>New technologies integrated, such as JAXB and the Derby database</para></listitem>
			<listitem><para>The Task Manager extended, refactored and fixed</para></listitem>
			<listitem><para>Bug fixes and code refactoring in most parts of the framework</para></listitem>
		</itemizedlist>
		
		<para>The total amount of work can be estimated from the coding statistics described in
		<xref linkend="been.about.history.statistics"/>.</para>
	</sect1>
	
	<sect1>
		<title>New Components</title>
		
		<sect2>
			<title>Pluggable Module Framework</title>
			<para>
			Pluggable Module Framework introduces a new way how to reuse code run under BEEN framework. Before 
			this component was here, developers that wanted to reuse their code were forced to either
			write <glossterm baseform="task">tasks</glossterm> doing unreasonably small piece of work (to increase probability
			those <glossterm baseform="task">tasks</glossterm> will not be too specific and thus not reusable) or 
			include the code they wanted to reuse into BEEN codebase. Obviously, none of these solutions was good at all. 
			</para>   
			<para>
			Pluggable Module Framework enables developers to package the code they want to reuse into a unit
			called <glossterm>pluggable module</glossterm>. These pluggable modules can be then loaded
			by <glossterm>tasks</glossterm> whenever they're needed. Pluggable Module loading is 
			made as easy as possible for the client tasks, but Pluggable Module Framework also 
			supports advanced features such as pluggable module dependencies.
			</para>
			
			<para>
			Pluggable Module Framework is described in detail in Development Documentation, 
			<xref linkend="been.devel.pluggable"/>.
			</para>
		</sect2>
		
		<sect2>
			<title>Debug Assistant</title>
			<para>
			One of the very important features of BEEN framework is debug-ability.
			Because options how to debug were unsatisfactory in old version of BEEN,
			we decided to address this issue and to make BEEN and all its subcomponents
			really debug-enabled (even though it was not in part of our assignment). 
			As a result, <glossterm>Task Manager</glossterm>, <glossterm>Host Runtime</glossterm>, all BEEN core 
			services and also all the user tasks run by BEEN can now be remotely debugged.
			Also, to make debugging BEEN more comfortable for developers, we implemented
			a component called <glossterm>Debug Assistant</glossterm> that allows 
			developers to keep track of tasks that are about to be run along with their 
			debug information (which would normally be retrieved manually from <glossterm>task</glossterm> logs). 
			</para>
			
			<para>
			More information on how to debug BEEN can be found in Development Documentation,
			<xref linkend="been.devel.theory.debug"/>.
			</para>
		</sect2>
		
		<sect2>
			<title>Command Line Interface</title>
			
			<para>This new component was designed from the ground up to revolutionize the way users
			can control the BEEN framework. It is independent of HTTP servlet containers and graphic
			user interfaces.</para>
			
			<para>Apart from the two dependencies mentioned above, the Web Interface also has many
			other limitations. For example, working with big amounts of configuration data is
			rather painful. Using XML data for input/output is quite complicated when combined
			with web sites and forms. Simply
			put, web browsers are not designed for this type of work. Things become easier when
			the full power of a shell can be used.</para>
			
			<para>Implementation details and information on possible extensions can be found in
			Development Documentation, <xref linkend="been.devel.cli"/>.</para>
			
			<para>A complete user's guide with a reference manual and examles is located in
			User Documentation, <xref linkend="been.user.cli"/>,</para>
		</sect2>
		
		<sect2>
			<title>JAXB Technology Integration</title>
			
			<para>The Command Line Interface uses XML extensively. There were more than three
			different ways of XML data handling in the original BEEN framework. The WillBeen
			projects addressed this issue by integrating the JAXB technology and creating
			easy-to-use libraries for XML data manipulation.</para>
			
			<para>Implementation details and extension points are described in
			Development Documentation, <xref linkend="been.devel.jaxb"/>.</para>
		</sect2>
		
		<sect2>
			<title>The Task Tree</title>
		
			<para>The Task Manager organizes tasks using simple namespaces called
			<glossterm baseform="context">contexts</glossterm>. This is certainly sufficient for
			computations, but contexts with tens of thousands of tasks are hard to read for the
			user.</para>
			
			<para>The issue has been resolved by introducing a tree-like structure for task listing.
			Each task is assigned an address (similar to a UNIX directory path) of the tree node
			it will reside in. The tree structure provides easy listing of tasks and task
			<glossterm baseform="generator">generators</glossterm> can easily sort the tasks they
			produce so that they are easy to find for the user.</para>
			
			<para>The Task Tree has been closely integrated with both the Command Line Interface
			and the Web Interface. Users can browse tasks by their tree path.</para>
			
			<para>Task <glossterm baseform="task tree flag">flags</glossterm> are the most important feature
			of the Task Tree. They are assigned to leaf nodes (representing tasks) and inherited by the
			parent nodes automatically. Using this mechanism, errors, warnings and task completion
			can be reported to parent nodes. This is similar to the graphic status reports on
			folders known from today's integrated development environments.</para>
			
			<para>The implementation is designed in such a way that new flags and flag inheritance
			rules can be added.</para>
			
			<para>The Task Tree is described in Development Documentation, <xref linkend="been.devel.tasktree"/>
			and in User Documentation, <xref linkend="been.user.execution.tasks.tree"/>.</para>
		</sect2>
		
		<sect2>
			<title>Scripting Framework</title>
			<para>
			We designed and implemented scripting support for BEEN. Currently, two types of scripting
			languages are supported: Jython (which is a Java port of Python, that is fully Python-compatible
			but allows interaction with Java environment) and platform-dependent shell (Bash for UNIX platforms,
			Windows Script for Windows platform). Depending on user's needs, scripts can be either
			run ad-hoc or be packaged and stored in Software Repository for later reuse.
			We also addressed the problem of scripts interacting with the BEEN environment.
			Shell scripts accept run-time arguments from BEEN through environment variables
			and can interact with BEEN by using Command Line Interface. Jython scripts 
			are backward compatible with Java, so almost anything you can implement with
			Java task you can implement with Jython task too. 
			</para>
			<para>
			More information about scripting support in BEEN you can find in  
			Development Documentation, <xref linkend="been.devel.scripting"/>.
			</para>
		</sect2>
	</sect1>
	
	<sect1>
		<title>Reimplemented Components</title>
	
		<sect2>
			<title>Benchmark Manager</title>
			
			<para>The original Benchmark Manager used a fixed structure of benchmarks, which imposed
			some limitations and was not flexible enough. Details on the original implementation
			can be found in <biblioref linkend="BUD0" units="pages" begin="31" end="35"/>.</para>
			
			<para>The WillBeen team decided to redesign and reimplement this component to make it
			more extensible and easily customizeble for a broad range of benchmarking scenarios.</para>
			
			<para>The old Benchmark Manager required every benchmark to have fixed source-build-run
			structure. The new Benchmark Manager doesn't expect anything about the benchmark structure.
			It splits the benchmark tasks only into two groups: generating data and evaluating data.
			Most benchmarks are expected to have the originally proposed structure but they are no
			longer forced to have it.</para>

			<para>Another major change was done in the way Benchmark Manager is extended. The old
			plugins were replaced by the newly introduced pluggable modules. Plugins always had three
			classes: <classname>Configurator</classname>, <classname>Generator</classname> and
			<classname>VersionProvider</classname>. In the new model, the pluggable modules can have
			these classes too if they need it but all they have to do is implement either the
			<interfacename>EvaluatorInterface</interfacename> or
			<interfacename>GeneratorInterface</interfacename>.</para>

			<para>Generator pluggable modules are then used to produce tasks that generate the
			benchmark data. Evaluator pluggable modules are used to handle data evaluation by using
			the new Results Repository trigger mechanism.</para>

			<para>The pluggable modules are configured one by one and a benchmark is set up
			by chosing a combination of generator and zero or more evaluators. Configuration screens
			for the web interface are no longer provided directly by the package's
			<classname>Configurator</classname> class but it is described in a XML file. The Benchmark
			Manager parses the file and the web interface creates the appropriate screen.</para>

			<para>Benchmark Manager no longer stores data about analyses in the Results Repository.
			The Results Repository is intended for storing results, therefore the Benchmark Manager
			uses it's own private database to store the analyses meta data.</para>

			<para>We used Hibernate technology for storing the analysis metadata. The configuration
			XML file is parsed by JAXB parser. Pluggable modules are used to create new benchmarks
			instead of plugins.</para>

			<para>More information about the Benchmark Manager can be found in
			Development Documentation, <xref linkend="been.devel.bmng"/> and User Documentation,
			<xref linkend="been.user.benchmark"/>.</para>
		</sect2>
		
		<sect2>
			<title>Results Repository</title>
			
			<para>The original Results Repository was bound to the fixed structure of benchmarks.
			It did not use a database solution and implemented this functionality internally instead.
			Details about the original Results Repository can be found in
			<biblioref linkend="BUD0" units="pages" begin="36" end="39"/>.</para>
			
			<para>The WillBeen team decided to design a new Results Repository based around the Derby
			database engine. This provided nearly all the data integrity and transactional features
			that were missing in the original implementation. It also dramatically improved reliability
			and flexibility of the whole component.</para>
			
			<para>
			Compared to legacy version which was part of original BEEN,
			the new <glossterm>Results Repository</glossterm> is more general in use (we got rid of static
			run-binary-experiment hierarchy), and its responsibilities have been restricted. 
			The new <glossterm>Results Repository</glossterm> is now only responsible 
			for persistently storing data, recalling it and triggering tasks
			called evaluators when new data is stored. As a result,
			the new infrastructure of <glossterm>Results Repository</glossterm> together with 
			evaluator tasks preserves the same capabilities, but its 
			model is much easier to understand for developers 
			who want to implement their own benchmarks. Also, the part 
			that will need to be changed most likely, i.e. the evaluators,
			is now much easier to create.
			</para>
			
			<para>Detailed description of how Results Repository works and how to use it
			can be found in Development Documentation, <xref linkend="been.devel.rrng"/>
			and User Documentation, <xref linkend="been.user.benchmark.results"/>.</para>	
	
		</sect2>
		
		<sect2>
			<title>The Xampler Benchmark</title>
			
			<para>
			As a proof that Benchmark Manager, Results Repository and also 
			all the other BEEN components work as they should, we reimplemented
			support for Xampler benchmark from original version of BEEN. 
			</para>
			<para>
			Xampler is a benchmark for CORBA implementations. Currently, only
			omniORB is supported by BEEN. Our support for Xampler
			consists of three parts: Xampler generator (that plans execution
			of Xampler benchmark), Xampler evaluator (that evaluates 
			data generated by benchmark) and third pary external presentation 
			layer called Regression Benchmarking Web (that presents the 
			statistically evaluated data of benchmark). Our support 
			for Xampler includes features like intelligent benchmark planning
			and calling R for statistical evaluation of data 
			and can be considered a full-featured benchmark that shows 
			that BEEN framework performs well in real-life environment. 
			</para>
		</sect2>
	</sect1>
	
	<sect1>
		<title>Modified Components</title>
		
		<sect2>
			<title>Task Manager</title>
			
			<para>The Task Manager had numerous bugs, many of which blocked further development
			and debugging of the new benchmarking components. These issues had to be fixed.</para>
			
			<para>The host selection algorithm was completely rewritten. A mechanism for load limitation was
			added. This is described in User Documentation, <xref linkend="been.user.install.config.limitation"/>
			and in Development Documentation, <xref linkend="been.devel.tm.limitation"/></para>
			
			<para>Code related to resource cleanup required a thorough revision. 
			Namely, the implementation of how Task Manager deletes old contexts
			seemed unfinished and wasn't working at all. This resulted in BEEN 
			Host Runtime and Task Manager running out of memory or disk space if 
			it was running for a longer time. This issue was fixed and BEEN
			can now host long-running benchmarks that produce many tasks without any problems.</para>
			
			<para>The interface and data structures were extended to include support for the new
			Task Tree component, described in User Documentation,
			<xref linkend="been.user.execution.tasks.tree"/> and in Development Documentation,
			<xref linkend="been.devel.tasktree"/></para>
		</sect2>
		
		<sect2>
			<title>Host Runtime</title>
			<para>
			In order to support scripting, launchers for script tasks have been added to Host Runtime.
			Also, some changes were needed in order to support BEEN debug mode and Debug Assistant.
			</para>
			<para>
			Another important issue we addressed was that Host Runtime from original BEEN was
			unable to do task data cleanup and memory cleanup correctly when tasks finished.
			This meant that after a lot of tasks were run by BEEN, it crashed. We fixed
			the buggy code and added some new one so that BEEN cleans up disk data and
			memory taken by tasks after contexts are closed.
			</para>
		</sect2>
		
		<sect2>
			<title>Software Repository</title>
			
			<para>The new <glossterm baseform="pluggable module">pluggable modules</glossterm> and
			other extensions required better package handling. The Software Repository was extended
			to support these needs. Namely, package type <code>module</code> was added and some package
			configuration files' schemata were extended.  
			Details on new type of package and changes to package configuration can
			be found in Development Documentation,  
			<xref linkend="been.devel.pluggable"/> and
			<xref linkend="been.devel.scripting"/>.  </para>
		</sect2>
	</sect1>
</chapter>
