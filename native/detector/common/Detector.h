/*
 *  BEEN: Benchmarking Environment
 *  ==============================
 *
 *  File author: Branislav Repcek
 *
 *  GNU Lesser General Public License Version 2.1
 *  ---------------------------------------------
 *  Copyright (C) 2004-2006 Distributed Systems Research Group,
 *  Faculty of Mathematics and Physics, Charles University in Prague
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public
 *  License version 2.1, as published by the Free Software Foundation.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public
 *  License along with this library; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place, Suite 330, Boston,
 *  MA  02111-1307  USA
 */

/*! \file Detector.h
 *  \author Branislav Repcek
 *  \date 2. 2. 2006
 *
 *  \brief Header for Detector class.
 */

#ifndef DETECTOR_INCLUDED
#define DETECTOR_INCLUDED

#include "MessageReporter.h"
#include "XMLFileOutput.h"
#include "UnicodeString.h"

/*! \brief Contains all detector's classes.
 */
namespace hwdet
{
    /*! \brief Base class for all detectors. Each detector for specific OS is derived from this class.
     */
    class Detector : public MessageReporter
    {
    public:

        /*! Constructor.
         *
         *  \param name Name of the MessageReporter which will be used to report log messages generated by this class.
         *  \param enc Encoding for output file. If NULL, no encoding information is written to the output.
         */
        Detector(const String &name, const Char *enc = NULL) : 
        MessageReporter(name),  
        output(enc), 
        root_node(NULL) 
        {
        };

        //! Initialize detector.
        virtual bool Initialize(void) = 0;

        //! Detect all features.
        virtual bool Detect(void) = 0;

        //! Clear all used memory.
        virtual bool Destroy(void) = 0;

        //! Get string containing output file.
        virtual String GetOutputString(void) const = 0;

        //! Write generated output to the stream.
        virtual bool WriteToStream(OStream &stream) const = 0;
		
        //! Get character encoding of the output file/string.
        virtual String GetOutputEncoding(void)
        {
            return output.GetEncoding();
        }
    
    protected:

        //! Output XML file.
        XMLOutputFile   output;

        //! Root node of the XML file.
        XMLElement      *root_node;

    };
}

#endif
