/*
 *  BEEN: Benchmarking Environment
 *  ==============================
 *
 *  File author: Branislav Repcek
 *
 *  GNU Lesser General Public License Version 2.1
 *  ---------------------------------------------
 *  Copyright (C) 2004-2006 Distributed Systems Research Group,
 *  Faculty of Mathematics and Physics, Charles University in Prague
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public
 *  License version 2.1, as published by the Free Software Foundation.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public
 *  License along with this library; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place, Suite 330, Boston,
 *  MA  02111-1307  USA
 */

/*! \file MessageReporter.h
 *  \author Branislav Repcek
 *  \date 5. 12. 2005
 *
 *  \brief Header for MessageReporter class.
 */

#ifndef MESSAGE_REPORTER_INCLUDED
#define MESSAGE_REPORTER_INCLUDED

#include <vector>
#include "UnicodeString.h"

namespace hwdet
{
    /*! \brief Class which provides simple way to report messages.
     *
     *  This class provides basic logging capabilities for the detector libraries. All messages are stored in the internal
     *  buffer and can be later retrieved.
     */
    class MessageReporter
    {
    public:
        /*! \brief Constructor.
         *
         *  \param rep_name Name of current MessageReporter. This is provided only for convenience.
         *  \param parent_reporter Pointer to the message reporter to which messages generated by this
         *         reporter will be dispatched. If this is NULL, messages are written directly to the
         *         standard output.
         */
        MessageReporter(const String &rep_name, MessageReporter *parent_reporter = NULL) :
        parent(parent_reporter),
        name(rep_name)
        {
        }

        /*! \brief Virtual destructor.
         */
        virtual ~MessageReporter(void)
        {
        }

        /*! \brief Get last reported message.
         *
         *  \return Last message reported using reportMessage function. Returns empty string if no messages are in the buffer.
         */
        String GetLastMessage(void) const
        {
            if (!messages.empty())
            {
                return messages.back();
            }
            else
            {
                return String();
            }
        }

        /*! \brief Get name of MessageReporter.
         *
         *  \return String with name of MessageReporter.
         */
        String GetName(void) const
        {
            return name;
        }

        /*! \brief Get message with given index.
         *
         *  \param index Index of message in message buffer. Index starts at 0, last message has index getMessageQueueLength() - 1.
         *  \return Message at given position in message buffer. Newer messages are at the end of the buffer.
         */
        String GetMessage(size_t index) const
        {
            if (index < messages.size())
            {
                return messages[index];
            }
            else
            {
                return String();
            }
        }

        /*! \brief Get length of message queue.
         *
         *  \return Length of the message queue.
         */
        size_t GetMessageQueueLength(void) const
        {
            return messages.size();
        }

        /*! \brief Write all messages to output stream.
         *
         *  \param stream Stream into which all messages will be written. Messages are separated by newlines.
         */
        void WriteMessagesToStream(OStream &stream)
        {
            std::vector< String >::const_iterator end = messages.end();
            for (std::vector< String >::const_iterator it = messages.begin(); it != end; ++it)
            {
                stream << *it << std::endl;
            }
        }

    protected:
        /*! \brief Add new message to the queue.
         *
         *  This function will add given message to themessage queue. This function is not 
         *  meant to be used from outside of the class, so any class which needs to report 
         *  messages has to be derived from MessageReporter.
         *
         *  \param new_msg Text of the new message.
         */
        void ReportMessage(const String &new_msg)
        {
            messages.push_back(name + TXT(": ") + new_msg);
            
            if (parent)
            {
                parent->ChildReportMessage(*messages.rbegin());
            }
            else
            {
                Cout << *messages.rbegin() << std::endl;
            }
        }
        
    private:
        //! Parent reporter.
        MessageReporter       *parent;
                
        //! Name of the reporter.
        String                name;

        //! Message queue.
        std::vector< String > messages;
        
        /*! Report message from child reporter to the parent.
         * 
         *  \param message Text of the message. Name of current reporter will be
         *         prepended automatically.
         */
        void ChildReportMessage(const String &message)
        {
            messages.push_back(name + TXT("::") + message);
            
            if (parent)
            {
                parent->ChildReportMessage(*messages.rbegin());
            }
            else
            {
                Cout << *messages.rbegin() << std::endl;
            }
        }
    }; // MessageReporter

} // namespace hwdet
    
#endif
