/*
 *  BEEN: Benchmarking Environment
 *  ==============================
 *
 *  File author: Branislav Repcek
 *
 *  GNU Lesser General Public License Version 2.1
 *  ---------------------------------------------
 *  Copyright (C) 2004-2006 Distributed Systems Research Group,
 *  Faculty of Mathematics and Physics, Charles University in Prague
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public
 *  License version 2.1, as published by the Free Software Foundation.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public
 *  License along with this library; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place, Suite 330, Boston,
 *  MA  02111-1307  USA
 */

/*! \file RPMPackager.cpp
 *  \author Branislav Repcek
 *  \date 15. 12. 2006
 *
 *  \brief Implementation of the RPM handler.
 */

#include <iostream>
#include <stdio.h>
#include <stdlib.h>
#include "../common/UnicodeString.h"
#include "../common/MessageReporter.h"
#include "../common/Product.h"
#include "RPMPackager.h"
#include "ForkAndPipe.h"
#include "SystemHelper.h"

using namespace std;

namespace hwdet
{
    /*! \param parent_reporter Message reporter which will receive all messages generated
     *         by this class.
     */
    RPMPackager::RPMPackager(MessageReporter *parent_reporter) :
    Packager(TXT("RPMPackager"), parent_reporter),
    is_supported(false)
    {
        is_supported = FileTestPermissions("/bin/rpm", PERMISSIONS_EXECUTE);
    }
        
    RPMPackager::~RPMPackager(void)
    {
    }

    /*! Test if RPM is supported. RPM is supported if /bin/rpm file exists and current
     *  user has permissions to execute that file.
     * 
     *  \return true if RPM is supported, false otherwise.
     */
    bool RPMPackager::IsSupported(void)
    {
        return is_supported;
    }
    
    /*! This will exec RPM and parse all data generated by the command.
     * 
     *  \param products XML node which will receive parsed data.
     * 
     *  \return true on success, false otherwise.
     */
    bool RPMPackager::DetectSoftware(XMLElement *products)
    {
        if (!is_supported || !products)
        {
            return false;
        }
        
        ReportMessage(TXT("Detecting installed software."));
        
        RPMExec rpm_exec(this, products);
        
        return rpm_exec.Run();
    }
    
    RPMPackager::RPMExec::RPMExec(MessageReporter *parent_reporter, XMLElement *output) :
    ForkAndPipe(TXT("RPMExec"), parent_reporter),
    output_node(output)
    {
    }
    
    RPMPackager::RPMExec::~RPMExec(void)
    {
    }
    
    /*! Reads all data generated by the child process.
     * 
     *  \param child_pid PID of the child process.
     *  \param file File created from the output decriptor of the pipe.
     */
    void RPMPackager::RPMExec::ParentProcess(pid_t child_pid, FILE *file)
    {
        char *buffer = (char *) malloc(1024);
        size_t size = 1024;
        
        String data[3];
        size_t count = 0;
        
        while (getline(&buffer, &size, file) != -1)
        {
            data[count % 3] = String(buffer);

            if ((count > 0) && ((count + 1) % 3 == 0))
            {
                output_node->AddSubNode(new Product(data[0], data[1], data[2]));
            }
            
            count += 1;
        }
        
        free(buffer);
    }
    
    /*! This will execute RPM with command-line options set so that only list of all
     *  installed packages is produced.
     */
    void RPMPackager::RPMExec::ChildProcess(void)
    {
        /*  Output format:
         *  For each package three lines will be output:
         *    package name
         *    package version
         *    package vendor
         */
        
        if (execl("/bin/rpm", "/bin/rpm", "-q", "-a", "--qf", "%{name}\n%{vendor}\n%{version}\n", (char *) NULL) == -1)
        {
            int err_id = GetLastErrorID();
            
            cerr << "Unable to exec rpm: " << GetErrorName(err_id) << endl;
            exit(-1);
        }
    }
}
