class RCallbacksManager
!!!557826.java!!!	RCallbacksManager(inout aid : AID, inout eid : EID, inout analysisScript : boolean)
	    
	    	this.analysisScript = analysisScript;
	    	
	    	if (analysisScript) {
	    	    Database.getInstance().getAnalysisEntityManager().ensureValidAid(aid);
	    	    this.aid = aid;
	    	} else {
	    	    Database.getInstance().getExperimentEntityManager().ensureValidEid(aid, eid);
	    	    this.aid = aid;
	    	    this.eid = eid;
	    	}		

		registeredRunCallbacks = new ArrayList<String>();
		registeredBinaryCallbacks = new ArrayList<String>();
		registeredNoncompleteBinaryCallbacks = new ArrayList<String>();
		registeredExperimentCallbacks = new ArrayList<String>();
		registeredNoncompleteExperimentCallbacks = new ArrayList<String>();
		
		try {
		    load();
		} catch (IOException e) {
		    clearRegisteredRunCallbacks();
		    clearRegisteredBinaryCallbacks(false);
		    clearRegisteredExperimentCallbacks(false);
		    clearRegisteredBinaryCallbacks(true);
		    clearRegisteredExperimentCallbacks(true);
		}
		
!!!557954.java!!!	getAID() : AID
		return aid;
!!!558082.java!!!	getEID() : EID
		return eid;
!!!558210.java!!!	isAnalysis() : boolean
	    return analysisScript;
	    
!!!558338.java!!!	clearRegisteredRunCallbacks() : void
		registeredRunCallbacks.clear();
!!!558466.java!!!	registerRunCallback(in runCallback : String) : void
		
		
		registeredRunCallbacks.add(runCallback);		
!!!558594.java!!!	getRegisteredRunCallbackCount() : int
		return registeredRunCallbacks.size();
!!!558722.java!!!	getRegisteredRunFunction(in functionNumber : int) : String
		return registeredRunCallbacks.get(functionNumber);
!!!558850.java!!!	clearRegisteredBinaryCallbacks(inout completeness : boolean) : void
		if (completeness) {
			registeredBinaryCallbacks.clear();
		} else {
			registeredNoncompleteBinaryCallbacks.clear();
		}
!!!558978.java!!!	registerBinaryCallback(in binaryCallback : String, inout completeness : boolean) : void
		if (completeness) {
			registeredBinaryCallbacks.add(binaryCallback);
		} else {
			registeredNoncompleteBinaryCallbacks.add(binaryCallback);
		}
!!!559106.java!!!	getRegisteredBinaryCallbackCount(inout completeness : boolean) : int
		if (completeness) {
			return registeredBinaryCallbacks.size();
		} else {
			return registeredNoncompleteBinaryCallbacks.size();
		}
!!!559234.java!!!	getRegisteredBinaryFunction(in functionNumber : int, inout completeness : boolean) : String
		if (completeness) {
			return registeredBinaryCallbacks.get(functionNumber);
		} else {
			return registeredNoncompleteBinaryCallbacks.get(functionNumber);
		}
!!!559362.java!!!	clearRegisteredExperimentCallbacks(inout completeness : boolean) : void
		if (completeness) { 
			registeredExperimentCallbacks.clear();
		} else {
			registeredNoncompleteExperimentCallbacks.clear();
		}
!!!559490.java!!!	registerExperimentCallback(in experimentCallback : String, inout completeness : boolean) : void
		if (completeness) {
			registeredExperimentCallbacks.add(experimentCallback);
		} else {
			registeredNoncompleteExperimentCallbacks.add(experimentCallback);
		}
!!!559618.java!!!	getRegisteredExperimentCallbackCount(inout completeness : boolean) : int
		if (completeness) {
			return registeredExperimentCallbacks.size();
		} else {
			return registeredNoncompleteExperimentCallbacks.size();
		}
!!!559746.java!!!	getRegisteredExperimentFunction(in functionNumber : int, inout completeness : boolean) : String
		if (completeness) {
			return registeredExperimentCallbacks.get(functionNumber);
		} else {
			return registeredNoncompleteExperimentCallbacks.get(functionNumber);
		}
!!!559874.java!!!	getCallbacks() : CallbackRScripts
	    
	    String runScripts = "";
	    String binaryScripts = "";
	    String experimentScripts = "";
	    String nonCompleteBinaryScripts = "";
	    String nonCompleteExperimentScripts = "";
	    
	    Logger.logTrace("Getting callbacks for " 
	    	+ (analysisScript 
			    ? Database.getAnalysisReferenceString(aid) 
			    : Database.getExperimentReferenceString(aid, eid)));	    
	    
	    for (int i = 0; i < getRegisteredRunCallbackCount(); i++) {
		runScripts += getRegisteredRunFunction(i) + "\n";
	    }
	    for (int i = 0; i < getRegisteredBinaryCallbackCount(true); i++) {
		binaryScripts += getRegisteredBinaryFunction(i, true) + "\n";
	    }
	    for (int i = 0; i < getRegisteredExperimentCallbackCount(true); i++) {
		experimentScripts += getRegisteredExperimentFunction(i, true) + "\n";
	    }
	    for (int i = 0; i < getRegisteredBinaryCallbackCount(false); i++) {
		nonCompleteBinaryScripts += getRegisteredBinaryFunction(i, false) + "\n";
	    }
	    for (int i = 0; i < getRegisteredExperimentCallbackCount(false); i++) {
		nonCompleteExperimentScripts += getRegisteredExperimentFunction(i, false) + "\n";
	    }	    
	    
	    return new CallbackRScripts(runScripts, binaryScripts,
		    experimentScripts, nonCompleteBinaryScripts, nonCompleteExperimentScripts);
!!!560002.java!!!	setCallbacks(inout scripts : CallbackRScripts) : void

	    Logger.logTrace("Setting callbacks for " 
	    	+ (analysisScript 
			    ? Database.getAnalysisReferenceString(aid) 
			    : Database.getExperimentReferenceString(aid, eid)));	    

	    
	    String runScriptString = scripts.getCompleteRunScript();	    
	    String[] runScripts = runScriptString.split("\n");
	    // NOTE: required to create new mutable ArrayList, because Arrays.asList() returns read-only static
	    //       ArrayList. The rest is left up to GC
	    registeredRunCallbacks = new ArrayList<String>(Arrays.asList(runScripts));

	    String binaryScriptString = scripts.getCompleteBinaryScript();	    
	    String[] binaryScripts = binaryScriptString.split("\n");
	    registeredBinaryCallbacks = new ArrayList<String>(Arrays.asList(binaryScripts));

	    String experimentScriptString = scripts.getCompleteExperimentScript();	    
	    String[] experimentScripts = experimentScriptString.split("\n");
	    registeredExperimentCallbacks = new ArrayList<String>(Arrays.asList(experimentScripts));
	    
	    String binaryNCScriptString = scripts.getIncompleteBinaryScript();	    
	    String[] binaryNCScripts = binaryNCScriptString.split("\n");
	    registeredNoncompleteBinaryCallbacks = new ArrayList<String>(Arrays.asList(binaryNCScripts));

	    String experimentNCScriptString = scripts.getIncompleteExperimentScript();	    
	    String[] experimentNCScripts = experimentNCScriptString.split("\n");
	    registeredNoncompleteExperimentCallbacks = new ArrayList<String>(Arrays.asList(experimentNCScripts));
	    
	    store();
!!!560130.java!!!	loadFileIntoArray(inout scriptsFile : File, inout registeredCallbacks : ArrayList<String>) : void

		try {
			BufferedReader inf = new BufferedReader(new FileReader(scriptsFile));
			String str;
			while ((str = inf.readLine()) != null) {
				registeredCallbacks.add(str);
			}
			inf.close();
	    } catch (FileNotFoundException e) {
	    	// This is OK - equals void table
	    } catch (IOException e) {
	    	Logger.logError("Error reading analysis R scripts settings : " 
				+ e.getMessage() + ".");
	    }
!!!560258.java!!!	storeArrayIntoFile(inout registeredCallbacks : ArrayList<String>, in scriptsFile : String) : void
	    try {
	    	BufferedWriter outf = new BufferedWriter(new FileWriter(scriptsFile));
	    	for (String registeredCallback : registeredCallbacks) {
	            outf.write(registeredCallback);
	            outf.newLine();
            }
	    	outf.close();
		
	    } catch (IOException e) {
	    	Logger.logError("Error writing analysis R scripts settings : " 
	    		+ e.getMessage() + ".");
	    }
!!!560386.java!!!	load() : void

	    String scriptsDirStr = 
		(analysisScript 
			? Database.getInstance().getRScriptsDirectory(aid) 
			: Database.getInstance().getRScriptsDirectory(aid, eid));
		
	    File scriptsDir = new File(scriptsDirStr);
	    
	    if (!(scriptsDir.exists() && scriptsDir.canRead() && scriptsDir.isDirectory())) {
		throw new IOException("Error accessing R Scrips directory for " 
			+ (analysisScript ? Database.getAnalysisReferenceString(aid) + "."
				: Database.getExperimentReferenceString(aid, eid)) + ".");
	    }	    
	    
	    File runScriptsFile = new File(scriptsDirStr 
		    + File.separator + RUN_SCRIPTS_FILE);
	    clearRegisteredRunCallbacks();
	    loadFileIntoArray(runScriptsFile, registeredRunCallbacks);	    
	    File binaryScriptsFile = new File(scriptsDirStr
		    + File.separator + BINARY_SCRIPTS_FILE);
	    clearRegisteredBinaryCallbacks(true);
	    loadFileIntoArray(binaryScriptsFile, registeredBinaryCallbacks);
	    File experimentScriptsFile = new File(scriptsDirStr 
		    + File.separator + EXPERIMENT_SCRIPTS_FILE);
	    clearRegisteredExperimentCallbacks(true);
	    loadFileIntoArray(experimentScriptsFile, registeredExperimentCallbacks);
	    File binaryNonCompleteScriptsFile = new File(scriptsDirStr
		    + File.separator + BINARY_NONCOMPLETE_SCRIPTS_FILE);
	    clearRegisteredBinaryCallbacks(false);
	    loadFileIntoArray(binaryNonCompleteScriptsFile, registeredNoncompleteBinaryCallbacks);
	    File experimentNonCompleteScriptsFile = new File(scriptsDirStr 
		    + File.separator + EXPERIMENT_NONCOMPLETE_SCRIPTS_FILE);
	    clearRegisteredExperimentCallbacks(false);
	    loadFileIntoArray(experimentNonCompleteScriptsFile, registeredNoncompleteExperimentCallbacks);
!!!560514.java!!!	store() : void
	    String scriptsDirStr = 
		(analysisScript 
			? Database.getInstance().getRScriptsDirectory(aid) 
			: Database.getInstance().getRScriptsDirectory(aid, eid));
		
	    File scriptsDir = new File(scriptsDirStr);	    
	    
	    if (!(scriptsDir.exists() && scriptsDir.canRead() && scriptsDir.isDirectory())) {
		throw new IOException("Error accessing R Scrips directory for " 
			+ Database.getAnalysisReferenceString(aid) + ".");
	    }
	    storeArrayIntoFile(registeredRunCallbacks, 
		    scriptsDirStr + File.separator + RUN_SCRIPTS_FILE);
	    storeArrayIntoFile(registeredBinaryCallbacks, 
		    scriptsDirStr  + File.separator + BINARY_SCRIPTS_FILE);
	    storeArrayIntoFile(registeredExperimentCallbacks, 
		    scriptsDirStr  + File.separator + EXPERIMENT_SCRIPTS_FILE);
	    storeArrayIntoFile(registeredNoncompleteBinaryCallbacks, 
		    scriptsDirStr  + File.separator + BINARY_NONCOMPLETE_SCRIPTS_FILE);
	    storeArrayIntoFile(registeredNoncompleteExperimentCallbacks, 
		    scriptsDirStr  + File.separator + EXPERIMENT_NONCOMPLETE_SCRIPTS_FILE);
	    
