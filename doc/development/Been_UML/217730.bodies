class SimpleConditionTest
!!!832514.java!!!	testSimpleCondition1() : void
		assertEquals(
			new EqualsCondition<LongWithUnit>("a", new LongWithUnit(5, 'k', "Hz")),
			ParserWrapper.parseString("a==5kHz")
		);
!!!832642.java!!!	testSimpleCondition2() : void
		assertEquals(
			new EqualsCondition<LongWithUnit>("a", new LongWithUnit(5, 'k', "Hz")),
			ParserWrapper.parseString("a == 5kHz")
		);
!!!832770.java!!!	testSimpleCondition3() : void
		assertEquals(
			new EqualsCondition<LongWithUnit>("a", new LongWithUnit(5, 'k', "Hz")),
			ParserWrapper.parseString("a   ==   5kHz")
		);
!!!832898.java!!!	testSimpleCondition4() : void
		assertEquals(
			new EqualsCondition<LongWithUnit>("a.b.c", new LongWithUnit(5, 'k', "Hz")),
			ParserWrapper.parseString("a.b.c == 5kHz")
		);
!!!833026.java!!!	testSimpleCondition5() : void
		assertEquals(
			new EqualsCondition<LongWithUnit>(
				"aaa.aaa.aaa",
				new LongWithUnit(5, 'k', "Hz")
			),
			ParserWrapper.parseString("aaa.aaa.aaa == 5kHz")
		);
!!!833154.java!!!	testSimpleCondition6() : void
		assertEquals(
			new EqualsCondition<LongWithUnit>(
				"a_01A.b_01B",
				new LongWithUnit(5, 'k', "Hz")
			),
			ParserWrapper.parseString("a_01A.b_01B == 5kHz")
		);
!!!833282.java!!!	testLongWithUnitParse() : void
		assertEquals(
			new EqualsCondition<LongWithUnit>(
				"a",
				new LongWithUnit(55555, 'k', "Hz")
			),
			ParserWrapper.parseString("a == 55555kHz")
		);
!!!833410.java!!!	testLongWithUnitParseB() : void
		assertEquals(
			new EqualsCondition<LongWithUnit>(
				"a",
				new LongWithUnit(42, LongWithUnit.NO_UNIT_PREFIX, "B")
			),
			ParserWrapper.parseString("a == 42B")
		);
!!!833538.java!!!	testLongWithUnitParsek() : void
		assertEquals(
			new EqualsCondition<LongWithUnit>(
				"a",
				new LongWithUnit(42L, 'k', null)
			),
			ParserWrapper.parseString("a == 42k")
		);
!!!833666.java!!!	testLongWithUnitParsekB() : void
		assertEquals(
			new EqualsCondition<LongWithUnit>(
				"a",
				new LongWithUnit(42L, 'k', "B")
			),
			ParserWrapper.parseString("a == 42kB")
		);
!!!833794.java!!!	testLongWithUnitParseM() : void
		assertEquals(
			new EqualsCondition<LongWithUnit>(
				"a",
				new LongWithUnit(42L, 'M', null)
			),
			ParserWrapper.parseString("a == 42M")
		);
!!!833922.java!!!	testLongWithUnitParseMB() : void
		assertEquals(
			new EqualsCondition<LongWithUnit>(
				"a",
				new LongWithUnit(42L, 'M', "B")
			),
			ParserWrapper.parseString("a == 42MB")
		);
!!!834050.java!!!	testLongWithUnitParseG() : void
		assertEquals(
			new EqualsCondition<LongWithUnit>(
				"a",
				new LongWithUnit(42L, 'G', null)
			),
			ParserWrapper.parseString("a == 42G")
		);
!!!834178.java!!!	testLongWithUnitParseGB() : void
		assertEquals(
			new EqualsCondition<LongWithUnit>(
				"a",
				new LongWithUnit(42L, 'G', "B")
			),
			ParserWrapper.parseString("a == 42GB")
		);
!!!834306.java!!!	testLongWithUnitParseT() : void
		assertEquals(
			new EqualsCondition<LongWithUnit>(
				"a",
				new LongWithUnit(42L, 'T', null)
			),
			ParserWrapper.parseString("a == 42T")
		);
!!!834434.java!!!	testLongWithUnitParseTB() : void
		assertEquals(
			new EqualsCondition<LongWithUnit>(
				"a",
				new LongWithUnit(42L, 'T', "B")
			),
			ParserWrapper.parseString("a == 42TB")
		);
!!!834562.java!!!	testLongWithUnitParseP() : void
		assertEquals(
			new EqualsCondition<LongWithUnit>(
				"a",
				new LongWithUnit(42L, 'P', null)
			),
			ParserWrapper.parseString("a == 42P")
		);
!!!834690.java!!!	testLongWithUnitParsePB() : void
		assertEquals(
			new EqualsCondition<LongWithUnit>(
				"a",
				new LongWithUnit(42L, 'P', "B")
			),
			ParserWrapper.parseString("a == 42PB")
		);
!!!834818.java!!!	testVersionParse() : void
		assertEquals(
			new EqualsCondition<Version>("a", new Version("42")),
			ParserWrapper.parseString("a == 42.0")
		);
!!!834946.java!!!	testStringParse() : void
		assertEquals(
			new EqualsCondition<String>("a", "String\"s"),
			ParserWrapper.parseString("a == \"String\\\"s\"")
		);
!!!835074.java!!!	testDateParseyyyyMM() : void
		Calendar calendar = Calendar.getInstance();
		calendar.set(2006, 4, 0, 0, 0, 0);
		calendar.setTimeInMillis((calendar.getTimeInMillis() / 1000) * 1000);
		assertEquals(
			new EqualsCondition<Date>("a", calendar.getTime()),
			ParserWrapper.parseString("a == 2006-05")
		);
!!!835202.java!!!	testDateParseyyyyMMdd() : void
		Calendar calendar = Calendar.getInstance();
		calendar.set(2006, 4, 17, 0, 0, 0);
		calendar.setTimeInMillis((calendar.getTimeInMillis() / 1000) * 1000);
		assertEquals(
			new EqualsCondition<Date>("a", calendar.getTime()),
			ParserWrapper.parseString("a == 2006-05-17")
		);
!!!835330.java!!!	testDateParseyyyyMMddTHHmmZ() : void
		Calendar calendar = Calendar.getInstance();
		calendar.setTimeZone(TimeZone.getTimeZone("GMT"));
		calendar.set(2006, 4, 17, 23, 30, 0);
		calendar.setTimeInMillis((calendar.getTimeInMillis() / 1000) * 1000);
		assertEquals(
			new EqualsCondition<Date>("a", calendar.getTime()),
			ParserWrapper.parseString("a == 2006-05-17T23:30Z")
		);
!!!835458.java!!!	testDateParseyyyyMMddTHHmmssZ() : void
		Calendar calendar = Calendar.getInstance();
		calendar.setTimeZone(TimeZone.getTimeZone("GMT"));
		calendar.set(2006, 4, 17, 23, 30, 42);
		calendar.setTimeInMillis((calendar.getTimeInMillis() / 1000) * 1000);
		assertEquals(
			new EqualsCondition<Date>("a", calendar.getTime()),
			ParserWrapper.parseString("a == 2006-05-17T23:30:42Z")
		);
!!!835586.java!!!	testDateParseyyyyMMddTHHmmssSZ() : void
		Calendar calendar = Calendar.getInstance();
		calendar.setTimeZone(TimeZone.getTimeZone("GMT"));
		calendar.set(2006, 4, 17, 23, 30, 42);
		calendar.setTimeInMillis((calendar.getTimeInMillis() / 1000) * 1000 + 100);
		assertEquals(
			new EqualsCondition<Date>("a", calendar.getTime()),
			ParserWrapper.parseString("a == 2006-05-17T23:30:42.1Z")
		);
!!!835714.java!!!	testDateParseyyyyMMddTHHmmPlus300() : void
		Calendar calendar = Calendar.getInstance();
		calendar.setTimeZone(TimeZone.getTimeZone("GMT+3:00"));
		calendar.set(2006, 4, 17, 23, 30, 0);
		calendar.setTimeInMillis((calendar.getTimeInMillis() / 1000) * 1000);
		assertEquals(
			new EqualsCondition<Date>("a", calendar.getTime()),
			ParserWrapper.parseString("a == 2006-05-17T23:30+03:00")
		);
!!!835842.java!!!	testDateParseyyyyMMddTHHmmssPlus300() : void
		Calendar calendar = Calendar.getInstance();
		calendar.setTimeZone(TimeZone.getTimeZone("GMT+3:00"));
		calendar.set(2006, 4, 17, 23, 30, 42);
		calendar.setTimeInMillis((calendar.getTimeInMillis() / 1000) * 1000);
		assertEquals(
			new EqualsCondition<Date>("a", calendar.getTime()),
			ParserWrapper.parseString("a == 2006-05-17T23:30:42+03:00")
		);
!!!835970.java!!!	testDateParseyyyyMMddTHHmmssSPlus300() : void
		Calendar calendar = Calendar.getInstance();
		calendar.setTimeZone(TimeZone.getTimeZone("GMT+3:00"));
		calendar.set(2006, 4, 17, 23, 30, 42);
		calendar.setTimeInMillis((calendar.getTimeInMillis() / 1000) * 1000 + 100);
		assertEquals(
			new EqualsCondition<Date>("a", calendar.getTime()),
			ParserWrapper.parseString("a == 2006-05-17T23:30:42.1+03:00")
		);
!!!836098.java!!!	testDateParseyyyyMMddTHHmmMinus300() : void
		Calendar calendar = Calendar.getInstance();
		calendar.setTimeZone(TimeZone.getTimeZone("GMT-3:00"));
		calendar.set(2006, 4, 17, 23, 30, 0);
		calendar.setTimeInMillis((calendar.getTimeInMillis() / 1000) * 1000);
		assertEquals(
			new EqualsCondition<Date>("a", calendar.getTime()),
			ParserWrapper.parseString("a == 2006-05-17T23:30-03:00")
		);
!!!836226.java!!!	testDateParseyyyyMMddTHHmmssMinus300() : void
		Calendar calendar = Calendar.getInstance();
		calendar.setTimeZone(TimeZone.getTimeZone("GMT-3:00"));
		calendar.set(2006, 4, 17, 23, 30, 42);
		calendar.setTimeInMillis((calendar.getTimeInMillis() / 1000) * 1000);
		assertEquals(
			new EqualsCondition<Date>("a", calendar.getTime()),
			ParserWrapper.parseString("a == 2006-05-17T23:30:42-03:00")
		);
!!!836354.java!!!	testDateParseyyyyMMddTHHmmssSMinus300() : void
		Calendar calendar = Calendar.getInstance();
		calendar.setTimeZone(TimeZone.getTimeZone("GMT-3:00"));
		calendar.set(2006, 4, 17, 23, 30, 42);
		calendar.setTimeInMillis((calendar.getTimeInMillis() / 1000) * 1000 + 100);
		assertEquals(
			new EqualsCondition<Date>("a", calendar.getTime()),
			ParserWrapper.parseString("a == 2006-05-17T23:30:42.1-03:00")
		);
!!!836482.java!!!	testPatternParse1() : void
		/* Pattern class doesn't override equals method, so we have to compare
		 * manually.
		 */
		Condition expected = new EqualsCondition<Pattern>("a",
			Pattern.compile("pattern/pattern"));
		Condition actual = ParserWrapper.parseString("a == /pattern\\/pattern/");
		
		Pattern expectedPattern = (Pattern) ((SimpleCondition) expected).value;
		Pattern actualPattern = (Pattern) ((SimpleCondition) actual).value;
		
		assertTrue(
			expectedPattern.pattern().equals(actualPattern.pattern())
			&& expectedPattern.flags() == actualPattern.flags()
		);
!!!836610.java!!!	testPatternParse2() : void
		/* Pattern class doesn't override equals method, so we have to compare
		 * manually.
		 */
		Condition expected = new EqualsCondition<Pattern>("a",
			Pattern.compile("pattern/pattern", Pattern.CASE_INSENSITIVE));
		Condition actual = ParserWrapper.parseString("a == /pattern\\/pattern/i");
		
		Pattern expectedPattern = (Pattern) ((SimpleCondition) expected).value;
		Pattern actualPattern = (Pattern) ((SimpleCondition) actual).value;
		
		assertTrue(
			expectedPattern.pattern().equals(actualPattern.pattern())
			&& expectedPattern.flags() == actualPattern.flags()
		);
!!!836738.java!!!	testInvalidPropertyException() : void
		try {
			Utils.eval("invalidProperty == 42", context);
			fail();
		} catch (InvalidPropertyException e) {
			/* Eat it. */
		}
!!!836866.java!!!	testLongWithUnitLongWithUnit() : void
		Utils.eval("longProperty == 42", context);
!!!836994.java!!!	testLongWithUnitString() : void
		try {
			Utils.eval("longProperty == \"42\"", context);
			fail();
		} catch (InvalidValueTypeException e) {
			/* Eat it. */
		}
!!!837122.java!!!	testLongWithUnitVersion() : void
		try {
			Utils.eval("longProperty == 42.0", context);
			fail();
		} catch (InvalidValueTypeException e) {
			/* Eat it. */
		}
!!!837250.java!!!	testLongWithUnitDate() : void
		try {
			Utils.eval("longProperty == 2006-05-17T23:30:42.1Z", context);
			fail();
		} catch (InvalidValueTypeException e) {
			/* Eat it. */
		}
!!!837378.java!!!	testLongWithUnitPackageType() : void
		try {
			Utils.eval("longProperty == source", context);
			fail();
		} catch (InvalidValueTypeException e) {
			/* Eat it. */
		}
!!!837506.java!!!	testLongWithUnitPattern() : void
		try {
			Utils.eval("longProperty == /pattern/", context);
			fail();
		} catch (InvalidValueTypeException e) {
			/* Eat it. */
		}
!!!837634.java!!!	testStringLongWithUnit() : void
		try {
			Utils.eval("stringProperty == 42", context);
			fail();
		} catch (InvalidValueTypeException e) {
			/* Eat it. */
		}
!!!837762.java!!!	testStringString() : void
		Utils.eval("stringProperty == \"42\"", context);
!!!837890.java!!!	testStringVersion() : void
		try {
			Utils.eval("stringProperty == 42.0", context);
			fail();
		} catch (InvalidValueTypeException e) {
			/* Eat it. */
		}
!!!838018.java!!!	testStringDate() : void
		try {
			Utils.eval("stringProperty == 2006-05-17T23:30:42.1Z", context);
			fail();
		} catch (InvalidValueTypeException e) {
			/* Eat it. */
		}
!!!838146.java!!!	testStringPackageType() : void
		try {
			Utils.eval("stringProperty == source", context);
			fail();
		} catch (InvalidValueTypeException e) {
			/* Eat it. */
		}
!!!838274.java!!!	testStringPattern() : void
		try {
			Utils.eval("stringProperty == /pattern/", context);
			fail();
		} catch (InvalidValueTypeException e) {
			/* Eat it. */
		}
!!!838402.java!!!	testVersionLongWithUnit() : void
		try {
			Utils.eval("versionProperty == 42", context);
			fail();
		} catch (InvalidValueTypeException e) {
			/* Eat it. */
		}
!!!838530.java!!!	testVersionString() : void
		try {
			Utils.eval("versionProperty == \"42\"", context);
			fail();
		} catch (InvalidValueTypeException e) {
			/* Eat it. */
		}
!!!838658.java!!!	testVersionVersion() : void
		Utils.eval("versionProperty == 42.0", context);
!!!838786.java!!!	testVersionDate() : void
		try {
			Utils.eval("versionProperty == 2006-05-17T23:30:42.1Z", context);
			fail();
		} catch (InvalidValueTypeException e) {
			/* Eat it. */
		}
!!!838914.java!!!	testVersionPackageType() : void
		try {
			Utils.eval("versionProperty == source", context);
			fail();
		} catch (InvalidValueTypeException e) {
			/* Eat it. */
		}
!!!839042.java!!!	testVersionPattern() : void
		try {
			Utils.eval("versionProperty == /pattern/", context);
			fail();
		} catch (InvalidValueTypeException e) {
			/* Eat it. */
		}
!!!839170.java!!!	testDateLongWithUnit() : void
		try {
			Utils.eval("dateProperty == 42", context);
			fail();
		} catch (InvalidValueTypeException e) {
			/* Eat it. */
		}
!!!839298.java!!!	testDateString() : void
		try {
			Utils.eval("dateProperty == \"42\"", context);
			fail();
		} catch (InvalidValueTypeException e) {
			/* Eat it. */
		}
!!!839426.java!!!	testDateVersion() : void
		try {
			Utils.eval("dateProperty == 42.0", context);
			fail();
		} catch (InvalidValueTypeException e) {
			/* Eat it. */
		}
!!!839554.java!!!	testDateDate() : void
			Utils.eval("dateProperty == 2006-05-17T23:30:42.1Z", context);
!!!839682.java!!!	testDatePackageType() : void
		try {
			Utils.eval("dateProperty == source", context);
			fail();
		} catch (InvalidValueTypeException e) {
			/* Eat it. */
		}
!!!839810.java!!!	testDatePattern() : void
		try {
			Utils.eval("dateProperty == /pattern/", context);
			fail();
		} catch (InvalidValueTypeException e) {
			/* Eat it. */
		}
!!!839938.java!!!	testPackageTypeLongWithUnit() : void
		try {
			Utils.eval("packageTypeProperty == 42", context);
			fail();
		} catch (InvalidValueTypeException e) {
			/* Eat it. */
		}
!!!840066.java!!!	testPackageTypeString() : void
		try {
			Utils.eval("packageTypeProperty == \"42\"", context);
			fail();
		} catch (InvalidValueTypeException e) {
			/* Eat it. */
		}
!!!840194.java!!!	testPackageTypeVersion() : void
		try {
			Utils.eval("packageTypeProperty == 42.0", context);
			fail();
		} catch (InvalidValueTypeException e) {
			/* Eat it. */
		}
!!!840322.java!!!	testPackageTypeDate() : void
		try {
			Utils.eval("packageTypeProperty == 2006-05-17T23:30:42.1Z", context);
			fail();
		} catch (InvalidValueTypeException e) {
			/* Eat it. */
		}
!!!840450.java!!!	testPackageTypePackageType() : void
		Utils.eval("packageTypeProperty == source", context);
!!!840578.java!!!	testPackageTypePattern() : void
		try {
			Utils.eval("packageTypeProperty == /pattern/", context);
			fail();
		} catch (InvalidValueTypeException e) {
			/* Eat it. */
		}
!!!840706.java!!!	testListLongWithUnit() : void
		try {
			Utils.eval("listProperty == 42", context);
			fail();
		} catch (InvalidOperatorException e) {
			/* Eat it. */
		}
!!!840834.java!!!	testListString() : void
		try {
			Utils.eval("listProperty == \"42\"", context);
			fail();
		} catch (InvalidOperatorException e) {
			/* Eat it. */
		}
!!!840962.java!!!	testListVersion() : void
		try {
			Utils.eval("listProperty == 42.0", context);
			fail();
		} catch (InvalidOperatorException e) {
			/* Eat it. */
		}
!!!841090.java!!!	testListDate() : void
		try {
			Utils.eval("listProperty == 2006-05-17T23:30:42.1Z", context);
			fail();
		} catch (InvalidOperatorException e) {
			/* Eat it. */
		}
!!!841218.java!!!	testListPackageType() : void
		try {
			Utils.eval("listProperty == source", context);
			fail();
		} catch (InvalidOperatorException e) {
			/* Eat it. */
		}
!!!841346.java!!!	testListPattern() : void
		try {
			Utils.eval("listProperty == /pattern/", context);
			fail();
		} catch (InvalidOperatorException e) {
			/* Eat it. */
		}
!!!841474.java!!!	testCheckLongWithUnit1() : void
		Utils.eval("longProperty == 42", context);
!!!841602.java!!!	testCheckLongWithUnit2() : void
		try {
			Utils.eval("longProperty == 42Hz", context);
			fail();
		} catch (InvalidValueUnitException e) {
			/* Eat it. */
		}
!!!841730.java!!!	testCheckLongWithUnit3() : void
		try {
			Utils.eval("longProperty == 42foo", context);
			fail();
		} catch (InvalidValueUnitException e) {
			/* Eat it. */
		}
!!!841858.java!!!	testCheckLongWithUnit4() : void
		Utils.eval("longPropertyMHz == 42", context);
!!!841986.java!!!	testCheckLongWithUnit5() : void
		Utils.eval("longPropertyMHz == 42Hz", context);
!!!842114.java!!!	testCheckLongWithUnit6() : void
		try {
			Utils.eval("longPropertyMHz == 42foo", context);
			fail();
		} catch (InvalidValueUnitException e) {
			/* Eat it. */
		}
!!!842242.java!!!	testToStringLongWithUnit() : void
		assertEquals(
			"a == 42",
			ParserWrapper.parseString("a == 42").toString()
		);
!!!842370.java!!!	testToStringLongWithUnitkB() : void
		assertEquals(
			"a == 42kB",
			ParserWrapper.parseString("a == 42kB").toString()
		);
!!!842498.java!!!	testToStringLongWithUnitMB() : void
		assertEquals(
			"a == 42MB",
			ParserWrapper.parseString("a == 42MB").toString()
		);
!!!842626.java!!!	testToStringLongWithUnitGB() : void
		assertEquals(
			"a == 42GB",
			ParserWrapper.parseString("a == 42GB").toString()
		);
!!!842754.java!!!	testToStringLongWithUnitTB() : void
		assertEquals(
			"a == 42TB",
			ParserWrapper.parseString("a == 42TB").toString()
		);
!!!842882.java!!!	testToStringLongWithUnitPB() : void
		assertEquals(
			"a == 42PB",
			ParserWrapper.parseString("a == 42PB").toString()
		);
!!!843010.java!!!	testToStringLongWithUnitNoSuitableUnit() : void
		assertEquals(
			"a == 123456789",
			ParserWrapper.parseString("a == 123456789").toString()
		);
!!!843138.java!!!	testToStringString1() : void
		assertEquals(
			"a == \"42\"",
			ParserWrapper.parseString("a == \"42\"").toString()
		);
!!!843266.java!!!	testToStringString2() : void
		assertEquals(
			"a == \"4\\\"2\"",
			ParserWrapper.parseString("a == \"4\\\"2\"").toString()
		);
!!!843394.java!!!	testToStringVersion() : void
		assertEquals(
			"a == 42.0",
			ParserWrapper.parseString("a == 42.0").toString()
		);
!!!843522.java!!!	testToStringVersion2() : void
		assertEquals(
			"a == 42.43.441_RC-45",
			ParserWrapper.parseString("a == 42.43.441_RC-45").toString()
		);
!!!843650.java!!!	testToStringDate1() : void
		assertEquals(
			"a == 2006-04-30T00:00:00.0+0200",
			ParserWrapper.parseString("a == 2006-05").toString()
		);
!!!843778.java!!!	testToStringDate2() : void
		assertEquals(
			"a == 2006-05-17T00:00:00.0+0200",
			ParserWrapper.parseString("a == 2006-05-17").toString()
		);
!!!843906.java!!!	testToStringDate3() : void
		assertEquals(
			"a == 2006-05-18T01:30:00.0+0200",
			ParserWrapper.parseString("a == 2006-05-17T23:30Z").toString()
		);
!!!844034.java!!!	testToStringDate4() : void
		assertEquals(
			"a == 2006-05-18T01:30:42.0+0200",
			ParserWrapper.parseString("a == 2006-05-17T23:30:42Z").toString()
		);
!!!844162.java!!!	testToStringDate5() : void
		assertEquals(
			"a == 2006-05-18T01:30:42.100+0200",
			ParserWrapper.parseString("a == 2006-05-17T23:30:42.1Z").toString()
		);
!!!844290.java!!!	testToStringPackageTypeSource() : void
		assertEquals(
			"a == source",
			ParserWrapper.parseString("a == source").toString()
		);
!!!844418.java!!!	testToStringPackageTypeBinary() : void
		assertEquals(
			"a == binary",
			ParserWrapper.parseString("a == binary").toString()
		);
!!!844546.java!!!	testToStringPackageTypeTask() : void
		assertEquals(
			"a == task",
			ParserWrapper.parseString("a == task").toString()
		);
!!!844674.java!!!	testToStringPackageTypeData() : void
		assertEquals(
			"a == data",
			ParserWrapper.parseString("a == data").toString()
		);
!!!844802.java!!!	testToStringPattern() : void
		assertEquals(
			"a == /pattern\\/pattern/",
			ParserWrapper.parseString("a == /pattern\\/pattern/").toString()
		);
