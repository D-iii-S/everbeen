class SVNCheckout
!!!662530.java!!!	SVNCheckout()
		super();
!!!662786.java!!!	checkout() : void
		// initialise the JavaSVN library to work with http:// and https:// 
		DAVRepositoryFactory.setup();
		// initialise the JavaSVN library to work with svn:// and svn+ssh://
		SVNRepositoryFactoryImpl.setup();
		
		SVNClientManager clientManager = SVNClientManager.newInstance();
		SVNUpdateClient client = clientManager.getUpdateClient();
		
		SVNRevision revision = null;
		if (revisionHead) {
			revision = SVNRevision.HEAD;
		}
		if (revisionDate != null) {
			revision = SVNRevision.create(revisionDate);
		}
		if (revisionNumber != -1) {
			revision = SVNRevision.create(revisionNumber);
		}
		
		try {
			client.doCheckout(SVNURL.parseURIDecoded(url), 
				new File(getWorkingDirectory()), 
				revision, 
				revision, 
				true);
		} catch (SVNException e) {
			throw new TaskException("Cannot checkout: " + e.getMessage(), e);
		}
!!!662914.java!!!	parseTaskProperties() : void
		if ((url = getTaskProperty(URL)) == null) {
			throw new TaskException(URL + " task priperty not set");
		}
		logInfo("URL: " + url);
		String date;
		if ((date = getTaskProperty(REVISION_TIME)) != null) {
			revisionDate = new Date(Long.valueOf(date));
			DateFormat formatter = DateFormat.getDateTimeInstance();
			logInfo("Using revision date: " + formatter.format(revisionDate) 
					+ " timestamp: " + date);
		}
		
		String number;
		if ((number = getTaskProperty(REVISION_NUMBER)) != null) {
			if (date != null) {
				throw new TaskException(REVISION_TIME + " and " 
						+ REVISION_NUMBER + " task properties specified at the " +
								"same time");
			}
			
			revisionNumber = Integer.valueOf(number);
			logInfo("Using revision number: " + revisionNumber);
		}
		
		if ((date == null) && (number == null)) {
			revisionHead = true;
			logInfo("Using HEAD revision");
		}
!!!663042.java!!!	run() : void
		parseTaskProperties();
		logInfo("Checking out from SVN");
		checkout();
