class Utils
!!!877314.java!!!	setUpRepository(in beenHome : String) : SoftwareRepositoryImplementation
		File dataDir = File.createTempFile("softwarerepository-data", null);
		if (!dataDir.delete()) {
			throw new IOException("Can't delete file \"" + dataDir.getPath() + "\".");
		}
		if (!dataDir.mkdir()) {
			throw new IOException("Can't create directory \"" + dataDir.getPath() + "\".");
		}
		dataDir.deleteOnExit();

		File tempDir = File.createTempFile("softwarerepository-temp", null);
		if (!tempDir.delete()) {
			throw new IOException("Can't delete file \"" + tempDir.getPath() + "\".");
		}
		if (!tempDir.mkdir()) {
			throw new IOException("Can't create directory \"" + tempDir.getPath() + "\".");
		}
		tempDir.deleteOnExit();

		SoftwareRepositoryImplementation result = SoftwareRepositoryImplementation
				.getInstance();
		result.initialize(dataDir.getAbsolutePath(), tempDir.getAbsolutePath());
		return result;
!!!877442.java!!!	uploadPackage(inout softwareRepository : SoftwareRepositoryImplementation, in packageName : String, in beenHome : String) : UploadResult
		String fileName = beenHome
			+ File.separator + "resources"
			+ File.separator + "tests"
			+ File.separator + "softwarerepository"
			+ File.separator + packageName;		
		UploadStatus status = UploadStatus.ACCEPTED;
		String[] errorMessages = new String[0];
    
		ServerSocket serverSocket = new ServerSocket(0); // 0 = use any port
		UploadHandle handle = softwareRepository.beginPackageUpload(
				InetAddress.getLocalHost(), 
				serverSocket.getLocalPort());
		byte[] buffer = new byte[SoftwareRepositoryInterface.UPLOAD_BUFFER_SIZE];
		int bytesRead;
		Socket socket = serverSocket.accept();
		try {
			OutputStream outputStream = new BufferedOutputStream(
				socket.getOutputStream(),
				SoftwareRepositoryInterface.UPLOAD_BUFFER_SIZE
			);
			InputStream inputStream = new BufferedInputStream(
				new FileInputStream(fileName),
				SoftwareRepositoryInterface.UPLOAD_BUFFER_SIZE
			);
			try {
				while ((bytesRead = inputStream.read(buffer)) != -1) {
					outputStream.write(buffer, 0, bytesRead);
				}
			} finally {
				outputStream.close();
				inputStream.close();
			}
		} finally {
			socket.close();
			serverSocket.close();
	
			/*
			 * Wait until the Software Repository finishes its processing and sets
			 * some meaningful state. Finish the upload then.
			 */
			do {
				status = softwareRepository.getPackageUploadStatus(handle);
			} while (status == UploadStatus.UPLOADING || status == UploadStatus.INITIALIZING);
			if (status == UploadStatus.REJECTED) {
				errorMessages = softwareRepository.getRejectedPackageUploadErrorMessages(handle);
			}
			softwareRepository.endPackageUpload(handle);
		}
		return new UploadResult(status, errorMessages);
