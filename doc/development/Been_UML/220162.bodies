class StatsTest
!!!862466.java!!!	printEvent(inout event : LoadMonitorEvent, inout shortFormat : boolean) : void
		
		if (!shortFormat) {
			System.out.println(Util.alignLeft("[" + (eventCounter++) + "] ", 6) + " " + event.getType().toString());
			System.out.println(Util.fill(7) + "Time: " + MiscUtils.formatDate(event.getTime()));
			System.out.println(Util.fill(7) + "Host: " + event.getHostName());
			if (event.hasSample()) {
				LoadSample sample = event.getSample();
			
				printSample(sample);
			}
			
			if (event.hasHardwareDescription()) {
				HardwareDescription desc = event.getHardwareDescription();
				
				printHwDesc(desc);
			}
		} else {
			System.out.print(Util.alignLeft("[" + (eventCounter++) + "] ", 6) + " ");
			System.out.print(Util.alignLeft(event.getType().toString(), 30));
			System.out.print(Util.alignLeft(MiscUtils.formatDate(event.getTime()), 25));
			System.out.print((event.hasSample() ? "S" : ".") + (event.hasHardwareDescription() ? "D" : "."));
			System.out.print(" {" + event.getTimestamp() + "}");
			System.out.println();
		}
!!!862594.java!!!	printSample(inout sample : LoadSample) : void

		System.out.println(Util.fill(7) + "Sample data:");
		System.out.println(Util.fill(7) + "Timestamp: " + sample.getTimeStamp());
		System.out.println(Util.fill(10) + "CPU usage:   "
				+ Util.join(sample.getProcessorUsage(), "%, ", 0) + "%");
		System.out.println(Util.fill(10) + "Processes: " + sample.getProcessCount());
		System.out.println(Util.fill(10) + "PQL: " + sample.getProcessQueueLength());
		System.out.println(Util.fill(10) + "Free memory: " + sample.getMemoryFree());
		System.out.println(Util.fill(10) + "Drive write: "
				+ Util.join(sample.getDiskWriteBytesPerSecond(), ", ", 8));
		System.out.println(Util.fill(10) + "Drive read:  "
				+ Util.join(sample.getDiskReadBytesPerSecond(), ", ", 8));
		System.out.println(Util.fill(10) + "Network in:  "
				+ Util.join(sample.getNetworkBytesReceivedPerSecond(), ", ", 8));
		System.out.println(Util.fill(10) + "Network out: "
				+ Util.join(sample.getNetworkBytesSentPerSecond(), ", ", 8));
!!!862722.java!!!	printHwDesc(inout desc : HardwareDescription) : void

		System.out.println(Util.fill(7) + "Hardware description:");
		System.out.println(Util.fill(10) + "Processors: " + desc.getCpuCount());
		System.out.println(Util.fill(10) + "Memory size: " + desc.getMemorySize());
		
		if (desc.getDriveCount() > 0) {
			System.out.println(Util.fill(10) + "Drives: " + desc.getDrives()[0]);
			for (int j = 1; j < desc.getDriveCount(); ++j) {
				System.out.println(Util.fill(18) + desc.getDrives()[j]);
			}
		}
		
		if (desc.getAdapterCount() > 0) {
			System.out.println(Util.fill(10) + "Adapters: " + desc.getAdapters()[0]);
			for (int j = 1; j < desc.getAdapterCount(); ++j) {
				System.out.println(Util.fill(20) + desc.getAdapters()[j]);
			}
		}
!!!862850.java!!!	printStats(inout stats : ValueStatistics) : void
		
		System.out.println(Util.fill(3) + "Name: " + stats.getName());
		System.out.println(Util.fill(5) + "Min: " + stats.getMin());
		System.out.println(Util.fill(5) + "Max: " + stats.getMax());
		System.out.println(Util.fill(5) + "Avg: " + stats.getAverage());
		System.out.println(Util.fill(5) + "Count: " + stats.getCount());
		System.out.println(Util.fill(5) + "Lower: " + (stats.getLimitMin() == null ? "-inf" : stats.getLimitMin().toString()));
		System.out.println(Util.fill(5) + "Upper: " + (stats.getLimitMax() == null ? "+inf" : stats.getLimitMax().toString()));
!!!862978.java!!!	main(in args : String) : void
		
		LoadServerInterface loadServer = 
			(LoadServerInterface) Naming.lookup("rmi://localhost/been/hostmanager/load");
		
		HostDataStatisticianInterface data = 
			loadServer.getStatsProvider(MiscUtils.getCanonicalLocalhostName());
		
		List< LoadSample > samples = data.getSamples((Long) null, (Long) null);
		List< LoadMonitorEvent > events = data.getEvents((Long) null, (Long) null);
		
		System.out.println("Samples: " + samples.size());
		System.out.println("Events: " + events.size());

		// Uncomment this to output all events from the file.
//		for (LoadMonitorEvent event: events) {
//			printEvent(event, true);
//		}
		
		Long start = null;
		Long end = null;
		
		System.out.println(Util.fill(50, "*"));
		System.out.println("Memory:");
		printStats(data.getFreeMemoryStats(start, end));
		
		System.out.println(Util.fill(50, "*"));
		System.out.println("Process count:");
		printStats(data.getProcessCountStats(start, end));
		
		System.out.println(Util.fill(50, "*"));
		System.out.println("Processor queue:");
		printStats(data.getProcessQueueLengthStats(start, end));
		
		System.out.println(Util.fill(50, "*"));
		System.out.println("Processors:");
		List< ValueStatistics > cpuStats = data.getProcessorStats(start, end);
		for (ValueStatistics v: cpuStats) {
			printStats(v);
		}
		
		System.out.println(Util.fill(50, "*"));
		System.out.println("Drives:");
		List< Pair< ValueStatistics, ValueStatistics > > driveStats = data.getDriveStats(start, end);
		for (Pair< ValueStatistics, ValueStatistics > p: driveStats) {
			printStats(p.getFirst());
			printStats(p.getSecond());
		}

		System.out.println(Util.fill(50, "*"));
		System.out.println("Network:");
		List< Pair< ValueStatistics, ValueStatistics > > netStats = data.getNetworkStats(start, end);
		for (Pair< ValueStatistics, ValueStatistics > p: netStats) {
			printStats(p.getFirst());
			printStats(p.getSecond());
		}
		
		data.close();
