class LoadMonitorEvent
!!!420738.java!!!	LoadMonitorEvent()
		
		type = EventType.MONITOR_UNKNOWN;
		hostName = "";
		time = new Date();
!!!420866.java!!!	LoadMonitorEvent(inout type : EventType, in hostName : String)
		
		if (hostName == null) {
			throw new InvalidArgumentException("Hostname cannot be set to null.");
		}

		if (type == EventType.MONITOR_SAMPLE) {
			throw new InvalidArgumentException("Unable to create MONITOR_SAMPLE event with empty sample.");
		}
		
		this.type = type;
		this.sample = null;
		this.hostName = hostName;
		this.time = new Date();
!!!420994.java!!!	LoadMonitorEvent(inout sample : LoadSample, in hostName : String)

		if (hostName == null) {
			throw new InvalidArgumentException("Hostname cannot be set to null.");
		}
		
		if (sample == null) {
			throw new InvalidArgumentException("Empty sample is not allowed for MONITOR_SAMPLE events.");
		}
		
		this.sample = sample;
		this.type = EventType.MONITOR_SAMPLE;
		this.hostName = hostName;
		this.time = new Date();
!!!421122.java!!!	LoadMonitorEvent(inout hardware : HardwareDescription, in hostName : String)

		if (hostName == null) {
			throw new InvalidArgumentException("Hostname cannot be set to null.");
		}
		
		if (hardware == null) {
			throw new InvalidArgumentException("Empty hardware description is not allowed for "
					+ "MONITOR_HW_DESCRIPTION events.");
		}
		
		this.hardware = hardware;
		this.type = EventType.MONITOR_HW_DESCRIPTION;
		this.hostName = hostName;
		this.time = new Date();
!!!421250.java!!!	LoadMonitorEvent(inout type : EventType, inout sample : LoadSample, in hostName : String)
		
		if (hostName == null) {
			throw new InvalidArgumentException("Hostname cannot be set to null.");
		}
		
		this.type = type;
		this.sample = sample;
		this.hostName = hostName;
		this.time = new Date();
		
		if ((type == EventType.MONITOR_SAMPLE) && (sample == null)) {
			throw new InvalidArgumentException("Empty sample is not allowed for MONITOR_SAMPLE events.");
		}
!!!421378.java!!!	getType() : EventType
		
		return type;
!!!421506.java!!!	getSample() : LoadSample
		
		return sample;
!!!421634.java!!!	getHardwareDescription() : HardwareDescription
		
		return hardware;
!!!421762.java!!!	getHostName() : String
		
		return hostName;
!!!421890.java!!!	getTime() : Date
		
		return time;
!!!422018.java!!!	getTimestamp() : long
		
		return TimeUtils.convertJavaDateToWindowsTime(time);
!!!422146.java!!!	setSample(inout sample : LoadSample) : void
		
		if ((type == EventType.MONITOR_SAMPLE) && (sample == null)) {
			throw new InvalidArgumentException("Sample data cannot be null in MONITOR_SAMPLE event.");
		}
		
		this.sample = sample;
!!!422274.java!!!	setHardwareDescription(inout hardware : HardwareDescription) : void
		
		if ((type == EventType.MONITOR_HW_DESCRIPTION) && (hardware == null)) {
			throw new InvalidArgumentException("Hardware description data cannot be null in"
					+ "MONITOR_HW_DESCRIPTION event.");
		}
		
		this.hardware = hardware;
!!!422402.java!!!	getDataSize() : int

		return REQUIRED_DATA_SIZE
		       + (hasSample() ? sample.getDataSize() : 0)
		       + (hasHardwareDescription() ? hardware.getDataSize() : 0)
		       + 2 * hostName.length();
!!!422530.java!!!	load(inout buffer : ByteBuffer) : ByteBuffer

		try {
			byte eventType = buffer.get();
			
			try {
				type = EventType.valueOf(eventType);
			} catch (IllegalArgumentException e) {
				throw new InputParseException("Unknown event type: \"" + eventType + "\".");
			}
			
			long ts = buffer.getLong();
			
			time = new Date(ts);

			short len = buffer.getShort();
			
			if (len < 0) {
				throw new InputParseException("Invalid hostname length.");
			}
			
			hostName = "";
			
			for (short i = 0; i < len; ++i) {
				hostName += buffer.getChar();
			}

			int dataLen = buffer.getInt();

			if (dataLen < 0) {
				throw new InputParseException("Invalid sample data length.");
			}
			
			if ((dataLen == 0) && (type == EventType.MONITOR_SAMPLE)) {
				throw new InputParseException("Sample cannot be empty in MONITOR_SAMPLE event.");
			}
			
			if (dataLen > 0) {
				sample = new LoadSample();
				sample.load(buffer);
			}
			
			int hwLen = buffer.getInt();
			
			if (hwLen < 0) {
				throw new InputParseException("Invalid hardware description data length.");
			}

			if ((hwLen == 0) && (type == EventType.MONITOR_HW_DESCRIPTION)) {
				throw new InputParseException("Hardware description cannot be empty in "
						+ "MONITOR_HW_DESCRIPTION event.");
			}
			
			if (hwLen > 0) {
				hardware = new HardwareDescription();
				hardware.load(buffer);
			}
			
		} catch (BufferUnderflowException e) {
			throw new InputParseException("Buffer underflow.", e);
		}
		
		return buffer;
!!!422658.java!!!	save(inout buffer : ByteBuffer) : ByteBuffer
		
		/*
		 * Event is serialised as follows:
		 * 
		 * Byte offset            Data type        Description
		 *     0                    byte           Event type (see EventType enum).
		 *     1                    long           Timestamp (number of milliseconds since Unix epoch).
		 *     9                    short          Length of the hostname string in characters (N).
		 *    11                    char[]         Hostname.
		 *  11+2*N                   int           Length of the Load Sample. If no sample is stored
		 *                                         in the event, this will be zero.
		 *  15+2*N                LoadSample       Serialised LoadSample (may be empty).
		 *  15+2*N+sample.len        int           Length of the HW description. If no description
		 *                                         is stored in the event this will be 0.
		 *  19+2*N+sample.len HardwareDescription  Hardware description data.
		 */
		
		if (buffer.isReadOnly()) {
			throw new OutputWriteException("Unable to write to the read-only buffer.");
		}
		
		try {
			buffer.put((byte) type.ordinal());
			buffer.putLong(time.getTime());
			buffer.putShort((short) hostName.length());
			
			for (int i = 0; i < hostName.length(); ++i) {
				buffer.putChar(hostName.charAt(i));
			}

			if (!hasSample()) {
				buffer.putInt(0);
			} else {
				buffer.putInt(sample.getDataSize());
				sample.save(buffer);
			}
			
			if (!hasHardwareDescription()) {
				buffer.putInt(0);
			} else {
				buffer.putInt(hardware.getDataSize());
				hardware.save(buffer);
			}
			
		} catch (BufferOverflowException e) {
			throw new OutputWriteException("Buffer overflow.", e);
		}
		
		return buffer;
!!!422786.java!!!	equals(inout o : Object) : boolean
		
		if (o instanceof LoadMonitorEvent) {
			return equals((LoadMonitorEvent) o);
		} else {
			return false;
		}
!!!422914.java!!!	equals(inout event : LoadMonitorEvent) : boolean
		
		if (event == this) {
			return true;
		}
		
		if (event == null) {
			return false;
		}
		
		if (type != event.type) {
			return false;
		}

		if (time != null) {
			if (!time.equals(event.getTime())) {
				return false;
			}
		} else {
			if (event.time != null) {
				return false;
			}
		}
		
		if (hostName != null) {
			if (!hostName.equals(event.hostName)) {
				return false;
			}
		} else {
			if (event.hostName != null) {
				return false;
			}
		}
		
		if (sample != null) {
			if (!sample.equals(event.sample)) {
				return false;
			}
		} else {
			if (event.sample != null) {
				return false;
			}
		}
		
		if (hardware != null) {
			if (!hardware.equals(event.hardware)) {
				return false;
			}
		} else {
			if (event.hardware != null) {
				return false;
			}
		}

		return true;
!!!423042.java!!!	hashCode() : int
		
		return 2 * type.ordinal()
		     + 3 * (sample != null ? sample.hashCode() : 0)
		     + 5 * (hostName != null ? hostName.hashCode() : 0)
		     + 7 * (time != null ? (int) time.getTime() : 0)
		     + 11 * (hardware != null ? hardware.hashCode() : 0);
!!!423170.java!!!	setHostName(in hostName : String) : void

		if (hostName == null) {
			throw new InvalidArgumentException("Hostname cannot be set to null.");
		}
		
		this.hostName = hostName;
!!!423298.java!!!	setTime(inout time : Date) : void
		
		if (time == null) {
			throw new InvalidArgumentException("Time cannot be set to null.");
		}
		
		this.time = time;
!!!423426.java!!!	setType(inout type : EventType) : void
		
		this.type = type;
!!!423554.java!!!	getChunkID() : byte
		
		return FILE_NODE_ID;
!!!423682.java!!!	hasSample() : boolean
		
		return sample != null;
!!!423810.java!!!	hasHardwareDescription() : boolean
		
		return hardware != null;
