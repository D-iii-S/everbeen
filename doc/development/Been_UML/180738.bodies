class ValueRegexp
!!!464514.java!!!	ValueRegexp()
		
		value = "";
		caseSensitive = false;
		pattern = null;
!!!464642.java!!!	ValueRegexp(in newValue : String, inout caseSense : boolean)
	
		caseSensitive = caseSense;
		value = newValue;
		
		if (caseSensitive) {
			pattern = Pattern.compile(newValue);
		} else {
			pattern = Pattern.compile(newValue, Pattern.CASE_INSENSITIVE);
		}
!!!464770.java!!!	ValueRegexp(inout node : Node)
		
		parseXMLNode(node);
!!!464898.java!!!	ValueRegexp(in newValue : String)
	
		caseSensitive = false;
		value = newValue;
		
		pattern = Pattern.compile(newValue, Pattern.CASE_INSENSITIVE);
!!!465026.java!!!	toString() : String

		return value;
!!!465154.java!!!	compareTo(inout vb : ValueRegexp) : int
	
		return value.compareTo(vb.value);
!!!465282.java!!!	equals(inout o : Object) : boolean
		
		if (o instanceof ValueRegexp) {
			return equals((ValueRegexp) o);
		} else {
			return false;
		}
!!!465410.java!!!	equals(inout vc : ValueRegexp) : boolean
		
		return value.equals(vc.value);
!!!465538.java!!!	greaterThan(inout o : Object) : boolean
		
		if (o instanceof ValueRegexp) {
			return greaterThan((ValueRegexp) o);
		} else {
			return false;
		}
!!!465666.java!!!	greaterThan(inout v : ValueRegexp) : boolean
		
		return value.compareTo(v.value) > 0;
!!!465794.java!!!	lessThan(inout o : Object) : boolean
		
		if (o instanceof ValueRegexp) {
			return lessThan((ValueRegexp) o);
		} else {
			return false;
		}
!!!465922.java!!!	lessThan(inout v : ValueRegexp) : boolean
		
		return value.compareTo(v.value) < 0;
!!!466050.java!!!	hashCode() : int
		
		return value.hashCode();
!!!466178.java!!!	match(in str : String) : boolean
		
		Matcher matcher = pattern.matcher(str);
		
		return matcher.matches();
!!!466306.java!!!	parseXMLNode(inout node : Node) : void

		if (!node.getNodeName().equals(getXMLNodeName())) {
			throw new InputParseException("Node does not contain regexp data. Node name is \""
					+ node.getNodeName() + "\".");
		}

		value = XMLHelper.getAttributeValueByName("value", node);
		caseSensitive = XMLHelper.getAttributeValueByName("caseSense", node).equals("yes");
		
		try {
			if (caseSensitive) {
				pattern = Pattern.compile(value);
			} else {
				pattern = Pattern.compile(value, Pattern.CASE_INSENSITIVE);
			}
		} catch (Exception e) {
			throw new InputParseException("Regular expression is invalid.", e);
		}
!!!466434.java!!!	exportAsElement(inout document : Document) : Element
		
		/* Resulting node
		 * 
		 * <regexp caseSense="<case-sense>" value="xxxxx"/>
		 * 
		 * where <case-sense> is either "yes" or "no" depending on the case sensitivity of the regexp.
		 */
		
		Element element = document.createElement(getXMLNodeName());
		
		element.setAttribute("value", value);
		element.setAttribute("caseSense", caseSensitive ? "yes" : "no");
		
		return element;
!!!466562.java!!!	isCaseSensitive() : boolean

		return caseSensitive;
!!!466690.java!!!	setCaseSensitive(inout caseSensitive : boolean) : void
		
		try {
			if (caseSensitive) {
				pattern = Pattern.compile(value);
			} else {
				pattern = Pattern.compile(value, Pattern.CASE_INSENSITIVE);
			}
		} catch (Exception e) {
			// this should never happen since we already compiled given expression before
			assert false : "Invalid regexp.";
		}
		
		this.caseSensitive = caseSensitive;
!!!466818.java!!!	getXMLNodeName() : String
		
		return "regexp";
!!!466946.java!!!	getValue() : String
		
		return value;
!!!467074.java!!!	setValue(in regexp : String) : void
		
		value = regexp;
		
		if (caseSensitive) {
			pattern = Pattern.compile(value);
		} else {
			pattern = Pattern.compile(value, Pattern.CASE_INSENSITIVE);
		}
!!!467202.java!!!	getUnit() : String
		
		return null;
