class PropertyDescriptions
!!!393730.java!!!	main(in args : String) : void
	
		String managerURL = MANAGER_URL_DEFAULT;
		
		/* set path to the manager from the command line.
		 */
		if (args.length > 0) {
			managerURL = args[0];
		}
		
		/* Connect to the Host Manager
		 */
		HostManagerInterface manager = null;
		
		try {
			manager = (HostManagerInterface) Naming.lookup("rmi://" + managerURL + HostManagerInterface.URL);
		} catch (Exception e) {
			System.err.println("Error connecting to the Host Manager.");
			System.err.println("Error message: " + e.getMessage());
			return;
		}
		
		HostInfoInterface hi = null;
		
		try {
			hi = manager.getHostInfo(manager.getHostNames()[0]);
		} catch (Exception e) {
			System.err.println("Error querying host data.");
			System.err.println("Error message: " + e.getMessage());
			return;
		}

		PropertyTreeReadInterface osObject = hi.getOperatingSystem();
		PropertyTreeReadInterface cpuObject = hi.getProcessor(0);
		
		/*
		 * There are two ways of querying description data of the property:
		 *   1. Request Host Manager for description using property name.
		 *   2. Request all descriptions at once and query descriptions from the class returned.
		 * 
		 * Both ways use only property name to query its description.
		 * 
		 * Each way is designed to be used under different circumstances. First method is good if you 
		 * query descriptions only occasionally, since it requires calls over RMI which can be quite 
		 * slow.
		 * Second method is useful when you need to query for descriptions more often. You will 
		 * receive copy of table containing all descriptions and you can request descriptions from 
		 * that table. Since descriptions cannot be modified, it is sufficient to query description 
		 * table once (e.g. at startup of your application). 
		 */
		
		/*
		 * First method - direct query to the Host Manager
		 */
		System.out.println("** Method 1 **");
		System.out.println();
		
		writeProperties1(hi, manager);
		writeProperties1(osObject, manager);
		writeProperties1(cpuObject, manager);
		
		System.out.println("\n");
		
		/*
		 * Second method - request description table first and use it later to get description data
		 */
		PropertyDescriptionTable table = null;

		System.out.println("** Method 2 **");			
		System.out.println();
		
		try {
			// get table from the HM
			table = manager.getPropertyDescriptionTable();
		} catch (Exception e) {
			System.err.println("Unable to obtain description table.");
			System.err.println("Error message: " + e.getMessage());
			return;
		}

		writeProperties2(hi, table);
		writeProperties2(osObject, table);
		writeProperties2(cpuObject, table);
!!!393858.java!!!	writeProperties1(inout o : PropertyTreeReadInterface, inout manager : HostManagerInterface) : void
		
		String objectPath = o.getName(true);
		
		System.out.println(objectPath);
		// Query and output object's description.
		PropertyDescription objectDescription = null;
		
		try {
			objectDescription = manager.getPropertyDescription(objectPath);
		} catch (Exception e) {
			System.err.println("Unable to query description data for \"" + objectPath + "\".");
			System.err.println("Error message: " + e.getMessage());
		}
		
		System.out.println("  -> description: " + objectDescription.getDescription());
		
		for (Iterator< NameValuePair > it1 = o.getPropertyIterator(); it1.hasNext(); ) {

			NameValuePair current = it1.next();
			String propertyPath = objectPath + "." + current.getName();
			PropertyDescription description = null;
			
			try {
				// Get description directly from the HM.
				description = manager.getPropertyDescription(propertyPath);
			} catch (Exception e) {
				System.err.println("Unable to query description data for \"" + propertyPath + "\".");
				System.err.println("Error message: " + e.getMessage());
			}
			
			System.out.println("  " + current.getName() + "=" + current.getValue());
			System.out.println("    -> description: " + description.getDescription());
			System.out.println("    -> type: " + description.getType());
			
			String unit = description.getUnit();
			
			System.out.println("    -> unit: " + (unit == null ? "(not applicable)" : unit));
		}
!!!393986.java!!!	writeProperties2(inout o : PropertyTreeReadInterface, inout table : PropertyDescriptionTable) : void

		String objectPath = o.getName(true);
		
		System.out.println(objectPath);
		// Query description of object using full path. Objects have only description and no unit
		// (they have type, but it's always "object").
		PropertyDescription objectDescription = null;
		
		try {
			objectDescription = table.getDescription(objectPath);
		} catch (Exception e) {
			System.err.println("Unable to query description data for \"" + objectPath + "\".");
			System.err.println("Error message: " + e.getMessage());
		}
		
		System.out.println("  -> description: " + objectDescription.getDescription());
		
		for (Iterator< NameValuePair > it1 = o.getPropertyIterator(); it1.hasNext(); ) {

			NameValuePair current = it1.next();
			String propertyPath = objectPath + "." + current.getName();
			PropertyDescription description = null;
			
			try {
				// Get description from the table.
				description = table.getDescription(propertyPath);
			} catch (Exception e) {
				System.err.println("Unable to query description data for \"" + propertyPath + "\".");
				System.err.println("Error message: " + e.getMessage());
			}
			
			System.out.println("  " + current.getName() + "=" + current.getValue());
			System.out.println("    -> description: " + description.getDescription());
			System.out.println("    -> type: " + description.getType());
			
			String unit = description.getUnit();
			
			System.out.println("    -> unit: " + (unit == null ? "(not applicable)" : unit));
		}
