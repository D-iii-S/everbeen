class RSLRestriction
!!!382850.java!!!	getRSLString() : String
		return rslString;
!!!382978.java!!!	RSLRestriction(in rslString : String)
		this.rslString = rslString;
		try {
			rslCondition = ParserWrapper.parseString(rslString);
		} catch (cz.cuni.mff.been.common.rsl.ParseException e) {
			/* We throw IllegalArgumentException just to be safe. We assume the caller
			 * has checked the RSL correctness before calling the constructor. 
			 */ 
			throw new IllegalArgumentException("Error in the RSL string.", e);
		}
!!!383106.java!!!	RSLRestriction(inout rslCondition : Condition)
		this.rslCondition = rslCondition;
!!!383234.java!!!	RSLRestriction(inout node : Node)
		parseXMLNode(node);
!!!383362.java!!!	exportAsElement(inout document : Document) : Element
		Element result = document.createElement(XML_NODE_NAME);
		result.appendChild(document.createTextNode(rslString));
		return result;
!!!383490.java!!!	getXMLNodeName() : String
		return XML_NODE_NAME;
!!!383618.java!!!	parseXMLNode(inout node : Node) : void
		if (!node.getNodeName().equals(XML_NODE_NAME)) {
			throw new InputParseException("Invalid node name: \""
				+ node.getNodeName() + "\".");
		}
		NodeList children = node.getChildNodes();
		if (children.getLength() != 1 || children.item(0).getNodeType() != Node.TEXT_NODE) {
			throw new InputParseException("Node " + XML_NODE_NAME
				+ " des not contain RSL expression.");
		}
		
		rslString = children.item(0).getNodeValue();
		try {
			rslCondition = ParserWrapper.parseString(rslString);
		} catch (cz.cuni.mff.been.common.rsl.ParseException e) {
			throw new InputParseException("Error parsing RSL expression: "
				+ e.getMessage());
		}
!!!383746.java!!!	test(inout object : PropertyTreeReadInterface, inout ignoreMissing : boolean) : boolean
		ContainerProperty context = new HostManagerContainerProperty(object);
		try {
			rslCondition.check(context);
		} catch (InvalidPropertyException e) {
			throw new ValueNotFoundException(e.getMessage(), e);
		} catch (InvalidOperatorException e) {
			throw new ValueTypeIncorrectException(e.getMessage(), e);
		} catch (InvalidValueTypeException e) {
			throw new ValueTypeIncorrectException(e.getMessage(), e);
		} catch (InvalidValueUnitException e) {
			throw new ValueTypeIncorrectException(e.getMessage(), e);
		}
		return rslCondition.evaluate(context);
