class RubisRun
!!!654210.java!!!	RubisRun()
		super();
!!!654338.java!!!	init() : void
		
		if ((clients = (String[]) getTaskPropertyObject(CLIENTS)) != null) {
			logInfo("Main client");

			for (String taskId : clients) {
				logDebug("Slave client task ID: " + taskId);
			}
		} else if ((mainClient = getTaskProperty(MAIN_CLIENT)) != null) {
			logInfo("Slave client");
			logDebug("Main client task ID:" + mainClient);
		} else {
			throw new TaskException("Must be the main client or a slave client");
		}
		
		runIndex = getTaskProperty(RUN_INDEX);
		logInfo("Run index: " + runIndex);
		
		ejbHostname = getTaskProperty(EJB_SERVER_HOSTNAME);
		logInfo("EJB server hostname: " + ejbHostname);
		
		databaseHostname = getTaskProperty(DATABASE_SERVER_HOSTNAME);
		logInfo("Database server hostname: " + databaseHostname);
		
		rubisRoot = getTaskProperty(RUBIS_ROOT);
		logInfo("Rubis installation directory: " + rubisRoot);
		
		String newTransitionTable = getTaskProperty(TRANSITION_TABLE);
		if (newTransitionTable != null) {
			transitionTable = newTransitionTable;
			logInfo("Transition table: " + transitionTable);
		}
		
		maxTransitions = getTaskProperty(TRANSITIONS_MAX);
		if (maxTransitions != null) {
			logInfo("Maximum number of transitions: " + maxTransitions);
		}
		
		upRampTime = getTaskProperty(UP_RAMP_TIME);
		if (upRampTime != null) {
			logInfo("Up Ramp time: " + upRampTime);
		}
		
		upRampSlowdownFactor = getTaskProperty(UP_RAMP_SLOWDOWN_FACTOR);
		if (upRampSlowdownFactor != null) {
			logInfo("Up Ramp slowdown factor: " + upRampSlowdownFactor);
		}
		
		sessionTime = getTaskProperty(SESSION_TIME);
		if (sessionTime != null) {
			logInfo("Session time: " + sessionTime);
		}
		
		downRampTime = getTaskProperty(DOWN_RAMP_TIME);
		if (downRampTime != null) {
			logInfo("Down Ramp time: " + downRampTime);
		}
		
		downRampSlowdownFactor = getTaskProperty(DOWN_RAMP_SLOWDOWN_FACTOR);
		if (downRampSlowdownFactor != null) {
			logInfo("Down Ramp slowdown factor: " + downRampSlowdownFactor);
		}
		
		clientCount = getTaskProperty(CLIENT_COUNT);
		if (clientCount != null) {
			logInfo("Client count: " + clientCount);
		}
		
		debugLevel = getTaskProperty(DEBUG_LEVEL);
		if (debugLevel != null) {
			logInfo("Debug level: " + debugLevel);
		}
!!!654466.java!!!	synchronize() : void
		if (clients != null) {
			// this is the main client, synchronise the start of all clients
			for (String  taskId : clients) {
				checkPointWait(null, taskId, READY_CHECKPOINT, 
						TaskManagerInterface.INFINITE_TIME);
			}
			checkPointReached(START_CHECKPOINT, null);
		} else {
			// this is a slave client, synchronise with the main client
			checkPointReached(READY_CHECKPOINT, null);
			checkPointWait(null, mainClient, START_CHECKPOINT, 
					TaskManagerInterface.INFINITE_TIME);
		}
!!!654594.java!!!	run() : void
		init();
		synchronize();
		
		/*
		 * set values in the rubis.properties file
		 */ 
		
		Properties rubisProperties = new Properties();
		
		// load the rubis.properties file
		String path = rubisRoot + File.separator + "Client" + 
			File.separator + "rubis.properties";
		File rubisPropertiesFile = new File(path);
		try {
			FileInputStream is = new FileInputStream(rubisPropertiesFile);
			rubisProperties.load(is);
		} catch (FileNotFoundException e) {
			throw new TaskException("File not found: " + path, e);
		} catch (IOException e) {
			throw new TaskException("Error occured while reading file: " + path, e);
		}

		// set the properties
		rubisProperties.setProperty(EJB_SERVER_HOSTNAME_PROPERTY, ejbHostname);
		rubisProperties.setProperty(HTTPD_HOSTNAME_PROPERTY, ejbHostname);
		rubisProperties.setProperty(DATABASE_SERVER_HOSTNAME_PROPERTY, databaseHostname);

		if (transitionTable != null) {
			String tablePath = rubisRoot + File.separator + "workload" + File.separator +
				transitionTable;
			rubisProperties.setProperty(TRANSITION_TABLE_PROPERTY, tablePath);
		}
		if (maxTransitions != null) {
			rubisProperties.setProperty(TRANSITIONS_MAX_PROPERTY, maxTransitions);
		}
		if (upRampTime != null) {
			rubisProperties.setProperty(UP_RAMP_TIME_PROPERTY, upRampTime);
		}
		if (upRampSlowdownFactor != null) {
			rubisProperties.setProperty(UP_RAMP_SLOWDOWN_FACTOR_PROPERTY, 
					upRampSlowdownFactor);
		}
		if (sessionTime != null) {
			rubisProperties.setProperty(SESSION_TIME_PROPERTY, sessionTime);
		}
		if (downRampTime != null) {
			rubisProperties.setProperty(DOWN_RAMP_TIME_PROPERTY, downRampTime);
		}
		if (downRampSlowdownFactor != null) {
			rubisProperties.setProperty(DOWN_RAMP_SLOWDOWN_FACTOR_PROPERTY, 
					downRampSlowdownFactor);
		}
		if (debugLevel != null) {
			rubisProperties.setProperty(DEBUG_LEVEL_PROPERTY, 
					debugLevel);
		}
		if (clientCount != null) {
			rubisProperties.setProperty(CLIENT_COUNT_PROPERTY, 
					clientCount);
		}
		
		// Set the paths to regions and categories files. These paths
		// aren't user settable, but must be modified according to
		// the path to the Rubis installation directory
		
		String databaseDirPath = rubisRoot + File.separator + "database";
		rubisProperties.setProperty(DATABASE_CATEGORIES_FILE_PROPERTY, 
				databaseDirPath + File.separator + "ebay_simple_categories.txt");
		rubisProperties.setProperty(DATABASE_REGIONS_FILE_PROPERTY, 
				databaseDirPath + File.separator + "ebay_regions.txt");

		// set the number of users to 1000000, small numbers cause errors
		rubisProperties.setProperty(DATABASE_NUMBER_OF_USERS_PROPERTY, "1000000");
		
		// set the debug level to 5
		rubisProperties.setProperty(DEBUG_LEVEL_PROPERTY, debugLevel);
		
		// set the port of the web server to 8080
		rubisProperties.setProperty(HTTPD_PORT, "8080");
		
		// save to the rubis.properties file
		try {
			FileOutputStream os = new FileOutputStream(rubisPropertiesFile);
			rubisProperties.store(os, "This file is generated by BEEN");
		} catch (FileNotFoundException e) {
			throw new TaskException("File not found: " + path, e);
		} catch (IOException e) {
			throw new TaskException("Error occured while writing to file: " + path, e);
		}
		
		logInfo("rubis.properties file modified");
		
		/*
		 * Run Rubis
		 */
	
		// classpath for Rubis. The first path element points to the 
		// "Client" directory which contains the rubis.properties file.
		// The second path element points to the directory with 
		// the classes.
		String classpath = rubisRoot + File.separator + "Client" +
				File.pathSeparator +
				rubisRoot + File.separator + "Client" + File.separator +
				"build" + File.separator + "RUBiS-1.0";
		String libraryPath = System.getProperty("java.library.path") + File.pathSeparator +
			rubisRoot + File.separator + "Client";
		
		try {
			String[] cmdArray = { "java", "-classpath", classpath, 
					"-Djava.library.path=" + libraryPath,
					"edu.rice.rubis.client.ClientEmulatorBeen",
					runIndex};

			logDebug("Executing: " + cmdArray[0] + " " + cmdArray[1] + 
					" " + cmdArray[2] +
					" " + cmdArray[3] +
					" " + cmdArray[4] +
					" " + cmdArray[5]);

			logInfo("Starting Rubis");
			Process p = Runtime.getRuntime().exec(cmdArray, null, new File(rubisRoot));
			p.getOutputStream().close();
			
			/* Read in the output from the subprocess */
			OutputReader stdoutReader = 
				new OutputReader(p.getInputStream(), OutputType.STDOUT);
			OutputReader stderrReader = 
				new OutputReader(p.getErrorStream(), OutputType.STDERR);
			stdoutReader.start();
			stderrReader.start();
			// wait until the script finishes
			if (p.waitFor() != 0) {
				throw new Exception("Rubis exited with an error, see the standard" +
						"output of this task");
			}
		} catch (Exception e) {
			throw new TaskException("Cannot run Rubis", e);
		}
	
		logInfo("Rubis finished succesfully");
!!!654722.java!!!	checkRequiredProperties() : void
		checkRequiredProperties(new String[]{
				RUN_INDEX,
				EJB_SERVER_HOSTNAME,
				DATABASE_SERVER_HOSTNAME,
				RUBIS_ROOT
		});
