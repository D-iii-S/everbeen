class HostGroup
!!!348162.java!!!	HostGroup(in name : String)
		
		if ((name == null) || name.equals("")) {
			throw new InvalidArgumentException("Invalid group name.");
		}

		groupName = name;
		groupMeta = "";
		hostList = new HashSet< String >();
		description = "";
		
		defaultGroup = name.equals(DEFAULT_GROUP_NAME);
!!!348290.java!!!	HostGroup(inout hg : HostGroup)
		
		groupName = hg.groupName;
		groupMeta = hg.groupMeta;
		hostList = hg.hostList;
		description = hg.description;
		defaultGroup = hg.defaultGroup;
!!!348418.java!!!	HostGroup(inout input : InputSource)
		
		hostList = new HashSet< String >();
		
		parse(input);
!!!348546.java!!!	parse(inout input : InputSource) : void

		DocumentBuilder builder = null;
		
		// create document builder
		try {
			builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();
		} catch (ParserConfigurationException e) {
			throw new InputParseException("DocumentBuilder : " + e.getMessage());
		}
		
		Document document = null;
		
		// create document
		try {
			document = builder.parse(input);
		} catch (Exception e) {
			throw new InputParseException("Document : " + e.getMessage());
		}
		
		// parse document
		try {
			Node hostGroupNode = XMLHelper.getSubNodeByName("hostGroup", document);
			
			groupName = XMLHelper.getSubNodeValueByName("groupName", hostGroupNode);
			defaultGroup = XMLHelper.getSubNodeValueByName("isDefault", hostGroupNode).equalsIgnoreCase("true"); 
			groupMeta = XMLHelper.getSubNodeValueByName("groupMeta", hostGroupNode);
			description = XMLHelper.getSubNodeValueByName("description", hostGroupNode);
			
			ArrayList< Node > hosts = XMLHelper.getChildNodesByName("host", XMLHelper.getSubNodeByName("hosts", hostGroupNode));
			
			// read all hosts from file
			for (Iterator< Node > it = hosts.iterator(); it.hasNext(); ) {
			
				hostList.add(XMLHelper.getNodeValue(it.next()));
			}
		} catch (Exception e) {
			throw new InputParseException(e);
		}
!!!348674.java!!!	parseXMLNode(inout node : Node) : void
		
		throw new UnsupportedOperationException("HostGroup cannot be created from XML node."
				+ " Use constructor instead.");
!!!348802.java!!!	addHost(in name : String) : boolean
		
		return hostList.add(name);		
!!!348930.java!!!	addHosts(inout names : Collection< String >) : int
		
		if (names != null) {

			int oldLen = hostList.size();

			hostList.addAll(names);
			
			return hostList.size() - oldLen;
			
		} else {
			return 0;
		}
!!!349058.java!!!	addHosts(in names : String) : int
		
		if (names != null) {
			
			int oldLen = hostList.size();
			
			for (String current: names) {
				addHost(current);
			}
			
			return hostList.size() - oldLen;
		} else {
			return 0;
		}
!!!349186.java!!!	removeHost(in name : String) : boolean
		
		if (hostList.contains(name)) {
			
			hostList.remove(name);
			
			return true;
		} else {
			return false;
		}
!!!349314.java!!!	containsHost(in name : String) : boolean
		
		return hostList.contains(name);
!!!349442.java!!!	addGroup(inout hg : HostGroup) : int
		
		return addHosts(hg.hostList);
!!!349570.java!!!	getAllHosts() : Set< String >
		
		HashSet< String > result = new HashSet< String >();
		
		result.addAll(hostList);
		
		return result;
!!!349698.java!!!	getHostCount() : int
		
		return hostList.size();
!!!349826.java!!!	removeAllHosts() : void
		
		hostList.clear();
!!!349954.java!!!	setMetadata(in data : String) : void
		
		groupMeta = data;
!!!350082.java!!!	getMetadata() : String
		
		return groupMeta;
!!!350210.java!!!	getDescription() : String
		
		return description;
!!!350338.java!!!	setDescription(in desc : String) : void
		
		description = desc;
!!!350466.java!!!	getName() : String
		
		return groupName;
!!!350594.java!!!	iterator() : Iterator< String >
		
		return new HostGroupIterator();
!!!350722.java!!!	exportAsElement(inout document : Document) : Element
		
		Element groupElement = document.createElement("hostGroup");
		
		groupElement.appendChild(XMLHelper.writeValueToElement(document, groupName, "groupName"));
		groupElement.appendChild(XMLHelper.writeValueToElement(document, isDefaultGroup(), "isDefault"));
		groupElement.appendChild(XMLHelper.writeValueToElement(document, groupMeta, "groupMeta"));
		groupElement.appendChild(XMLHelper.writeValueToElement(document, description, "description"));
		
		Element hostsElement = document.createElement("hosts");
		
		groupElement.appendChild(hostsElement);
		
		for (String host: hostList) {
			hostsElement.appendChild(XMLHelper.writeValueToElement(document, host, "host"));
		}
		
		return groupElement;
!!!350850.java!!!	toString() : String
		
		String result = "\"" + groupName + "\"={";
		
		for (Iterator< String > it = hostList.iterator(); it.hasNext(); ) {
				
			result += it.next() + (it.hasNext() ? ", " : "");
		}
		
		return result + "}";
!!!350978.java!!!	isDefaultGroup() : boolean
		
		return defaultGroup;
!!!351618.java!!!	getXMLNodeName() : String
		
		return "hostGroup";
