class SimpleCondition
!!!270850.java!!!	SimpleCondition(in propertyPath : String, inout value : T)
		this.propertyPath = propertyPath;
		this.value = value;
!!!270978.java!!!	getPropertyPath() : String
		return propertyPath;
!!!271106.java!!!	getValue() : T
		return value;
!!!271234.java!!!	equals(inout o : Object) : boolean
		return
			getClass().equals(o.getClass())
			&& propertyPath.equals(((SimpleCondition) o).propertyPath)
			&& value.equals(((SimpleCondition) o).value);
!!!271362.java!!!	hashCode() : int
		return propertyPath.hashCode() ^ value.hashCode();
!!!271490.java!!!	checkPropertyExists(inout context : ContainerProperty) : void
		if (pathToProperties(propertyPath, context).isEmpty()) {
			throw new InvalidPropertyException("Property \"" + propertyPath
				+ "\" doesn't exist.");
		}
!!!271618.java!!!	checkIsOrImplementsInterface(inout context : ContainerProperty, inout checkedInterface : Class, inout shouldImplement : boolean) : void
		
		for (SimpleProperty p: pathToProperties(propertyPath, context)) {
			Class propertyClass = p.getValueClass();
			boolean isInterface = propertyClass.equals(checkedInterface); 
			boolean implementsInterface = false;
			if (!isInterface) {
				for (Class c : propertyClass.getInterfaces()) {
					if (c.equals(checkedInterface)) {
						implementsInterface = true;
						break;
					}
				}
			}
			if (shouldImplement) {
				if (!isInterface && !implementsInterface) {
					throw new InvalidOperatorException("Invalid operator applied to property \""
							+ propertyPath + "\" as it's class \"" + propertyClass.getName()
							+ "\" doesn't implement interface \"" + checkedInterface.getName()
							+ "\".");
				}
			} else {
				if (isInterface || implementsInterface) {
					throw new InvalidOperatorException("Invalid operator applied to property \""
							+ propertyPath + "\" as it's class \"" + propertyClass.getName()
							+ "\" implements interface \"" + checkedInterface.getName()
							+ "\".");
				}
			}
		}
!!!271746.java!!!	check(inout context : ContainerProperty) : void
		/* Check if evaluated property exists in the context. */
		checkPropertyExists(context);
				
		/* Check if evaluated property is or implements interface List. */
		checkIsOrImplementsInterface(context, List.class, false);

		/* Check if the evaluated properties have same class as the value. */
		for (SimpleProperty p: pathToProperties(propertyPath, context)) {
			Class propertyClass = p.getValueClass();
			if (!value.getClass().equals(propertyClass)) {
				throw new InvalidValueTypeException("Invalid value type specified: "
						+ "Property \"" + propertyPath + "\" is \"" + propertyClass.getName()
						+ "\", but the value is \"" + value.getClass().getName() + "\".");
			}
		}
		
		/* Special case: When working with LongWithUnit properties, we must check
		 * units. Specifically, if the property specifies some unit, value can't
		 * specify different unit (but can specify no unit), and if the property
		 * doesn't specify any unit, value can't either.
		 */
		if (value.getClass().equals(LongWithUnit.class)) {
			for (SimpleProperty p: pathToProperties(propertyPath, context)) {
				String propertyUnitName = ((LongWithUnit) p.getValue()).getUnitName();
				String valueUnitName = ((LongWithUnit) value).getUnitName();
				if (propertyUnitName != null) {
					if (valueUnitName != null) {
						if (!valueUnitName.equals(propertyUnitName)) {
							throw new InvalidValueUnitException("Invalid unit specified: "
								+ "Property \"" + propertyPath + "\" has unit \"" + propertyUnitName
								+ "\", but the value has unit \"" + valueUnitName + "\".");
						}
					}
				} else {
					if (valueUnitName != null) {
						throw new InvalidValueUnitException("Invalid unit specified: "
							+ "Property \"" + propertyPath + "\" does not have any unit, but "
							+ "the value has unit \"" + valueUnitName + "\".");
					}
				}
			}
		}
