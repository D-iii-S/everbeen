class TaskDescriptorXmlParser
!!!683010.java!!!	TaskDescriptorXmlParser()
		// Do nothing... (overwrites default constructor...)
!!!683138.java!!!	parsePCDATA(inout elementWithPCDATA : Element) : String
		NodeList childNodes = elementWithPCDATA.getChildNodes();
		
		for (int i = 0; i < childNodes.getLength(); i++) {
			Node childNode = childNodes.item(i);
			
			if (childNode.getNodeName().equals("#text")) {
				return childNode.getNodeValue();
			}
		}
		
		return null;  // should never occur
!!!683266.java!!!	parseElementLoadMonitoring(inout loadMonitoringElement : Element, inout taskDescriptor : TaskDescriptor) : void
		/* Process attribute detailedLoad. */
		String attributeDetailedLoad;
		attributeDetailedLoad
			= loadMonitoringElement.getAttribute("detailedLoad");
		if (!attributeDetailedLoad.equals("")) {
			taskDescriptor.setDetailedLoad(
					(attributeDetailedLoad.equals("yes")) ? true : false);
		}
		
		/* Process attribute detailedLoad. */
		String attributeDetailedLoadInterval;
		attributeDetailedLoadInterval
			= loadMonitoringElement.getAttribute("detailedLoadInterval");
		if (!attributeDetailedLoadInterval.equals("")) {
			taskDescriptor.setDetailedLoadInterval(
					Long.parseLong(attributeDetailedLoad));
		}
		
		/* ... There are no elements... */
!!!683394.java!!!	parseElementFailurePolicy(inout failurePolicyElement : Element, inout taskDescriptor : TaskDescriptor) : void
		/* Process attribute restartMax. */
		String attributeRestartMax;
		attributeRestartMax = failurePolicyElement.getAttribute("restartMax");
		
		/* Process attribute timeoutRun. */
		String attributeTimeoutRun;
		attributeTimeoutRun = failurePolicyElement.getAttribute("timeoutRun");
		
		if (attributeRestartMax.equals("") || attributeTimeoutRun.equals("")) {
			System.err.println("Warning: All restartMax and timeoutRun "
					+ "attributes should be set within the "
					+ "\"failurePolicy\" element!");
		} else {
			taskDescriptor.setRestartMax(Integer.parseInt(attributeRestartMax));
			taskDescriptor.setTimeoutRun(Long.parseLong(attributeTimeoutRun));
		}
		
		/* ... There are no elements... */
!!!683522.java!!!	parseElementDependencyCheckPoint(inout dependencyCheckPointElement : Element, inout taskDescriptor : TaskDescriptor) : void
		/* Process attribute tid. */
		String attributeTid;
		attributeTid = dependencyCheckPointElement.getAttribute("tid");
		
		/* Process attribute type. */
		String attributeType;
		attributeType = dependencyCheckPointElement.getAttribute("type");
		
		/* Process attribute value. */
		String attributeValue;
		attributeValue = dependencyCheckPointElement.getAttribute("value");
		
		if (attributeTid.equals("")
				|| attributeType.equals("") || attributeValue.equals("")) {
			System.err.println("Warning: All tid, type and value "
					+ "attributes should be set within the "
					+ "\"dependencyCheckPoint\" element!");
		} else {
			taskDescriptor.addDependencyCheckPoint(new Dependency(
					attributeTid, attributeType, attributeValue));
		}
		
		/* ... There are no elements... */
!!!683650.java!!!	parseElementDependencies(inout dependenciesElement : Element, inout taskDescriptor : TaskDescriptor) : void
		/* ... There are no attributes... */
		
		/* Process element dependencyCheckPoint. */
		NodeList dependencyCheckPointList
			= dependenciesElement.getElementsByTagName("dependencyCheckPoint");
		for (int i = 0; i < dependencyCheckPointList.getLength(); i++) {
			Element dependencyCheckPointElement =
				(Element) dependencyCheckPointList.item(i);
			parseElementDependencyCheckPoint(
					dependencyCheckPointElement, taskDescriptor);
		}
!!!683778.java!!!	parseElementHostRuntimes(inout hostRuntimesElement : Element, inout taskDescriptor : TaskDescriptor) : void
		/* Process attribute options. */
		String attributeAsTask;
		attributeAsTask = hostRuntimesElement.getAttribute("asTask");
		if (!attributeAsTask.equals("")) {
			taskDescriptor.setHostRuntimesAsTask(attributeAsTask);
		}
		
		/* Process element name. */
		NodeList nameElementList
			= hostRuntimesElement.getElementsByTagName("name");
		for (int i = 0; i < nameElementList.getLength(); i++) {
			Element nameElement = (Element) nameElementList.item(i);
			String name = parsePCDATA(nameElement);
			taskDescriptor.addHostRuntimesName(name);
		}
		
		/* Process element rsl. */
		NodeList rslElementList
			= hostRuntimesElement.getElementsByTagName("rsl");
		if (rslElementList.getLength() > 0) {
			if (rslElementList.getLength() > 1) {
				System.err.println("Warning: There is more than one "
						+ "occurence of the \"rsl\" element within the "
						+ "\"hostRuntimes\" element. Only the first occurence "
						+ "will be used!");
			}
			Element rslElement = (Element) rslElementList.item(0);
			String rsl = parsePCDATA(rslElement);
			Condition rslCondition;
			try {
				rslCondition = ParserWrapper.parseString(rsl);
			} catch (ParseException e) {
				throw new IllegalArgumentException("rsl is not valid", e);
			}
			taskDescriptor.setHostRuntimesRsl(rslCondition);
		}
!!!683906.java!!!	parseElementPackage(inout packageElement : Element, inout taskDescriptor : TaskDescriptor) : void
		/* ... There are no attributes... */
		
		/* Process element name. */
		NodeList nameElementList
			= packageElement.getElementsByTagName("name");
		if (nameElementList.getLength() > 0) {
			if (nameElementList.getLength() > 1) {
				System.err.println("Warning: There is more than one "
						+ "occurence of the \"name\" element within the "
						+ "\"package\" element. Only the first occurence will "
						+ "be used!");
			}
			Element nameElement = (Element) nameElementList.item(0);
			String name = parsePCDATA(nameElement);
			taskDescriptor.setPackageName(name);
		}
		
		/* Process element rsl. */
		NodeList rslElementList
			= packageElement.getElementsByTagName("rsl");
		if (rslElementList.getLength() > 0) {
			if (rslElementList.getLength() > 1) {
				System.err.println("Warning: There is more than one "
						+ "occurence of the \"rsl\" element within the "
						+ "\"package\" element. Only the first occurence will "
						+ "be used!");
			}
			Element rslElement = (Element) rslElementList.item(0);
			String rsl = parsePCDATA(rslElement);
			Condition rslCondition;
			try {
				rslCondition = ParserWrapper.parseString(rsl);
			} catch (ParseException e) {
				throw new IllegalArgumentException("rsl is not valid", e);
			}
			taskDescriptor.setPackageRsl(rslCondition);
		}
!!!684034.java!!!	parseElementTaskProperty(inout taskPropertyElement : Element, inout taskDescriptor : TaskDescriptor) : void
		/* Process attribute key. */
		String attributeKey;
		attributeKey = taskPropertyElement.getAttribute("key");
		
		/* Process attribute value. */
		String attributeValue;
		attributeValue = taskPropertyElement.getAttribute("value");
		
		/* ... set TaskDescriptor... */
		if (attributeKey.equals("") || attributeValue.equals("")) {
			System.err.println("Warning: Booth key and value attribute"
					+ "should be set within the \"taskProperty\" element!");
		} else {
			taskDescriptor.addTaskProperties(attributeKey, attributeValue);
		}
		
		/* There are no elements... */
!!!684162.java!!!	parseElementTaskProperties(inout taskPropertiesElement : Element, inout taskDescriptor : TaskDescriptor) : void
		/* ... There are no attributes... */
		
		/* Process element taskProperty. */
		NodeList taskPropertyElementList
			= taskPropertiesElement.getElementsByTagName("taskProperty");
		if (taskPropertyElementList.getLength() < 1) {
			System.err.println("Error: There must be at least one "
					+ "occurence of the \"taskProperty\" element within the "
					+ "\"taskProperties\" element!");
		} else {
			for (int i = 0; i < taskPropertyElementList.getLength(); i++) {
				Element taskPropertyElement
					= (Element) taskPropertyElementList.item(i);
				parseElementTaskProperty(taskPropertyElement, taskDescriptor);
			}
		}
!!!684290.java!!!	parseElementJavaOptions(inout javaOptionsElement : Element, inout taskDescriptor : TaskDescriptor) : void
		/* ... There are no attributes... */
		
		/* Process element javaOption. */
		NodeList javaOptionElementList
			= javaOptionsElement.getElementsByTagName("javaOption");
		if (javaOptionElementList.getLength() < 1) {
			System.err.println("Error: There must be at least one "
					+ "occurence of the \"javaOption\" element within the "
					+ "\"javaOptions\" element!");
		} else {
			for (int i = 0; i < javaOptionElementList.getLength(); i++) {
				Element javaOptionElement
					= (Element) javaOptionElementList.item(i);
				String javaOption = parsePCDATA(javaOptionElement);
				taskDescriptor.addJavaOption(javaOption);
			}
		}
!!!684418.java!!!	parseElementJava(inout javaElement : Element, inout taskDescriptor : TaskDescriptor) : void
		/* Process attribute options. */
		String attributeOptions;
		attributeOptions = javaElement.getAttribute("options");
		if (!attributeOptions.equals("")) {
			taskDescriptor.setJavaOptions(attributeOptions, false);
		}
		
		/* Process element javaOptions. */
		NodeList javaOptionsElementList
			= javaElement.getElementsByTagName("javaOptions");
		if (javaOptionsElementList.getLength() > 0) {
			if (javaOptionsElementList.getLength() > 1) {
				System.err.println("Warning: There is more than one "
						+ "occurence of the \"javaOptions\" element within "
						+ "the \"java\" element. Only the first occurence "
						+ "will be used!");
			}
			Element javaOptionsElement
				= (Element) javaOptionsElementList.item(0);
			parseElementJavaOptions(javaOptionsElement, taskDescriptor);
		}
!!!684546.java!!!	parseElementArguments(inout argumentsElement : Element, inout taskDescriptor : TaskDescriptor) : void
		/* ... There are no attributes... */
		
		/* Process element argument. */
		NodeList argumentElementList
			= argumentsElement.getElementsByTagName("argument");
		if (argumentElementList.getLength() < 1) {
			System.err.println("Error: There must be at least one "
					+ "occurence of the \"argument\" element within the "
					+ "\"arguments\" element!");
		} else {
			for (int i = 0; i < argumentElementList.getLength(); i++) {
				Element argumentElement
					= (Element) argumentElementList.item(i);
				String argument = parsePCDATA(argumentElement);
				taskDescriptor.addArguments(argument);
			}
		}
!!!684674.java!!!	parseElementTaskDescriptor(inout taskDescriptorElement : Element, inout taskDescriptor : TaskDescriptor) : void
		/* Process attribute taskId. */
		String attributeTaskId;
		attributeTaskId = taskDescriptorElement.getAttribute("taskId");
		if (!attributeTaskId.equals("")) {
			taskDescriptor.setTaskId(attributeTaskId);
		}
		
		/* Process attribute contextId. */
		String attributeContextId;
		attributeContextId = taskDescriptorElement.getAttribute("contextId");
		if (!attributeContextId.equals("")) {
			taskDescriptor.setContextId(attributeContextId);
		}
		
		/* Process attribute name. */
		String attributeName;
		attributeName = taskDescriptorElement.getAttribute("name");
		if (!attributeName.equals("")) {
			taskDescriptor.setTaskName(attributeName);
		}
		
		/* Process attribute description. */
		String attributeDescription;
		attributeDescription
			= taskDescriptorElement.getAttribute("description");
		if (!attributeDescription.equals("")) {
			taskDescriptor.setTaskDescription(attributeDescription);
		}
		
		/* Process attribute exclusive. */
		String attributeExclusive;
		attributeExclusive = taskDescriptorElement.getAttribute("exclusive");
		if (!attributeExclusive.equals("")) {
			if (attributeExclusive
					.equals(TaskExclusivity.NON_EXCLUSIVE.toString())) {
				taskDescriptor.setTaskExclusive(TaskExclusivity.NON_EXCLUSIVE);
			} else if (attributeExclusive
					.equals(TaskExclusivity.CONTEXT_EXCLUSIVE.toString())) {
				taskDescriptor
					.setTaskExclusive(TaskExclusivity.CONTEXT_EXCLUSIVE);
			} else if (attributeExclusive
					.equals(TaskExclusivity.EXCLUSIVE.toString())) {
				taskDescriptor.setTaskExclusive(TaskExclusivity.EXCLUSIVE);
			} else {
				System.err.println("Warning: Attribute \"exclusive\" "
						+ "within \"task\" element has unexpected value!");
			}
		}
		
		/* Process element arguments. */
		NodeList argumentsElementList
			= taskDescriptorElement.getElementsByTagName("arguments");
		if (argumentsElementList.getLength() > 0) {
			if (argumentsElementList.getLength() > 1) {
				System.err.println("Warning: There is more than one "
						+ "occurence of the \"arguments\" element within the "
						+ "\"taskDescriptor\" element. Only the first "
						+ "occurence will be used!");
			}
			Element argumentsElement = (Element) argumentsElementList.item(0);
			parseElementArguments(argumentsElement, taskDescriptor);
		}
		
		/* Process element java. */
		NodeList javaElementList
			= taskDescriptorElement.getElementsByTagName("java");
		if (javaElementList.getLength() > 0) {
			if (javaElementList.getLength() > 1) {
				System.err.println("Warning: There is more than one "
						+ "occurence of the \"java\" element within the "
						+ "\"taskDescriptor\" element. Only the first "
						+ "occurence will be used!");
			}
			Element javaElement = (Element) javaElementList.item(0);
			parseElementJava(javaElement, taskDescriptor);
		}
		
		/* Process element taskProperties. */
		NodeList taskPropertiesElementList
			= taskDescriptorElement.getElementsByTagName("taskProperties");
		if (taskPropertiesElementList.getLength() > 0) {
			if (taskPropertiesElementList.getLength() > 1) {
				System.err.println("Warning: There is more than one "
						+ "occurence of the \"taskProperties\" element within "
						+ "the \"taskDescriptor\" element. Only the first "
						+ "occurence will be used!");
			}
			Element taskPropertiesElement
				= (Element) taskPropertiesElementList.item(0);
			parseElementTaskProperties(taskPropertiesElement, taskDescriptor);
		}
		
		/* Process element package. */
		NodeList packageElementList
			= taskDescriptorElement.getElementsByTagName("package");
		if (packageElementList.getLength() < 1) {
			System.err.println("Error: There must be just one occurence "
					+ "of the \"package\" element within the "
					+ "\"taskDescriptor\" element!");
		} else {
			if (packageElementList.getLength() > 1) {
				System.err.println("Warning: There is more than one "
						+ "occurence of the \"package\" element within the "
						+ "\"taskDescriptor\" element. Only the first "
						+ "occurence will be used!");
			}
			Element packageElement = (Element) packageElementList.item(0);
			parseElementPackage(packageElement, taskDescriptor);
		}
		
		/* Process element hostRuntimes. */
		NodeList hostRuntimesElementList
			= taskDescriptorElement.getElementsByTagName("hostRuntimes");
		if (hostRuntimesElementList.getLength() < 1) {
			System.err.println("Error: There must be just one occurence "
					+ "of the \"hostRuntimes\" element within the "
					+ "\"taskDescriptor\" element!");
		} else {
			if (hostRuntimesElementList.getLength() > 1) {
				System.err.println("Warning: There is more than one "
						+ "occurence of the \"hostRuntimes\" element within "
						+ "the \"taskDescriptor\" element. Only the first "
						+ "occurence will be used!");
			}
			Element hostRuntimesElement
				= (Element) hostRuntimesElementList.item(0);
			parseElementHostRuntimes(hostRuntimesElement, taskDescriptor);
		}
		
		/* Process element dependencies. */
		NodeList dependenciesElementList
			= taskDescriptorElement.getElementsByTagName("dependencies");
		if (dependenciesElementList.getLength() > 0) {
			if (dependenciesElementList.getLength() > 1) {
				System.err.println("Warning: There is more than one "
						+ "occurence of the \"dependencies\" element within "
						+ "the \"taskDescriptor\" element. Only the first "
						+ "occurence will be used!");
			}
			Element dependenciesElement
				= (Element) dependenciesElementList.item(0);
			parseElementDependencies(dependenciesElement, taskDescriptor);
		}
		
		/* Process element failurePolicy. */
		NodeList failurePolicyElementList
			= taskDescriptorElement.getElementsByTagName("failurePolicy");
		if (failurePolicyElementList.getLength() > 0) {
			if (failurePolicyElementList.getLength() > 1) {
				System.err.println("Warning: There is more than one "
						+ "occurence of the \"failurePolicy\" element within "
						+ "the \"taskDescriptor\" element. Only the first "
						+ "occurence will be used!");
			}
			Element failurePolicyElement
				= (Element) failurePolicyElementList.item(0);
			parseElementFailurePolicy(failurePolicyElement, taskDescriptor);
		}
		
		/* Process element loadMonitoring. */
		NodeList loadMonitoringElementList
			= taskDescriptorElement.getElementsByTagName("loadMonitoring");
		if (loadMonitoringElementList.getLength() > 0) {
			if (loadMonitoringElementList.getLength() > 1) {
				System.err.println("Warning: There is more than one "
						+ "occurence of the \"loadMonitoring\" element within "
						+ "the \"taskDescriptor\" element. Only the first "
						+ "occurence will be used!");
			}
			Element loadMonitoringElement
				= (Element) loadMonitoringElementList.item(0);
			parseElementLoadMonitoring(loadMonitoringElement, taskDescriptor);
		}
!!!684802.java!!!	parseDocument(inout document : Document, inout taskDescriptor : TaskDescriptor) : void
		/* Process element taskDescriptor (root element). */
		Element taskDescriptorElement = document.getDocumentElement();
		if (taskDescriptorElement.getTagName().equals("taskDescriptor")) {
			parseElementTaskDescriptor(taskDescriptorElement, taskDescriptor);
		}
!!!684930.java!!!	parseXmlTaskDescriptor(inout xmlFile : InputStream) : TaskDescriptor
		/* Prepare DOM. */
		DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
		factory.setValidating(false);
		
		Document document;
		try {
			document = factory.newDocumentBuilder().parse(xmlFile);
		} catch (SAXException e) {
			throw new TaskDescriptorException("Parse error occured.", e);
		} catch (IOException e) {
			throw new TaskDescriptorException(e);
		} catch (ParserConfigurationException e) {
			throw new TaskDescriptorException("DocumentBuilder can not be "
					+ "created", e);
		}
		
		/* Create a new (empty) instance of TaskDescriptor. */
		TaskDescriptor taskDescriptor = new TaskDescriptor();
		
		/* Inicialize instance of TaskDescriptor in agreement with XML file. */
		parseDocument(document, taskDescriptor);
		
		/* Return initialized instance of TaskDescriptor. */
		return taskDescriptor;
!!!685058.java!!!	parseXmlTaskDescriptor(inout xmlFile : File) : TaskDescriptor
		try {
			return parseXmlTaskDescriptor(new FileInputStream(xmlFile));
		} catch (FileNotFoundException e) {
			throw new TaskDescriptorException(e);
		}
