class AnalysisImplementation
!!!516098.java!!!	AnalysisImplementation()
		super();
		analysisEntityManager = database.getAnalysisEntityManager();
!!!516226.java!!!	getEntity(inout id : AID) : Entity
		return analysisEntityManager.getAnalysis(id); 
!!!516354.java!!!	setEntityComment(inout id : AID, in comment : String) : void
		analysisEntityManager.setAnalysisComment(id, comment);
		
!!!516482.java!!!	getEntities() : Entity
		return analysisEntityManager.getAnalyses();
!!!516610.java!!!	getSubentityInterface(inout id : AID) : EntityInterface
		return new ExperimentImplementation(id);
!!!516738.java!!!	getExportFormats() : DataFormat
		return exporter.getAnalysisExportFormats();
!!!516866.java!!!	beginExport(inout ids : AID, in formatId : String, inout ip : InetAddress, in port : int) : DownloadHandle
		return exporter.beginAnalysesExport(ids, formatId, ip, port);
!!!516994.java!!!	getImportFormats() : DataFormat
		return importer.getAnalysisImportFormats();
!!!517122.java!!!	beginImport(in formatId : String, inout ip : InetAddress, in port : int) : UploadHandle
		return importer.beginAnalysesImport(formatId, ip, port);
!!!517250.java!!!	deleteEntity(inout id : AID) : void
		analysisEntityManager.eraseAnalysis(id);
!!!517378.java!!!	graphCount(inout graphType : GraphType, inout aid : AID) : int
  		if (graphType == GraphType.LOAD) {
  			throw new UnsupportedOperationException(LOAD_FOR_RUNS_ONLY);
  		}
		return analysisEntityManager.getAnalysisGraphCount(graphType, aid);		
!!!517506.java!!!	getGraphInfo(inout graphType : GraphType, inout id : AID, in index : int) : GraphInfo
		if (graphType == GraphType.LOAD) {
  			throw new UnsupportedOperationException(LOAD_FOR_RUNS_ONLY);
  		}
		try {
			return analysisEntityManager.getAnalysisGraphInfo(graphType, id, index);
		} catch (IOException e) {
			Logger.logError("I/O error reading graph info for " 
					+ Database.getAnalysisReferenceString(id) + ".");
			return null;
		}
!!!517634.java!!!	beginGraphDownload(inout graphType : GraphType, inout id : AID, inout ip : InetAddress, in port : int, in index : int) : DownloadHandle

  		if (graphType == GraphType.LOAD) {
  			throw new UnsupportedOperationException(LOAD_FOR_RUNS_ONLY);
  		}
  		
  		if (graphCount(graphType, id) == 0) {
			throw new IllegalArgumentException("Graph doesn't exist.");
		} else {
			try {
		
			return analysisEntityManager.downloadAnalysisFile(id,  
					analysisEntityManager.getAnalysisGraphPath(graphType, id, index),
					ip.getCanonicalHostName(),
					port, false);
			} catch (IOException e) {
				Logger.logError("I/O error reading graph for " 
						+ Database.getAnalysisReferenceString(id) + ".");
				throw new ResultsRepositoryException(e);
			}
		}		
!!!517762.java!!!	beginRawDataDownload(inout id : AID, inout ip : InetAddress, in port : int) : DownloadHandle
			throw new UnsupportedOperationException(RAW_DATA_FOR_RUNS_ONLY);
!!!517890.java!!!	endRawDataDownload(inout handle : DownloadHandle) : void
			throw new UnsupportedOperationException(RAW_DATA_FOR_RUNS_ONLY);
!!!518018.java!!!	getRawDataDownloadStatus(inout handle : DownloadHandle) : DownloadStatus
			throw new UnsupportedOperationException(RAW_DATA_FOR_RUNS_ONLY);
!!!518146.java!!!	getContext(inout id : AID) : String
			throw new UnsupportedOperationException("Single context for analysis don't exist.");
!!!518274.java!!!	getTasks(inout id : AID) : String
			throw new UnsupportedOperationException("Task list for whole analysis not supported.");
!!!518402.java!!!	getLogsForTask(inout id : AID, in taskID : String) : LogRecord
			throw new UnsupportedOperationException("Logs for tasks for whole analysis not supported.");
