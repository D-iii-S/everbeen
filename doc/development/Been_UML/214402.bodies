class PackagesModule
!!!776194.java!!!	PackagesModule()
		super();
		
		/* Initialize general module info... */
		id = "packages";
		name = "Packages";
		defaultAction = "list";
		
		menu = new MenuItem[] {
				new MenuItem("list", "Packages"), 
				new MenuItem("upload", "Upload package"),
		};

		eventManager.registerEventListener(this);
!!!776322.java!!!	getInstance() : PackagesModule
		if (instance == null) {
			 instance = new PackagesModule();
		}
		return instance;
!!!776450.java!!!	receiveEvent(inout event : Event) : void
		taskManager.drop();
		softwareRepository.drop();
!!!776578.java!!!	invokeMethodForAction(inout request : HttpServletRequest, inout response : HttpServletResponse, in action : String) : void
		try {
			super.invokeMethodForAction(request, response, action);
		} catch (InvocationTargetException e) {
			if (e.getCause() instanceof ConnectException) {
				throw new InvocationTargetException(
					new ConnectException(
						"<strong>Can't execute remote call to the Software Repository."
						+ "</strong><br /><br />"
						+ "Try to reload the page. If the error persists after multiple reloads, "
						+ "go to the <a href=\"../../services/>Services</a> tab and make "
						+ "sure the Software Repository is running.<br /><br/>"
						+ "Most probale causes of this error are network-related problems or "
						+ "crash of the service."
					),
					e.getMessage()
				);
			} else {
				throw e;
			}
		}
!!!776706.java!!!	getAttributeInfoByName(in attributeName : String) : AttributeInfo
		for (AttributeInfo info: PackageMetadata.ATTRIBUTE_INFO) {
			if (attributeName.equals(info.getName())) {
				return info;
			}
		}
		throw new IllegalArgumentException("Attribute \"" + attributeName + "\" doesn't exist.");
!!!776834.java!!!	getOperatorByKlassAndName(inout klass : Class, in name : String) : Operator
		Operator[] operators = Operator.forKlass(klass);

		/* Now search the array for operator with specified name. */
		for (int i = 0; i < operators.length; i++) {
			Operator operator = operators[i];
			if (operator.getName().equals(name)) {
				return operator;
			}
		}
		throw new IllegalArgumentException("Operator \"" + name
				+ "\" doesn't exist.");
!!!776962.java!!!	ensureValueByKlassAndValue(inout klass : Class, in value : String) : void
		if (klass.getName().equals("cz.cuni.mff.been.softwarerepository.PackageType")) {
			PackageType.realValueOf(value);
		}
!!!777090.java!!!	getValueByKlassAndValue(inout klass : Class, in value : String) : Object
		if (klass.getName().equals("java.lang.String")) {
			return value;
		} else if (klass.getName().equals("java.util.Date")) {
			SimpleDateFormat format = new SimpleDateFormat("dd/MM/yyyy H:m:s");
			Date result;
			try {
				result = format.parse(value);
			} catch (ParseException e) {
				result = null;
			}
			if (result == null) {
				throw new IllegalArgumentException("Enter valid date and time (format: \""
					+ format.toPattern() + "\").");
			}
			return result;
		} else if (klass.getName().equals("java.util.ArrayList")) {
			return value;
		} else if (klass.getName().equals("cz.cuni.mff.been.common.Version")) {
			return new Version(value);
		} else if (klass.getName().equals("cz.cuni.mff.been.softwarerepository.PackageType")) {
			return PackageType.realValueOf(value);
		} else {
			assert false: "Should not happen.";
		}
		return null;
!!!777218.java!!!	ensureConditions(inout request : HttpServletRequest) : void
		String[] conditionIds = Routines.split2(",", request.getParameter("condition-ids"));
		
		for (int i = 0; i < conditionIds.length; i++) {
			String attributeParam = params.makeIndexed("attribute", conditionIds[i]);
			String operatorParam = params.makeIndexed("operator", conditionIds[i]);
			String valueParam = params.makeIndexed("value", conditionIds[i]);
			
			params.ensureExist(attributeParam, operatorParam, valueParam);
			
			String attributeName = request.getParameter(attributeParam);
			AttributeInfo attributeInfo = null; // initialized to shut up the compiler 
			
			try {
				attributeInfo = getAttributeInfoByName(attributeName);
			} catch (IllegalArgumentException e) {
				params.ensureCondition(attributeParam, false);
			}
						
			try {
				getOperatorByKlassAndName(
					attributeInfo.getKlass(),
					request.getParameter(operatorParam)
				);
			} catch (IllegalArgumentException e) {
				params.ensureCondition(operatorParam, false);
			}

			try {
				ensureValueByKlassAndValue(
					attributeInfo.getKlass(),
					request.getParameter(params.makeIndexed("value", conditionIds[i]))
				);
			} catch (IllegalArgumentException e) {
				params.ensureCondition(valueParam, false);
			}
		}
!!!777346.java!!!	checkConditions(inout request : HttpServletRequest) : void
		String[] conditionIds = Routines.split2(",", request.getParameter("condition-ids"));
		
		for (int i = 0; i < conditionIds.length; i++) {
			String attributeName = request.getParameter(params.makeIndexed("attribute", conditionIds[i]));
			AttributeInfo attributeInfo = getAttributeInfoByName(attributeName);
			
			try {
				getValueByKlassAndValue(
					attributeInfo.getKlass(),
					request.getParameter(params.makeIndexed("value", conditionIds[i]))
				);
			} catch (IllegalArgumentException e) {
				params.checkCondition(false, e.getMessage());
			}
		}
!!!777474.java!!!	buildConditions(inout request : HttpServletRequest) : ArrayList<HashMap<String, String>>
		String[] conditionIds = Routines.split2(",", request.getParameter("condition-ids"));
		ArrayList<HashMap<String, String>> result = new ArrayList<HashMap<String, String>>();
		
		for (int i = 0; i < conditionIds.length; i++) {
			HashMap<String, String> item = new HashMap<String, String>();
			item.put("attribute", request.getParameter(params.makeIndexed("attribute", conditionIds[i])));
			item.put("operator", request.getParameter(params.makeIndexed("operator", conditionIds[i])));
			item.put("value", request.getParameter(params.makeIndexed("value", conditionIds[i])));
			result.add(item);
		}
		
		return result;
!!!777602.java!!!	buildAtoms(inout request : HttpServletRequest) : Condition
		String[] conditionIds = Routines.split2(",", request.getParameter("condition-ids"));
		Condition[] result = new Condition[conditionIds.length];
		
		for (int i = 0; i < conditionIds.length; i++) {
			String attributeName = request.getParameter(params.makeIndexed("attribute", conditionIds[i]));
			AttributeInfo attributeInfo = getAttributeInfoByName(attributeName);
			Operator operator = getOperatorByKlassAndName(
				attributeInfo.getKlass(),
				request.getParameter(params.makeIndexed("operator", conditionIds[i]))
			);
			Object value;
			try {
				value = getValueByKlassAndValue(
					attributeInfo.getKlass(),
					request.getParameter(params.makeIndexed("value", conditionIds[i]))
				);
			} catch (IllegalArgumentException e) {
				value = null;
			}
			result[i] = new Condition(attributeName, operator, value);
		}
		
		return result;
!!!777730.java!!!	filterPackages(inout packages : PackageMetadata, inout type : PackageType) : PackageMetadata
		List<PackageMetadata> result = new LinkedList<PackageMetadata>();
		for (PackageMetadata pakkage: packages) {
			if (pakkage.getType().equals(type)) {
				result.add(pakkage);
			}
		}
		return result.toArray(new PackageMetadata[result.size()]);
!!!777858.java!!!	list(inout request : HttpServletRequest, inout response : HttpServletResponse) : void
		if (params.exists("action")) {
			String action = request.getParameter("action");
			if (action.equals("deleted")) {
				infoMessages.addTextMessage("Package deleted successfully.");
			} else {
				throw new InvalidParamValueException("Parameter \"action\" has invalid value.");
			}
		}

		HttpSession session = request.getSession();

		Condition[] atoms;
		ArrayList<HashMap<String, String>> conditions;
		NoPackagesReason noPackagesReason; 
		if (params.exists("condition-ids")) {
			ensureConditions(request);
			checkConditions(request);
			
			conditions = buildConditions(request);
			atoms = buildAtoms(request);
			noPackagesReason = NoPackagesReason.NO_MATCH;
			
			if (errorMessages.isEmpty()) {
				session.setAttribute(CONDITIONS_SESSION_KEY, conditions);
				session.setAttribute(ATOMS_SESSION_KEY, atoms);
			}
		} else {
			/* This is used by Selenium tests - it ensures there will be no conditions
			 * remembered from previous queries.
			 */ 
			if (params.exists("reset-conditions")) {
				session.setAttribute(CONDITIONS_SESSION_KEY, null);
				session.setAttribute(ATOMS_SESSION_KEY, null);
			}
			
			conditions = (ArrayList) session.getAttribute(CONDITIONS_SESSION_KEY);
			if (conditions == null) {
				conditions = new ArrayList<HashMap<String, String>>() { };
			}
			atoms = (Condition[]) session.getAttribute(ATOMS_SESSION_KEY);
			if (atoms == null) {
				atoms = new Condition[] {};
			}
			noPackagesReason = NoPackagesReason.INITIAL;
		}

		
		PackageMetadata[] packages = {};
		if (errorMessages.isEmpty()) {
			PackageListQueryCallback queryInterface = new PackageListQueryCallback(atoms);
			try {
				packages = softwareRepository.get().queryPackages(queryInterface);
			} catch (MatchException e) {
				assert false: "If you end up here, you are doomed"; 
			}
		} else {
			noPackagesReason = NoPackagesReason.ERROR;
		}
		
		Arrays.sort(packages, new PackageListComparator());
		PackageMetadata[] sourcePackages = filterPackages(packages, PackageType.SOURCE);
		PackageMetadata[] binaryPackages = filterPackages(packages, PackageType.BINARY);
		PackageMetadata[] taskPackages = filterPackages(packages, PackageType.TASK);
		PackageMetadata[] dataPackages = filterPackages(packages, PackageType.DATA);
		
		HashMap<String, Object> data = new HashMap<String, Object>();
		data.put("conditions", conditions);
		data.put("atoms", atoms);
		data.put("sourcePackages", sourcePackages);
		data.put("binaryPackages", binaryPackages);
		data.put("taskPackages", taskPackages);
		data.put("dataPackages", dataPackages);
		data.put("noPackagesReason", noPackagesReason);

		page.setTitle("Packages");
		page.writeHeader();
		page.writeTemplate("packages-list", data);
		page.writeFooter();
!!!777986.java!!!	uploadPackage(inout inputStream : InputStream) : UploadResult
		UploadStatus status = UploadStatus.ACCEPTED;
		String[] errorMessages = new String[0];
	    
		ServerSocket serverSocket = new ServerSocket(0); // 0 = use any port
		UploadHandle handle = softwareRepository.get().beginPackageUpload(
				InetAddress.getLocalHost(), 
				serverSocket.getLocalPort());
		byte[] buffer = new byte[SoftwareRepositoryInterface.UPLOAD_BUFFER_SIZE];
		int bytesRead;
		Socket socket = serverSocket.accept();
		try {
			OutputStream outputStream = new BufferedOutputStream(
				socket.getOutputStream(),
				SoftwareRepositoryInterface.UPLOAD_BUFFER_SIZE
			);
			InputStream bufferedInputStream = new BufferedInputStream(
				inputStream,
				SoftwareRepositoryInterface.UPLOAD_BUFFER_SIZE
			);
			try {
				while ((bytesRead = bufferedInputStream.read(buffer)) != -1) {
					outputStream.write(buffer, 0, bytesRead);
				}
			} finally {
				outputStream.close();
				bufferedInputStream.close();
			}
		} finally {
			socket.close();
			serverSocket.close();
	
			/*
			 * Wait until the Software Repository finishes its processing and sets
			 * some meaningful state. Finish the upload then.
			 */
			do {
				status = softwareRepository.get().getPackageUploadStatus(handle);
			} while (status == UploadStatus.UPLOADING || status == UploadStatus.INITIALIZING);
			if (status == UploadStatus.REJECTED) {
				errorMessages = softwareRepository.get().getRejectedPackageUploadErrorMessages(handle);
			}
			softwareRepository.get().endPackageUpload(handle);
		}
		return new UploadResult(status, errorMessages);
!!!778114.java!!!	upload(inout request : HttpServletRequest, inout response : HttpServletResponse) : void
	
		HashMap<String, Object> data = new HashMap<String, Object>();
	
		if (params.exists("action")) {
			String action = request.getParameter("action");
			if (action.equals("uploaded")) {
				infoMessages.addTextMessage("Package uploaded successfully.");
			} else {
				throw new InvalidParamValueException("Parameter \"action\" has invalid value.");
			}
		}
	
		/* Ideally, the presence of the query parameter "upload" should be checked
		 * here - for consistency with other forms. Unfortunately, when the form
		 * data is sent as "multipart/form-data" (necessary to upload files), Tomcat
		 * doesnt' understand it and leaves the request unparsed => we can't
		 * directly access the query parameters.
		 * 
		 * Workaround is to check the request type - if POSTing, we're uploading,
		 * if GETting, we're only viewing the form.
		 */ 
		if (params.requestMethodIsPost()) {
			DiskFileUpload upload = new DiskFileUpload();
			
			List fileItems = null;
			try {
				fileItems = upload.parseRequest(request);
			} catch (FileUploadException e) {
				errorMessages.addTextMessage("Error uploading package:" + e.getMessage());
			}
			
			FileItem fileItem = null;
			if (errorMessages.isEmpty()) {
				/* Index "0" is the index of the field in the upload form. Needs to be
				 * synchronized with /webinterface/templates/package-upload.jsp.
				 */
				fileItem = (FileItem) fileItems.get(0);
				params.checkCondition(!fileItem.getName().equals(""), "Enter the package file.");
			}

			if (errorMessages.isEmpty()) {
				InputStream inputStream = fileItem.getInputStream();
				try {
					try {
						UploadResult result = uploadPackage(inputStream);
						switch (result.getStatus()) {
							case REJECTED:
								String message = "<strong>Package was "
									+ "rejected by the Software Repository. Reported errors:</strong><br /><br />";
								message += "<ul>";
								for (String errorMessage: result.getErrorMessages()) {
									message += "<li>";
									message += Routines.htmlspecialchars(errorMessage);
									message += "</li>";
								}
								message += "</ul>";
								errorMessages.addHTMLMessage(message);
								break;
							case ERROR:
								errorMessages.addTextMessage("Error uploading package: Software Repository reports error.");
								break;
							default:
								/* Just pass... */
						}
					} finally {
						inputStream.close();
					}
				} catch (IOException e) {
					errorMessages.addTextMessage("Error uploading package:" + e.getMessage());
				}
			}
	
			if (errorMessages.isEmpty()) {
				HashMap<String, String> actionParams = new HashMap<String, String>();
				actionParams.put("action", "uploaded");
				page.redirectToAction("upload", actionParams);
				return;
			} else {
				data.put("file", fileItem.getName());
			}
		} else {
			data.put("file", "");
		}
		
		page.setTitle("Upload package");
		page.setFocusedElement(0, "file");
		page.writeHeader();
		page.writeTemplate("packages-upload", data);
		page.writeFooter();
!!!778242.java!!!	getPackageMetadataByFilename(in filename : String) : PackageMetadata
		PackageDetailsQueryCallback callback = new PackageDetailsQueryCallback(filename);
		PackageMetadata[] metadata = null;
		try {
			metadata = softwareRepository.get().queryPackages(callback);
		} catch (MatchException e) {
			assert false: "If you end up here, you are doomed"; 
		}
		return metadata.length == 1 ? metadata[0] : null; 
!!!778370.java!!!	details(inout request : HttpServletRequest, inout response : HttpServletResponse) : void
		params.ensureExists("package");

		PackageMetadata metadata = getPackageMetadataByFilename(
			request.getParameter("package")
		);
		params.ensureCondition("package", metadata != null);

		HashMap<String, Object> data = new HashMap<String, Object>();
		data.put("metadata", metadata);

		page.setTitle("Package details: " + metadata.getName());
		page.writeHeader();
		page.writeTemplate("packages-details", data);
		page.writeFooter();
!!!778498.java!!!	downloadPackage(in filename : String, inout response : HttpServletResponse) : void
		ServerSocket serverSocket = new ServerSocket(0); // 0 = use any port
		DownloadHandle handle = softwareRepository.get().beginPackageDownload(
			filename, InetAddress.getLocalHost(),
			serverSocket.getLocalPort()
		);
		byte[] buffer = new byte[SoftwareRepositoryInterface.DOWNLOAD_BUFFER_SIZE];
		int bytesRead;
		Socket socket = serverSocket.accept();
		try {
			InputStream inputStream = new BufferedInputStream(
				socket.getInputStream(),
				SoftwareRepositoryInterface.DOWNLOAD_BUFFER_SIZE
  		);
			OutputStream outputStream = new BufferedOutputStream(
				response.getOutputStream(),
				SoftwareRepositoryInterface.DOWNLOAD_BUFFER_SIZE
			);
			try {
				while ((bytesRead = inputStream.read(buffer)) != -1) {
					outputStream.write(buffer, 0, bytesRead);     
				}
			}	finally {
				inputStream.close();
				outputStream.close();
			}
		} finally {
			socket.close();
			serverSocket.close();
			softwareRepository.get().endPackageDownload(handle);
		}
!!!778626.java!!!	download(inout request : HttpServletRequest, inout response : HttpServletResponse) : void
		params.ensureExists("package");
		
		response.setContentType(SoftwareRepositoryInterface.PACKAGE_MIME_TYPE);
		response.setHeader("Content-Disposition", "attachment; filename=\""
			+ request.getParameter("package") + "\"");
		downloadPackage(request.getParameter("package"), response);
!!!778754.java!!!	delete(inout request : HttpServletRequest, inout response : HttpServletResponse) : void
		params.ensureExists("package");
		
		PackageMetadata metadata = getPackageMetadataByFilename(
			request.getParameter("package")
		);
		params.ensureCondition("package", metadata != null);
		
		softwareRepository.get().deletePackage(request.getParameter("package"));
		
		HashMap<String, String> actionParams = new HashMap<String, String>();
		actionParams.put("action", "deleted");
		page.redirectToAction("list", actionParams);
!!!778882.java!!!	javascriptAttributeInfo(inout request : HttpServletRequest, inout response : HttpServletResponse) : void
		response.setContentType("text/javascript");
		page.writeTemplate("packages-javascript-attribute-info", null);
