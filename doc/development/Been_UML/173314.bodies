class AddHost
!!!390658.java!!!	main(in args : String) : void
	
		String managerURL = DEFAULT_MANAGER_URL;
		
		/* set path to the manager from the commandline.
		 */
		if (args.length > 0) {
			managerURL = args[0];
		}
		
		/* Connect to the Host Manager
		 */
		HostManagerInterface manager = null;
		
		try {
			manager = (HostManagerInterface) Naming.lookup("rmi://" + managerURL + HostManagerInterface.URL);
		} catch (Exception e) {
			System.err.println("Unable to connect to the Host Manager.");
			System.err.println("Error message: " + e.getMessage());
			return;
		}
		
		// Get default group.
		HostGroup defaultGroup = null;
		
		try {
			defaultGroup = manager.getGroup(HostGroup.DEFAULT_GROUP_NAME);
		} catch (Exception e) {
			System.err.println("Unable to query default group.");
			System.err.println("Error message: " + e.getMessage());
		}
		
		// Write out hosts in the default group.
		System.out.println("Default group:");
		System.out.println(defaultGroup);
		
		System.out.println();
		System.out.println("Executing detector task on selected host...");
		long timeStart = System.currentTimeMillis();
		
		String hostName = InetAddress.getLocalHost().getCanonicalHostName();
		OperationHandle handle = null;
		
		// Add localhost to the database. addHost call is not blocking.
		try {
			handle = manager.addHost(hostName);
		} catch (Exception e) {
			System.err.println("Error adding localhost to the database.");
			System.err.println("Error message: " + e.getMessage());
			return;
		}
		
		System.out.println("Waiting for the host to appear in database.");

		// wait for change of host's status or until we wait too long
		waitForStatus(manager, handle, MAX_WAIT_TIME);
		
		System.out.println();
		
		long timeDelta = System.currentTimeMillis() - timeStart;
		
		System.out.println("Total time: " + timeDelta + " ms.");
		
		defaultGroup = null;
		
		// Get and write out default group.
		try {
			defaultGroup = manager.getGroup(HostGroup.DEFAULT_GROUP_NAME);
		} catch (Exception e) {
			System.err.println("Unable to query default group 2.");
			System.err.println("Error message: " + e.getMessage());
			return;
		}

		System.out.println("Default group:");
		System.out.println(defaultGroup);

		
		// now we will refresh host several times
		System.out.println("----------------------------------------------");
		System.out.println("Host refresh test");
		System.out.println("Will refresh localhost " + REFRESH_COUNT + " times.");
		System.out.println("Refresh waiting time is " + REFRESH_WAIT + " ms.");
		System.out.println();
		
		for (int i = 0; i < REFRESH_COUNT; ++i) {
			System.out.println("Refresh " + (i + 1));
			
			try {
				handle = manager.refreshHost(hostName);
			} catch (Exception e) {
				System.err.println("Refresh failed.");
				System.err.println("Error message: " + e.getMessage());
			}

			waitForStatus(manager, handle, REFRESH_WAIT);
		}
!!!390786.java!!!	waitForStatus(inout manager : HostManagerInterface, inout handle : OperationHandle, in timeOut : long) : HostOperationStatus

		long timeStart = System.currentTimeMillis();
		
		HostOperationStatus opStatus = null;
		
		do {
			try {
				Thread.sleep(1000);
			} catch (Exception e) {
				// nothing to do
			}
			
			// get status of add operation
			try {
				opStatus = manager.getOperationStatus(handle);
			} catch (Exception e) {
				System.err.println("Invalid operation handle.");
				System.err.println("Error message: " + e.getMessage());
				return null;
			}

			// write info about status
			System.out.println("Time: " + (System.currentTimeMillis() - timeStart)
			                 + ", Status: " + opStatus.getStatus()
			                 + ", Message: " + opStatus.getMessage());
			
			// operation failed -> exit
			if (opStatus.getStatus() == HostOperationStatus.Status.FAILED) {
				return opStatus;
			}
		} while (!(opStatus.getStatus() == HostOperationStatus.Status.SUCCESS)
				 && (System.currentTimeMillis() < timeStart + timeOut));
		
		// now remove status info since we do not need it anymore
		try {
			manager.removeOperationStatus(handle);
		} catch (Exception e) {
			System.err.println("Error removing status info.");
			System.err.println("Error message: " + e.getMessage());
		}

		return opStatus;
