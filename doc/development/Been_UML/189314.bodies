class LoadCollector
!!!546690.java!!!	LoadCollector()
	
!!!546818.java!!!	getInstance() : LoadCollector
		if (loadCollectorInstance == null) {
			return new LoadCollector();
		} else {
			return loadCollectorInstance;
		}
!!!546946.java!!!	initialize(inout database : Database, inout binaryEntityManager : BinaryEntityManager) : void
		LoadCollector.database = database;
		
		LoadCollector.binaryEntityManager = binaryEntityManager;
!!!547074.java!!!	initLoadUpload(inout aid : AID, inout eid : EID, inout bid : BID, inout rid : RID) : void
		
		String loadDir = database.getLoadDirectory(aid, eid, bid) + File.separator + rid.toString();
		
		File loadFile = new File(loadDir);

		if (!loadFile.exists()) {
			if (!loadFile.mkdir()) {
				Logger.logError("I/O: Unable to create directory for load information for " 
						+ Database.getRunReferenceString(aid, eid, bid, rid) + ".");
			}
		}
		
!!!547202.java!!!	closeLoadUpload(inout aid : AID, inout eid : EID, inout bid : BID, inout rid : RID, inout valid : boolean) : void
		
		if (!valid) {
			String loadDir = database.getLoadDirectory(aid, eid, bid) + File.separator + rid.toString();
			File loadFile = new File(loadDir);
			
			Database.eraseDirectoryRecursively(loadFile);
		} 
		
!!!547330.java!!!	uploadLoadInfo(inout aid : AID, inout eid : EID, inout bid : BID, inout rid : RID, in filename : String, in host : String, in port : int, inout blocking : boolean) : UploadHandle
		
		binaryEntityManager.ensureValidBid(aid, eid, bid);
		
		String dirToStore = database.getLoadDirectory(aid, eid, bid) + File.separator +
			rid.toString() + File.separator + host;
		File dirFile = new File(dirToStore);
		
		if (!dirFile.exists()) {
			if (!dirFile.mkdirs()) {
				throw new IOException("Error creating directory for storing load information - " 
						+ Database.getRunReferenceString(aid, eid, bid, rid));
			}
		}
		
		String fileToStore = dirToStore + File.separator + filename;
		
		return database.uploadFile(fileToStore, host, port, blocking, false, null, null);
