class ServicesModule
!!!785922.java!!!	ServicesModule()
		super();
		
		/* Initialize general module info... */
		id = "services";
		name = "Services";
		defaultAction = "list";
		
		menu = new MenuItem[] {
				new MenuItem("list", "Services"), 
		};

		eventManager.registerEventListener(this);
!!!786050.java!!!	getInstance() : ServicesModule
		if (instance == null) {
			 instance = new ServicesModule();
		}
		return instance;
!!!786178.java!!!	ensureAndGetService(inout request : HttpServletRequest) : ServiceInfo
		String result = request.getParameter("service");
		for (ServiceInfo service: services) {
			if (service.getName().equals(result)) {
				return service;
			}
		}
		params.ensureCondition("service", false);
		return null; // to shut up the compiler
!!!786306.java!!!	invokeMethodForAction(inout request : HttpServletRequest, inout response : HttpServletResponse, in action : String) : void
		super.invokeMethodForAction(request, response, action);
!!!786434.java!!!	getServiceControlInterface(in serviceName : String) : ServiceControlInterface
		ServiceControlInterface result;
		try {
			result = (ServiceControlInterface) taskManager.get().serviceFind(
				serviceName,
				Service.RMI_CONTROL_IFACE
			);
		} catch (RemoteException e) {
			throw new ComponentInitializationException(
				"Can't connect to the RMI registry. Make sure the RMI registry is running and correctly configured.",
				e);
		}
		if (result != null) {
			return result;
		} else {
			throw new ComponentInitializationException("Can't find service \""
				+ serviceName + "\".");
		}
!!!786562.java!!!	waitForStatus(inout service : ServiceInfo, inout status : Status) : boolean
		long t = new Date().getTime();
		boolean statusMatches;
		boolean timeoutReached;
		
		do {
			service.fillHostAndStatus(taskManager.get());
			statusMatches = (status == null && service.getStatus() == null)
			  || (status != null && status.equals(service.getStatus()));
			timeoutReached = new Date().getTime() > t + SERVICE_OPERATION_TIMEOUT;
			
			/* If we won't exit the loop, sleep for a while. */
			if (!timeoutReached && !statusMatches) {
				try {
					Thread.sleep(STATUS_WAIT_SLEEP_TIME);
				} catch (InterruptedException e) {
					/* If we're interrupted, we don't care. */
				}
			}
		} while (!timeoutReached && !statusMatches);
		
		return !timeoutReached;
!!!786690.java!!!	receiveEvent(inout event : Event) : void
		taskManager.drop();
		resultsRepository.drop();
!!!786818.java!!!	startService(inout service : ServiceInfo, in host : String, inout debug : boolean) : boolean
		TaskDescriptor taskDescriptor = TaskDescriptor.createBootTask(service.getName(), host);
		taskDescriptor.setJavaOptions("-ea", true); /* Enable assertions. */
		if (debug) {
			taskDescriptor.setJavaOptions(
				"-Xdebug -Xrunjdwp:transport=dt_socket,address=8000,suspend=y,server=y",
				true
			);
		}
		
		/* After stopping, the service's task hangs out for a while before it
		 * terminates (see Service class, especially exitDelayed method). If the 
		 * user presses the "Start" button in this time, Task Manager will complain
		 * (= throw IllegalArgumentException). We catch this exception and try to
		 * resubmit service's task.
		 * 
		 * I know this is not ideal solution (IllegalArgumentException thrown for
		 * ather reasons may be hidden, active waiting is bad...), but there is no
		 * time for something more clever.
		 */
		boolean needsRetry;
		do {
			needsRetry = false;
			try {
				taskManager.get().runTask(taskDescriptor);
			} catch (IllegalArgumentException e) {
				needsRetry = true;
			} catch (RemoteException e) {
				/* Deal with Tonda's stupid exceptions... */
				Throwable cause = e;
				while (true) {
					if (cause.getCause() != null) {
						cause = cause.getCause();
					} else {
						break;
					}
				}
				if (cause != null && cause instanceof TaskManagerException) {
					throw (TaskManagerException) cause;
				} else {
					throw e;
				}
			}
			if (needsRetry) {
				try {
					Thread.sleep(SERVICE_TASK_FINISH_WAIT_SLEEP_TIME);
				} catch (InterruptedException e) {
					/* We don't care. */
				}
			}
		} while (needsRetry);
		
		return waitForStatus(service, Status.RUNNING);
!!!786946.java!!!	handleServiceStart(inout request : HttpServletRequest, inout debug : boolean) : boolean
		boolean result = false;
		
		params.ensureExist("service", "host");
		
		ServiceInfo service = ensureAndGetService(request);
		
		params.checkCondition(params.notEmpty("host"), "Enter non-empty host.");
		try {
			InetAddress.getByName(request.getParameter("host"));
		} catch (UnknownHostException e) {
			params.checkCondition(false, "Unknown host: " + request.getParameter("host") + ".");
		}
		
		if (errorMessages.isEmpty()) {
			try {
				HashMap<String, String> actionParams = new HashMap<String, String>();
				if (startService(service, request.getParameter("host"), debug)) {
					eventManager.sendEvent(Event.SERVICE_STATUS_CHANGE);
				
					actionParams.put("action", "started");
					page.redirectToAction("list", actionParams);
				} else {
					actionParams.put("action", "not-started");
					page.redirectToAction("list", actionParams);
				}
				result = true;
			} catch (TaskDescriptorException e) {
				errorMessages.addTextMessage(
					"Can't create task descriptor for the service: "
					+ e.getMessage());
			} catch (TaskManagerException e) {
				errorMessages.addTextMessage("Can't start  the service: "
					+ e.getMessage());
			}
		}
		
		return result;
!!!787074.java!!!	handleServiceStop(inout request : HttpServletRequest) : boolean
		boolean result = false;

		params.ensureExists("service");
		
		ServiceInfo service = ensureAndGetService(request);
		
		try {
			ServiceControlInterface controlInterface = getServiceControlInterface(
					service.getName()
			);
			try {
				controlInterface.stopService();

				HashMap<String, String> actionParams = new HashMap<String, String>();
				if (waitForStatus(service, null)) {
					eventManager.sendEvent(Event.SERVICE_STATUS_CHANGE);

					actionParams.put("action", "stopped");
					page.redirectToAction("list", actionParams);
				} else {
					actionParams.put("action", "not-stopped");
					page.redirectToAction("list", actionParams);
				}
				result = true;
			} catch (RemoteException e) {
				errorMessages.addTextMessage(e.getMessage());
			} catch (InvalidServiceStateException e) {
				errorMessages.addTextMessage(e.getMessage());
			} catch (TaskException e) {
				errorMessages.addTextMessage(e.getMessage());
			}
		} catch (ComponentInitializationException e) {
			errorMessages.addTextMessage(e.getMessage());
		}
	
		return result;
!!!787202.java!!!	handleServiceRestart(inout request : HttpServletRequest) : boolean
		boolean result = false;

		params.ensureExists("service");
		
		ServiceInfo service = ensureAndGetService(request);
		String host = service.getHost();
		
		try {
			ServiceControlInterface controlInterface = getServiceControlInterface(
				service.getName()
			);
			try {
				controlInterface.stopService();

				HashMap<String, String> actionParams = new HashMap<String, String>();
				if (waitForStatus(service, null)) {
					eventManager.sendEvent(Event.SERVICE_STATUS_CHANGE);
					if (startService(service, host, false)) {
						eventManager.sendEvent(Event.SERVICE_STATUS_CHANGE);
					
						actionParams.put("action", "restarted");
						page.redirectToAction("list", actionParams);
					} else {
						actionParams.put("action", "not-restarted");
						page.redirectToAction("list", actionParams);
					}
					result = true;
				} else {
					actionParams.put("action", "not-restarted");
					page.redirectToAction("list", actionParams);
				}
			} catch (TaskDescriptorException e) {
				errorMessages.addTextMessage(
					"Can't create task descriptor for the service: "
					+ e.getMessage());
			} catch (TaskManagerException e) {
				errorMessages.addTextMessage("Can't start  the service: "
					+ e.getMessage());
			} catch (RemoteException e) {
				errorMessages.addTextMessage(e.getMessage());
			} catch (InvalidServiceStateException e) {
				errorMessages.addTextMessage(e.getMessage());
			} catch (TaskException e) {
				errorMessages.addTextMessage(e.getMessage());
			}
		} catch (ComponentInitializationException e) {
			errorMessages.addTextMessage(e.getMessage());
		}

		return result;
!!!787330.java!!!	handleStartAllOnLocalhost(inout request : HttpServletRequest) : boolean
		boolean result = true;
		
		boolean allServicesStarted = true;
		for (ServiceInfo service: services) {
			service.fillHostAndStatus(taskManager.get());
			if (service.getStatus() == null) {
				try {
					if (startService(service, "localhost", false)) {
						eventManager.sendEvent(Event.SERVICE_STATUS_CHANGE);
					} else {
						allServicesStarted = false;
					}
				} catch (TaskManagerException e) {
					errorMessages.addTextMessage("Can't start  the service: "
						+ e.getMessage());
					result = false;
				} catch (TaskDescriptorException e) {
					errorMessages.addTextMessage(
						"Can't create task descriptor for the service: "
						+ e.getMessage());
					result = false;
				}
			}
		}

		HashMap<String, String> actionParams = new HashMap<String, String>();
		if (allServicesStarted) {
			actionParams.put("action", "all-started");
			page.redirectToAction("list", actionParams);
		} else {
			actionParams.put("action", "some-not-started");
			page.redirectToAction("list", actionParams);
		}
		
		return result;
!!!787458.java!!!	handleStopAll(inout request : HttpServletRequest) : boolean
		boolean result = true;

		boolean allServicesStopped = true;
		for (ServiceInfo service: services) {
			service.fillHostAndStatus(taskManager.get());
			if (service.getStatus() == ServiceInfo.Status.RUNNING) {
				try {
					ServiceControlInterface controlInterface = getServiceControlInterface(
							service.getName()
					);
					try {
						controlInterface.stopService();

						if (waitForStatus(service, null)) {
							eventManager.sendEvent(Event.SERVICE_STATUS_CHANGE);
						} else {
							allServicesStopped = false;
						}
					} catch (InvalidServiceStateException e) {
						errorMessages.addTextMessage(e.getMessage());
						result = false;
					} catch (TaskException e) {
						errorMessages.addTextMessage(e.getMessage());
						result = false;
					}
				} catch (ComponentInitializationException e) {
					errorMessages.addTextMessage(e.getMessage());
					result = false;
				}
			}
		}

		HashMap<String, String> actionParams = new HashMap<String, String>();
		if (allServicesStopped) {
			actionParams.put("action", "all-stopped");
			page.redirectToAction("list", actionParams);
		} else {
			actionParams.put("action", "some-not-stopped");
			page.redirectToAction("list", actionParams);
		}

		return result;
!!!787586.java!!!	list(inout request : HttpServletRequest, inout response : HttpServletResponse) : void
		try {
			ResultsModule.getInstance().testRScriptingEnabled();
		} catch (ComponentInitializationException e) {
			/* We don't care if the Results Repository is not available of the RMI
			 * call fails. 
			 */
		} catch (RemoteException e) {
			/* We don't care if the Results Repository is not available of the RMI
			 * call fails. 
			 */
		}
		
		if (params.exists("action")) {
			String action = request.getParameter("action");
			if (action.equals("started")) {
				infoMessages.addTextMessage("Service started successfully.");
			} else if (action.equals("all-started")) {
				infoMessages.addTextMessage("All services started successfully.");
			} else if (action.equals("stopped")) {
				infoMessages.addTextMessage("Service stopped successfully.");
			} else if (action.equals("all-stopped")) {
				infoMessages.addTextMessage("All services stopped successfully.");
			} else if (action.equals("restarted")) {
				infoMessages.addTextMessage("Service restarted successfully.");
			} else if (action.equals("not-started")) {
				errorMessages.addTextMessage("Service was not started successfully in allowed time ("
					+ (SERVICE_OPERATION_TIMEOUT / MILISECONDS_IN_SECOND) + " seconds).");
			} else if (action.equals("some-not-started")) {
				errorMessages.addTextMessage("Some services were not started successfully in allowed time ("
					+ (SERVICE_OPERATION_TIMEOUT / MILISECONDS_IN_SECOND) + " seconds).");
			} else if (action.equals("not-stopped")) {
				errorMessages.addTextMessage("Service was not stopped successfully in allowed time ("
						+ (SERVICE_OPERATION_TIMEOUT / MILISECONDS_IN_SECOND) + " seconds).");
			} else if (action.equals("some-not-stopped")) {
				errorMessages.addTextMessage("Some services were not stopped successfully in allowed time ("
					+ (SERVICE_OPERATION_TIMEOUT / MILISECONDS_IN_SECOND) + " seconds).");
			} else if (action.equals("not-restarted")) {
				errorMessages.addTextMessage("Service was not restarted successfully in allowed time ("
						+ (SERVICE_OPERATION_TIMEOUT / MILISECONDS_IN_SECOND) + " seconds).");
			} else {
				throw new InvalidParamValueException("Parameter \"action\" has invalid value.");
			}
		}
		
		if (params.exists("start")) {
			if (handleServiceStart(request, false)) {
				return;
			}
		}

		if (params.exists("start-debug")) {
			if (handleServiceStart(request, true)) {
				return;
			}
		}

		if (params.exists("stop")) {
			if (handleServiceStop(request)) {
				return;
			}
		}
		
		if (params.exists("restart")) {
			if (handleServiceRestart(request)) {
				return;
			}
		}

		if (params.exists("start-all-on-localhost")) {
			if (handleStartAllOnLocalhost(request)) {
				return;
			}
		}

		if (params.exists("stop-all")) {
			if (handleStopAll(request)) {
				return;
			}
		}

		for (ServiceInfo serviceInfo: services) {
			serviceInfo.fillHostAndStatus(taskManager.get());
		}

		HashMap<String, Object> data = new HashMap<String, Object>();
		data.put("services", services);
		Config config = Config.getInstance();
		data.put("showDebugOptions", config.getShowDebugOptions());
		if (config.getShowDebugOptions()) {
			data.put("taskManagerHostname", config.getTaskManagerHostname());
		}
		
		page.setTitle("Services");
		page.writeHeader();
		page.writeTemplate("services-list", data);
		page.writeFooter();
!!!787714.java!!!	logs(inout request : HttpServletRequest, inout response : HttpServletResponse) : void
		params.ensureExists("service");
		ServiceInfo service = ensureAndGetService(request);
		
		LogRecord[] logRecords = new LogRecord[] {};
		OutputHandle standardOutputHandle = null;
		OutputHandle errorOutputHandle = null;
		try {
			if (taskManager.get().isContextRegistered(TaskManagerInterface.SYSTEM_CONTEXT_ID)
					&& taskManager.get().isTaskRegistered(TaskManagerInterface.SYSTEM_CONTEXT_ID, service.getTid())) {
				logRecords = taskManager.get()
					.getLogsForTask(TaskManagerInterface.SYSTEM_CONTEXT_ID, service.getTid());
				standardOutputHandle = taskManager.get()
					.getStandardOutput(TaskManagerInterface.SYSTEM_CONTEXT_ID, service.getTid());
				errorOutputHandle = taskManager.get()
					.getErrorOutput(TaskManagerInterface.SYSTEM_CONTEXT_ID, service.getTid());
			}
		} catch (LogStorageException e) {
			errorMessages.addTextMessage("Error retrieving logs: " + e.getMessage());
		}

		HashMap<String, Object> data = new HashMap<String, Object>();
		data.put("logRecords", logRecords);
		data.put("logFields", EnumSet.of(
			LogRecord.Fields.HOSTNAME,
			LogRecord.Fields.TIMESTAMP,
			LogRecord.Fields.LEVEL,
			LogRecord.Fields.MESSAGE
		));
		data.put("standardOutputHandle", standardOutputHandle);
		data.put("errorOutputHandle", errorOutputHandle);

		page.setTitle("Service logs: " + service.getHumanName());
		page.writeHeader();
		page.writeTemplate("services-logs", data);
		page.writeFooter();
