class ValueRange
!!!461954.java!!!	ValueRange()
		
		valueMin = valueMax = null;
!!!462082.java!!!	ValueRange(inout min : T, inout max : T)
		
		valueMin = min;
		valueMax = max;
		
		leftOpen = rightOpen = false;
		
		if (valueMin == null) {
			leftOpen = true;
		}
		
		if (valueMax == null) {
			rightOpen = true;
		}
!!!462210.java!!!	ValueRange(inout min : T, inout max : T, inout leftOpen : boolean, inout rightOpen : boolean)
		
		valueMin = min;
		valueMax = max;
		
		this.leftOpen = leftOpen;
		this.rightOpen = rightOpen;

		if (valueMin == null) {
			this.leftOpen = true;
		}
		
		if (valueMax == null) {
			this.rightOpen = true;
		}
!!!462338.java!!!	ValueRange(inout node : Node)
		
		parseXMLNode(node);
!!!462466.java!!!	toString() : String
		
		String left = valueMin == null ? "-infinity" : valueMin.toString();
		String right = valueMax == null ? "+infinity" : valueMax.toString();
		
		return  (leftOpen ? "(" : "[") + left + "," + right + (rightOpen ? ")" : "]");
!!!462594.java!!!	contains(inout elem : T) : boolean
		
		if ((valueMin == null) && (valueMax == null)) { 
			// whole space, both boundaries are null
			return true;
		}
		
		boolean leftCond = false;
		boolean rightCond = false;
		
		if (valueMin == null) {
			leftCond = true;
		} else {
			if (leftOpen) {
				leftCond = elem.greaterThan(valueMin);
			} else {
				leftCond = elem.greaterThan(valueMin) || elem.equals(valueMin);
			}
		}
		
		if (valueMax == null) {
			rightCond = true;
		} else {
			if (rightOpen) {
				rightCond = elem.lessThan(valueMax);
			} else {
				rightCond = elem.lessThan(valueMax) || elem.equals(valueMax);
			}
		}
		
		return leftCond && rightCond;
!!!462722.java!!!	equals(inout o : Object) : boolean
		
		if (o instanceof ValueRange) {
			try {
				return equals((ValueRange) o);
			} catch (ValueTypeIncorrectException e) {
				return false;
			}
		} else {
			return false;
		}
!!!462850.java!!!	equals(inout vc : ValueRange) : boolean
		
		boolean res = true;
		
		if (valueMin != null) {
			res &= valueMin.equals(vc.valueMin); 
		} else {
			res &= (vc.valueMin == null);
		}
		
		if (valueMax != null) {
			res &= valueMax.equals(vc.valueMax);
		} else {
			res &= (vc.valueMax == null);
		}
		
		res &= (leftOpen == vc.leftOpen) & (rightOpen == vc.rightOpen);
		
		return res;
!!!462978.java!!!	isLeftOpen() : boolean
		
		return leftOpen;
!!!463106.java!!!	isRightOpen() : boolean
		
		return rightOpen;
!!!463234.java!!!	setLeftOpen(inout open : boolean) : void
		
		leftOpen = open;
		
		if (!leftOpen && (valueMin == null)) {
			leftOpen = true;
		}
!!!463362.java!!!	setRightOpen(inout open : boolean) : void
		
		rightOpen = open;
		
		if (!rightOpen && (valueMax == null)) {
			rightOpen = true;
		}
!!!463490.java!!!	hashCode() : int
		
		return toString().hashCode();
!!!463618.java!!!	parseXMLNode(inout node : Node) : void

		if (!node.getNodeName().equals(getXMLNodeName())) {
			throw new InputParseException("Node does not contain range data. Node name is \""
					+ node.getNodeName() + "\".");
		}
		
		String elementClassName = XMLHelper.getAttributeValueByName("subtype", node);

		if (elementClassName.equals(EMPTY_CLASS_NAME)) {
			// both endpoints are null
			valueMin = valueMax = null;
			leftOpen = rightOpen = true;
		} else {
			valueMax = valueMin = null;
			leftOpen = rightOpen = true;

			if (XMLHelper.hasSubNode("min", node)) {
				// load lower bound data
				Node min = null;
				
				try {
					min = XMLHelper.getSubNodeByName("min", node);
				} catch (Exception e) {
					assert false : "Node has mysteriously disapperead.";
				}

				leftOpen = XMLHelper.getAttributeValueByName("open", min).equals("yes");
				
				try {
					valueMin = (T) Class.forName(elementClassName).newInstance();
				} catch (Exception e) {
					throw new InputParseException("Unable to create instance of the lower bound class.", e);
				}
				
				try {
					valueMin.parseXMLNode(XMLHelper.getSubNodeByName(valueMin.getXMLNodeName(), min));
				} catch (NullPointerException e) {
					throw new InputParseException("Error parsing lower bound data.", e);
				}
			}
			
			if (XMLHelper.hasSubNode("max", node)) {
				// load upper bound data
				Node max = null;
				
				try {
					max = XMLHelper.getSubNodeByName("max", node);
				} catch (Exception e) {
					assert false : "Node has mysteriously disapperead.";
				}

				rightOpen = XMLHelper.getAttributeValueByName("open", max).equals("yes");
				
				try {
					valueMax = (T) Class.forName(elementClassName).newInstance();
				} catch (Exception e) {
					throw new InputParseException("Unable to create instance of the upper bound class.", e);
				}
				
				try {
					valueMax.parseXMLNode(XMLHelper.getSubNodeByName(valueMax.getXMLNodeName(), max));
				} catch (NullPointerException e) {
					throw new InputParseException("Error parsing upper bound data.", e);
				}
			}
		}
!!!463746.java!!!	exportAsElement(inout document : Document) : Element
		
		/* Resulting node
		 * 
		 * <range subtype="<subtype-name>">
		 *    <left open="<is-open>">
		 *       <subtypenode/>
		 *    </left>
		 *    <right open="<is-open>">
		 *       <subtypenode/>
		 *    </right>
		 * </range>
		 * 
		 * where <subtype-name> is canonical name of the endpoints class,
		 * <is-open> is either "yes" if given side of the range is open or "no" if it is closed,
		 * <subtypenode> is serialised node of the subtype (for more info about these see serialisation
		 * methods for ValueInteger, ValueBoolean, ValueString and ValueRegexp).
		 * If one of the endpoints is null, node for that endpoint is not present.
		 */
		
		Element element = document.createElement(getXMLNodeName());

		String elementClassName = EMPTY_CLASS_NAME;
		
		if (valueMin != null) {
			elementClassName = valueMin.getClass().getCanonicalName();
		} else if (valueMax != null) {
			elementClassName = valueMax.getClass().getCanonicalName();
		}
		
		element.setAttribute("subtype", elementClassName);
		
		if (valueMin != null) {
			Element min = document.createElement("min");
			
			min.setAttribute("open", leftOpen ? "yes" : "no");
			element.appendChild(min);
			
			min.appendChild(valueMin.exportAsElement(document));
		}
		
		if (valueMax != null) {
			Element max = document.createElement("max");
			
			max.setAttribute("open", rightOpen ? "yes" : "no");
			element.appendChild(max);
			
			max.appendChild(valueMax.exportAsElement(document));
		}

		return element;
!!!463874.java!!!	getXMLNodeName() : String
		
		return "range";
!!!464002.java!!!	getMaxValue() : T
		
		return valueMax;
!!!464130.java!!!	setMaxValue(inout valueMax : T) : void
		
		this.valueMax = valueMax;
!!!464258.java!!!	getMinValue() : T
		
		return valueMin;
!!!464386.java!!!	setMinValue(inout valueMin : T) : void
		
		this.valueMin = valueMin;
