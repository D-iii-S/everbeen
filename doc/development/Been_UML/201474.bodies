class OmniOrbLinuxCompile
!!!644738.java!!!	OmniOrbLinuxCompile()
		super();
!!!644866.java!!!	run() : void
	
		try {
			
			// dearchive the source
			dearchive();

			// determine the root directory for dearchived sources
			baseName = findSourceRoot();
			logDebug("Sources root directory set to: " + baseName);
			
			// create build directory
			createBuildDir();
			
			// set execute permission on configure script
			chmodBinDir();
			
			// run configure script
			runConfigure();
			
			// build omniorb
			runBuild();
			
			// install
			runInstall();
			
		} catch (BeenException e) {
			throw new TaskException("Build failed", e);
		} catch (InterruptedException e) {
			throw new TaskException("Build failed", e);
		} catch (IOException e) {
			throw new TaskException("Build failed", e);
		} 
		
!!!644994.java!!!	dearchive() : void
		File sourceDir = new File(getTaskProperty(PROPERTY_SOURCE_DIR));
		// existence checked in task initialization
		String fileName = sourceDir.list()[0];
		File absoluteFile = new File(sourceDir, fileName);
		Untar.untar(absoluteFile.getAbsolutePath(), getTempDirectory(), "gzip");
!!!645122.java!!!	createBuildDir() : void
		File f = new File(getTempDirectory(), "build");
		f.mkdir();
!!!645250.java!!!	chmodBinDir() : void
		String binDir = getTempDirectory() + File.separatorChar
			+	baseName + File.separatorChar + "bin";
		logDebug("Changing permissions for " + binDir);
		Chmod.recursiveDirectoryChmod(binDir, "ugo+rx");
!!!645378.java!!!	runConfigure() : void
		logDebug("Running configure script");
		
		String configScript = getTempDirectory() + File.separatorChar 
			+ baseName + File.separatorChar + "configure";
		Chmod.chmod(configScript, "ugo+rx");
		
		
		String prefix = getWorkingDirectory() +  File.separatorChar
			+ getTaskProperty(PROPERTY_OMNIORB_ROOT);
		
		try {
			int result = runCommand(configScript,
					new String[]{
					"--prefix=" + prefix,
					"--with-omniORB-config=omniORB.cfg",
					"--with-omniNames-logdir=log"
			});
		
			if (result != 0) {
				logFatal("Configure script failed, see log for details");
			}
		} catch (InterruptedException e) {
			throw new InterruptedException("Configure script interrupted");
		}		
!!!645506.java!!!	runBuild() : void
		logDebug("Running compilation");
		try {
			int result = runCommand("make", null);
		
			if (result != 0) {
				logFatal("'make' failed, see log for details");
			}
		} catch (InterruptedException e) {
			throw new InterruptedException("'make' interrupted");
		}
		logDebug("Build finished");
!!!645634.java!!!	runInstall() : void
		logDebug("Running installation");
		try {
			int result = runCommand("make", new String[]{"install"});
		
			if (result != 0) {
				logFatal("'install' failed, see log for details");
			}
		} catch (InterruptedException e) {
			throw new InterruptedException("'install' interrupted");
		}
		logDebug("Installation finished");
!!!645762.java!!!	runCommand(in command : String, in params : String) : int
		ProcessBuilder procBuilder = new ProcessBuilder();
		procBuilder.directory(new File(getTempDirectory(), "build"));
		
		int cmdArrayLength = params == null ? 1 : params.length + 1;
		String[] cmdArray = new String[cmdArrayLength];
		cmdArray[0] = command;
		if (params != null) {
			System.arraycopy(params, 0, cmdArray, 1, params.length);
		}
		
		procBuilder.command(cmdArray);
		
		Process p = procBuilder.start();
		
		OutputReader stdOutReader = new OutputReader(p.getInputStream(), OutputType.STDOUT);
		stdOutReader.setOutputStream(System.out);
		stdOutReader.start();
		OutputReader stdErrReader = new OutputReader(p.getErrorStream(), OutputType.STDERR);
		stdErrReader.setOutputStream(System.err);
		stdErrReader.start();
		
		int result = -1;
		try {
			result = p.waitFor();
		} catch (InterruptedException e) {
			p.destroy();
			throw e;
		} finally {
			// stop reader threads in any case
			
			if (stdOutReader.isAlive()) {
				stdOutReader.interrupt();
			}
			if (stdErrReader.isAlive()) {
				stdErrReader.interrupt();
			}
		}
		
		return result;
!!!645890.java!!!	findSourceRoot() : String
		File tempDir = new File(getTempDirectory());
		for (File candidate : tempDir.listFiles()) {
			if (candidate.isDirectory()) {
				return candidate.getName();
			}
		}
		throw new TaskException("Incorrect omniorb package format (must use single directory)");
!!!646018.java!!!	checkRequiredProperties() : void
		if (StringUtils.isEmpty(getTaskProperty(PROPERTY_OMNIORB_ROOT))) {
			throw new TaskException(PROPERTY_OMNIORB_ROOT
				+ " property not set");
		}
		
		if (StringUtils.isEmpty(getTaskProperty(PROPERTY_SOURCE_DIR))) {
			throw new TaskException(PROPERTY_SOURCE_DIR 
				+ " property not set");
		}
		
		File sourceDir = new File(getTaskProperty(PROPERTY_SOURCE_DIR));
		if (!sourceDir.exists() || sourceDir.list().length == 0) {
			throw new TaskException("Source file does not exist in "
				+ sourceDir.getAbsolutePath());
		}
