class RManager
!!!572418.java!!!	getInstance() : RManager
		if (rpMInstance == null) {
			rpMInstance = new RManager();
		}
		return rpMInstance;
!!!572546.java!!!	initialize(inout database : Database) : void
		
		RManager.database = database;
		
		/* Initialize R help manager */
		rHelpManager = RHelpManager.getInstance();
		rHelpManager.initialize();
		try {
			rHelpManager.reloadRFunctionsHelp();
		} catch (IOException e) {
			Logger.logError(
					"Error reading help files " + e.getMessage() + ".");
		}
		
		/* Intialize callback managers */
		rCallbacksManagerFactory = RCallbacksManagerFactory.getInstance();
		rCallbacksManagerFactory.initialize();
		
		/* Try to run and int R with SJava */
		initR();
		
		/* Intialize R background script runner */
		rScriptsRunner = RScriptsRunner.getInstance();
		rScriptsRunner.initialize();
		rScriptsRunner.startBackgroundThread();
!!!572674.java!!!	shutdown() : void
		rScriptsRunner.stopBackgroundThread();
!!!572802.java!!!	rScriptingEnabled() : boolean
		return rScripts;
!!!572930.java!!!	getRScriptsRunner() : RScriptsRunner
		return rScriptsRunner;
!!!573058.java!!!	executeRCommand(in command : String) : void
		try {
			rEvaluator.voidEval(command.trim());
		} catch (Exception e) {
			Logger.logError("Exception caught when executing R: " + e.getMessage() 
					+ ", dumping stack trace.");
			e.printStackTrace();
		}
!!!573186.java!!!	initR() : void

		String[] args = new String[1];
		args[0] = "--no-save";

		rScripts = true;

		try {
			rInterpreter = new ROmegahatInterpreter(ROmegahatInterpreter
					.fixArgs(args), false);
			rEvaluator = new REvaluator();
		} catch (NoClassDefFoundError e) {
			Logger.logError(
					"R not initialized, statistics and graph counting disabled.");
			rScripts = false;
		} catch (UnsatisfiedLinkError e) {
			Logger.logError(
					"R not initialized (native R libraries could not be loaded), "
							+ "statistics and graph counting disabled.");
			rScripts = false;
		}

		if (rScripts) {
			Object[] funArgs;

			funArgs = new Object[1];
			funArgs[0] = "RNetCDF";
			rEvaluator.call("library", funArgs);

			try {
				sourceRegisteredScripts();
			} catch (ResultsRepositoryException e) {
				/*
				 * Do nothing here - exception is thrown onl if rScripts ==
				 * false;
				 */
				assert false : "rScripting is off, so it can't be on";
			}

			Logger.logInfo("R libraries initialized.");
		}

!!!573314.java!!!	sourceRegisteredScripts() : void

		File[] directoryList;

		File path = new File(database.getDatabasePath()
				+ File.separator + "rscripts");

		directoryList = path.listFiles();

		for (int i = 0; i < directoryList.length; i++) {
			Logger.logInfo(
					"R Init: Checking package: " + directoryList[i].getName() + ".");
			if (directoryList[i].isDirectory()) {

				File packagePath = directoryList[i];

				FilenameFilter fileFilter = new FilenameFilter() {
					public boolean accept(File dir, String filename) {
						return dir.isDirectory()
								&& (filename.matches(".*\\.r"));
					}
				};

				File[] packageRList = packagePath.listFiles(fileFilter);

				for (int j = 0; j < packageRList.length; j++) {
					Logger.logDebug(
							"R Init: Sourcing script: "
									+ packageRList[j].getAbsolutePath() + ".");
					initRScript(packageRList[j].getAbsolutePath());
				}

			}
		}
		
		Logger.logTrace("Database path is : " + database.getDatabasePath() + ".");
		
		executeRCommand("base.initScripts('" + database.getDatabasePath() + "')");

!!!573442.java!!!	sourceOnePackageScript(in packageName : String) : void

	    File packagePath = new File(database.getDatabasePath()
			+ File.separator + "rscripts" + File.separator + packageName);

	    if (!(packagePath.exists() && packagePath.canRead() && packagePath.isDirectory())) { 
		throw new IllegalArgumentException ("Package \"" + packageName + "\" not registered.");
	    }
            
	    FilenameFilter fileFilter = new FilenameFilter() {
		public boolean accept(File dir, String filename) {
		    return dir.isDirectory()
		    && (filename.matches(".*\\.r"));
		}
	    };
            
	    File[] packageRList = packagePath.listFiles(fileFilter);
            
	    for (int j = 0; j < packageRList.length; j++) {
		Logger.logTrace(
			"R Init: Sourcing script: "
			+ packageRList[j].getAbsolutePath() + ".");
		initRScript(packageRList[j].getAbsolutePath());
	    }
!!!573570.java!!!	initRScript(in pathToScript : String) : void

		if (!rScripts) {
			throw new ResultsRepositoryException(
					"R scripts are not turned on - R not initialized?");
		}

		executeRCommand("source('" + pathToScript + "')");
!!!573698.java!!!	uploadAndRegisterRPackge(in name : String, in host : String, in port : int) : UploadHandle

		ensureRPackageNotRegistered(name);

		if (database.isBusy()) {
			Logger.logWarning(
					"Refusing upload - too many connections (registering"
							+ "R packge: " + name + ".");

			throw new ResultsRepositoryBusyException(
					Database.TOO_MANY_CONNECTIONS_MESSAGE);
		}

		return database.uploadFile(name, host, port, false, true, null, null);
!!!573826.java!!!	isRPackageRegistered(in name : String) : boolean
		File packageDir = new File(database.getDatabasePath() + File.separator
				+ Database.RSCRIPTS_DIRECTORY + File.separator + name);
		return packageDir.exists() && packageDir.canRead()
				&& packageDir.isDirectory();
!!!573954.java!!!	ensureRPackageRegistered(in name : String) : void
		if (!isRPackageRegistered(name)) {
			throw new IllegalArgumentException("R package " + name
					+ " is not registered.");
		}
!!!574082.java!!!	ensureRPackageNotRegistered(in name : String) : void
		if (isRPackageRegistered(name)) {
			throw new IllegalArgumentException("R package " + name
					+ " is already registered.");
		}
!!!574210.java!!!	deleteRPackage(in name : String) : boolean

		ensureRPackageRegistered(name);

		boolean result = Database.eraseDirectoryRecursively(new File(database.getDatabasePath()
				+ File.separator + Database.RSCRIPTS_DIRECTORY + File.separator + name));

		if (result) {
			try {
				rHelpManager.reloadRFunctionsHelp();
			} catch (IOException e) {
				Logger.logError(
					"Error reloading help for R scripts after R packing deletion.");
			}
		}

		return result;
!!!574338.java!!!	getRejectedRPackageUploadErrorMessages(inout handle : UploadHandle) : String
		return database.getRejectedUploadErrorMessages(handle);
!!!574466.java!!!	getRScriptPackages() : RScriptPackage

		ArrayList<RScriptPackage> scriptPackages = new ArrayList<RScriptPackage>();

		File[] directoryList;

		File path = new File(database.getDatabasePath()
				+ File.separator + "rscripts");

		directoryList = path.listFiles();

		for (int i = 0; i < directoryList.length; i++) {
			if (directoryList[i].isDirectory()) {

				File packagePath = directoryList[i];

				FilenameFilter fileFilter = new FilenameFilter() {
					public boolean accept(File dir, String filename) {
						return filename.matches("description");
					}
				};

				File[] packageRList = packagePath.listFiles(fileFilter);

				String description = "";
				
				if (packageRList.length == 0) {
					continue;
				}

				try {
					
					BufferedReader inf = new BufferedReader(new FileReader(
							packageRList[0].getAbsolutePath()));
					String str;
					while ((str = inf.readLine()) != null) {
						description += str + "\n";
					}
					inf.close();
				} catch (IOException e) {
					Logger.logError(
							"Error reading description of R script "
									+ e.getMessage());
					description = "<couldn't read>";
				}

				RScriptPackage rPackage = new RScriptPackage(directoryList[i]
						.getName(), description);
				scriptPackages.add(rPackage);
			}
		}

		return scriptPackages.toArray(new RScriptPackage[] {});
!!!574594.java!!!	getAnalysisCallbackRScripts(inout aid : AID) : CallbackRScripts
		return RCallbacksManagerFactory.getRCallbacksManager(aid)
				.getCallbacks();
!!!574722.java!!!	setAnalysisCallbackRScripts(inout aid : AID, inout callbackRScripts : CallbackRScripts) : void
		database.getAnalysisEntityManager().ensureValidAid(aid);
		try {
			RCallbacksManagerFactory.getRCallbacksManager(aid).setCallbacks(
					callbackRScripts);
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
!!!574850.java!!!	setExperimentCallbackRScripts(inout aid : AID, inout eid : EID, inout callbackRScripts : CallbackRScripts) : void
		database.getExperimentEntityManager().ensureValidEid(aid, eid);
		try {
			RCallbacksManagerFactory.getRCallbacksManager(aid, eid)
					.setCallbacks(callbackRScripts);
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
!!!574978.java!!!	getRFunctionsHelp() : RFunctionHelp
		return RHelpManager.getInstance().getRFunctionsHelp();
!!!575106.java!!!	reloadRFunctionsHelp() : void
		rHelpManager.reloadRFunctionsHelp();		
