class TasksModule
!!!787970.java!!!	TasksModule()
		super();
		
		/* Initialize general module info... */
		id = "tasks";
		name = "Tasks";
		defaultAction = "context-list";
		
		menu = new MenuItem[] {
			new MenuItem("context-list", "Contexts & Tasks"), 
			new MenuItem("task-run", "Run task"), 
			new MenuItem("task-logs", "Task logs"), 
			new MenuItem("task-manager-logs", "Task Manager logs"), 
		};
		
		eventManager.registerEventListener(this);
!!!788098.java!!!	getInstance() : TasksModule
		if (instance == null) {
			 instance = new TasksModule();
		}
		return instance;
!!!788226.java!!!	receiveEvent(inout event : Event) : void
		taskManager.drop();
		softwareRepository.drop();
		hostManager.drop();
!!!788354.java!!!	invokeMethodForAction(inout request : HttpServletRequest, inout response : HttpServletResponse, in action : String) : void
		try {
			super.invokeMethodForAction(request, response, action);
		} catch (InvocationTargetException e) {
			if (e.getCause() instanceof ConnectException) {
				throw new InvocationTargetException(
					new ConnectException(
						"<strong>Can't execute remote call to the Task Manager."
						+ "</strong><br /><br />"
						+ "Try to reload the page. If the error persists after multiple reloads, "
						+ "make sure the Task Manager is running.<br /><br/>"
						+ "Most probale causes of this error are network-related problems or "
						+ "crash of the Task Manager."
					),
					e.getMessage()
				);
			} else {
				throw e;
			}
		}
!!!788482.java!!!	contextList(inout request : HttpServletRequest, inout response : HttpServletResponse) : void
		if (params.exists("action")) {
			String action = request.getParameter("action");
			if (action.equals("context-killed")) {
				infoMessages.addTextMessage("All tasks in the context killed successfully.");
			} else if (action.equals("context-deleted")) {
				infoMessages.addTextMessage("Context deleted successfully.");
			} else if (action.equals("task-killed")) {
				infoMessages.addTextMessage("Task killed successfully.");
			} else {
				throw new InvalidParamValueException("Parameter \"action\" has invalid value.");
			}
		}
		ContextEntry[] contexts = taskManager.get().getContexts();

		HashMap<String, Object> data = new HashMap<String, Object>();
		data.put("contexts", contexts);
				
		page.setTitle("Contexts");
		page.writeHeader();
		page.writeTemplate("tasks-context-list", data);
		page.writeFooter();
!!!788610.java!!!	contextDetails(inout request : HttpServletRequest, inout response : HttpServletResponse) : void
		if (params.exists("action")) {
			String action = request.getParameter("action");
			if (action.equals("task-runned")) {
				infoMessages.addTextMessage("Task runned successfully.");
			} else {
				throw new InvalidParamValueException("Parameter \"action\" has invalid value.");
			}
		}
		params.ensureExists("cid");
		
		ContextEntry context = null;
		try {
			context = taskManager.get().getContextById(request.getParameter("cid"));
		} catch (IllegalArgumentException e) {
			throw new InvalidParamValueException("Parameter \"cid\" has invalid value.");
		}
		
		TaskEntry[] tasks = taskManager.get().getTasksInContext(context.getContextId());
		Map<TaskEntry, CheckPoint[]> checkpoints = TaskUtils.getCheckPointsForTasks(
			taskManager.get(),
			tasks
		);

		HashMap<String, Object> data = new HashMap<String, Object>();
		data.put("context", context);
		data.put("tasks", tasks);
		data.put("checkpoints", checkpoints);
				
		page.setTitle("Context details: " + context.getContextId());
		page.writeHeader();
		page.writeTemplate("tasks-context-details", data);
		page.writeFooter();
!!!788738.java!!!	contextKill(inout request : HttpServletRequest, inout response : HttpServletResponse) : void
		params.ensureExists("cid");
		
		try {
			taskManager.get().killContextById(request.getParameter("cid"));
		} catch (IllegalArgumentException e) {
			throw new InvalidParamValueException("Parameter \"cid\" has invalid value.");
		}
					
		HashMap<String, String> actionParams = new HashMap<String, String>();
		actionParams.put("action", "context-killed");
		page.redirectToAction("context-list", actionParams);
!!!788866.java!!!	contextDelete(inout request : HttpServletRequest, inout response : HttpServletResponse) : void
		params.ensureExists("cid");
		params.ensureCondition("cid",
			!request.getParameter("cid").equals(TaskManagerInterface.SYSTEM_CONTEXT_ID));
		
		try {
			taskManager.get().deleteContext(request.getParameter("cid"));
		} catch (IllegalArgumentException e) {
			throw new InvalidParamValueException("Parameter \"cid\" has invalid value.");
		}
					
		HashMap<String, String> actionParams = new HashMap<String, String>();
		actionParams.put("action", "context-deleted");
		page.redirectToAction("context-list", actionParams);
!!!788994.java!!!	taskDetails(inout request : HttpServletRequest, inout response : HttpServletResponse) : void
		params.ensureExist("tid", "cid");
		
		TaskEntry task = null;
		CheckPoint[] checkpoints = null;
		LogRecord[] logRecords = null;
		OutputHandle standardOutputHandle = null;
		OutputHandle errorOutputHandle = null;
		try {
			task = taskManager.get().getTaskById(
				request.getParameter("tid"),
				request.getParameter("cid")
			);
			try {
				checkpoints = taskManager.get().checkPointLook(
					new CheckPoint(task.getTaskId(), task.getContextId(), null, null),
					0
				);
			} catch (TaskManagerException e) {
				errorMessages.addTextMessage("Error retrieving checkpoints: " + e.getMessage());
				checkpoints = new CheckPoint[0];
			}
			
			try {
				logRecords = taskManager.get()
					.getLogsForTask(task.getContextId(), task.getTaskId());
				standardOutputHandle = taskManager.get()
					.getStandardOutput(task.getContextId(), task.getTaskId());
				errorOutputHandle = taskManager.get()
					.getErrorOutput(task.getContextId(), task.getTaskId());
			} catch (LogStorageException e) {
				errorMessages.addTextMessage("Error retrieving logs: " + e.getMessage());
			}
		} catch (IllegalArgumentException e) {
			throw new InvalidParamValueException("Parameter \"cid\" or \"tid\" has invalid value.");
		}
					
		HashMap<String, Object> data = new HashMap<String, Object>();
		data.put("task", task);
		data.put("checkpoints", checkpoints);
		data.put("logRecords", logRecords);
		data.put("logFields", EnumSet.of(
			LogRecord.Fields.TIMESTAMP,
			LogRecord.Fields.LEVEL,
			LogRecord.Fields.MESSAGE
		));
		data.put("standardOutputHandle", standardOutputHandle);
		data.put("errorOutputHandle", errorOutputHandle);
				
		page.setTitle("Task details: " + task.getTaskId());
		page.writeHeader();
		page.writeTemplate("tasks-task-details", data);
		page.writeFooter();
!!!789122.java!!!	taskKill(inout request : HttpServletRequest, inout response : HttpServletResponse) : void
		params.ensureExist("cid", "tid");
		
		try {
			taskManager.get().killTaskById(
				request.getParameter("tid"),
				request.getParameter("cid")
			);
		} catch (IllegalArgumentException e) {
			throw new InvalidParamValueException("Parameter \"cid\" or \"tid\" has "
				+ "invalid value.");
		}
					
		HashMap<String, String> actionParams = new HashMap<String, String>();
		actionParams.put("action", "task-killed");
		page.redirectToAction("context-list", actionParams);
!!!789250.java!!!	checkProperties(inout request : HttpServletRequest) : void
		String propertiesString = request.getParameter("properties");
		String[] propertiesArray = propertiesString.split("\n");
		boolean wasError = false;
		for (String property: propertiesArray) {
			property = Routines.trim(property);
			if (property.equals("")) {
				continue;
			}
			String[] propertyParts = property.split("=");
			if (propertyParts.length != 2) {
				wasError = true;
			}
		}
		params.checkCondition(!wasError, "Properties must be formatted correctly.");
!!!789378.java!!!	getProperties(inout request : HttpServletRequest) : Map<String, String>
		Map<String, String> result = new HashMap<String, String>();
		String propertiesString = request.getParameter("properties");
		String[] propertiesArray = propertiesString.split("\n");
		for (String property: propertiesArray) {
			property = Routines.trim(property);
			if (property.equals("")) {
				continue;
			}
			String[] propertyParts = property.split("=");
			result.put(
				Routines.trim(propertyParts[0]),
				Routines.trim(propertyParts[1])
			);
		}
		return result;
!!!789506.java!!!	taskRun(inout request : HttpServletRequest, inout response : HttpServletResponse) : void
		HashMap<String, Object> data = new HashMap<String, Object>();

		if (params.exists("run")) {
			params.ensureExists("task-run-type");
			
			Set<String> taskRunTypes = new HashSet<String>();
			taskRunTypes.add(TASK_RUN_TYPE_GUI);
			taskRunTypes.add(TASK_RUN_TYPE_XML);
			params.ensureCondition("task-run-type",
				params.isInSet("task-run-type", taskRunTypes));

			if (request.getParameter("task-run-type").equals(TASK_RUN_TYPE_GUI)) {
				params.ensureExist("properties");
			} else if (request.getParameter("task-run-type").equals(TASK_RUN_TYPE_XML)) {
				params.ensureExist("xml");
			} else {
				assert false: "Impossible things happen sometimes :-)";
			}
			
			if (request.getParameter("task-run-type").equals(TASK_RUN_TYPE_GUI)) {
				params.checkCondition(params.exists("task-name"),
					"Select task name.");
				params.checkCondition(params.exists("host"),
					"Select host.");
				params.checkCondition(params.exists("context-id"),
					"Select context ID.");
				checkProperties(request);
			} else if (request.getParameter("task-run-type").equals(TASK_RUN_TYPE_XML)) {
				params.checkCondition(params.notEmpty("xml"),
					"Enter non-empty task descriptor.");
				if (params.notEmpty("xml")) {
					try {
						TaskDescriptorXmlParser.parseXmlTaskDescriptor(
							new ByteArrayInputStream(request.getParameter("xml").getBytes())
						);
					} catch (TaskDescriptorException e) {
						params.checkCondition(false, "Can not parse the task descriptor: "
							+ e.getMessage());
					}
				}
			} else {
				assert false: "Impossible things happen sometimes :-)";
			}
			
			TaskDescriptor taskDescriptor = null;
			if (errorMessages.isEmpty()) {
				if (request.getParameter("task-run-type").equals(TASK_RUN_TYPE_GUI)) {
					taskDescriptor = TaskDescriptor.createTask(
						"task-" + Long.toString(idIndex++),
						request.getParameter("task-name"),
						request.getParameter("context-id"),
						new EqualsCondition<String>("name", request.getParameter("host")));
					Map<String, String> properties = getProperties(request);
					for (Map.Entry<String, String> property: properties.entrySet()) {
						taskDescriptor.addTaskProperties(property.getKey(), property.getValue());
					}
				} else if (request.getParameter("task-run-type").equals(TASK_RUN_TYPE_XML)) {
					try {
						taskDescriptor = TaskDescriptorXmlParser.parseXmlTaskDescriptor(
							new ByteArrayInputStream(request.getParameter("xml").getBytes())
						);
					} catch (TaskDescriptorException e) {
						assert false: "TaskDescriptorException should not b thrown here, "
							+ "XML string is chcked above.";
					}
				} else {
					assert false: "Impossible things happen sometimes :-)";
				}

				try {
					taskManager.get().runTask(taskDescriptor);
				} catch (IllegalArgumentException e) {
					errorMessages.addTextMessage(e.getMessage());
				}
				
			}

			if (errorMessages.isEmpty()) {
				HashMap<String, String> actionParams = new HashMap<String, String>();
				actionParams.put("action", "task-runned");
				actionParams.put("cid", taskDescriptor.getContextId());
				page.redirectToAction("context-details", actionParams);
				return;
			} else {
				if (request.getParameter("task-run-type").equals(TASK_RUN_TYPE_GUI)) {
					data.put("taskRunType", request.getParameter("task-run-type"));
					data.put("taskName", request.getParameter("taskName"));
					data.put("host", request.getParameter("host"));
					data.put("contextId", request.getParameter("context-id"));
					data.put("properties", request.getParameter("properties"));
					data.put("xml", "");
				} else if (request.getParameter("task-run-type").equals(TASK_RUN_TYPE_XML)) {
					data.put("taskRunType", request.getParameter("task-run-type"));
					data.put("taskName", "");
					data.put("host", "");
					data.put("contextId", "");
					data.put("properties", "");
					data.put("xml", request.getParameter("xml"));
				} else {
					assert false: "Impossible things happen sometimes :-)";
				}
			}
			
		} else {
			data.put("taskRunType", TASK_RUN_TYPE_GUI);
			data.put("taskName", "");
			data.put("host", "");
			data.put("contextId", "");
			data.put("properties", "");
			data.put("xml", "");
		}

		PackageMetadata[] packages = null;
		try {
			packages = softwareRepository.get().queryPackages(new TasksQuery());
		} catch (MatchException e) {
			assert false: "TasksQuery.match should never throw MatchException";
		}
		Arrays.sort(packages, new Comparator<PackageMetadata>() {
			public int compare(PackageMetadata o1, PackageMetadata o2) {
				return o1.getName().compareToIgnoreCase(o2.getName());
			}
		});
		String[] hosts = hostManager.get().getHostNames();
		Arrays.sort(hosts);
		ContextEntry[] contexts = taskManager.get().getContexts();

		data.put("packages", packages);
		data.put("hosts", hosts);
		data.put("contexts", contexts);
						
		page.setTitle("Run task");
		page.writeHeader();
		page.writeTemplate("tasks-task-run", data);
		page.writeFooter();
!!!789634.java!!!	taskLogs(inout request : HttpServletRequest, inout response : HttpServletResponse) : void

		LogRecord[] logRecords = null;
		try {
			logRecords = LogUtils.getLogRecordsForTasks(
				taskManager.get(),
				taskManager.get().getTasks()
			);
		} catch (LogStorageException e) {
			errorMessages.addTextMessage("Error retrieving logs: " + e.getMessage());
		}

		HashMap<String, Object> data = new HashMap<String, Object>();
		data.put("logRecords", logRecords);
		data.put("logFields", EnumSet.of(
			LogRecord.Fields.CONTEXT,
			LogRecord.Fields.TASK_ID,
			LogRecord.Fields.HOSTNAME,
			LogRecord.Fields.TIMESTAMP,
			LogRecord.Fields.LEVEL,
			LogRecord.Fields.MESSAGE
		));

		page.setTitle("Task logs");
		page.writeHeader();
		page.writeTemplate("tasks-task-logs", data);
		page.writeFooter();
!!!789762.java!!!	taskManagerLogs(inout request : HttpServletRequest, inout response : HttpServletResponse) : void

		LogRecord[] logRecords = null;
		try {
			logRecords = taskManager.get().getLogsForTask(
				TaskManagerInterface.SYSTEM_CONTEXT_ID,
				TaskManagerInterface.TASKMANAGER_TASKNAME
			);
		} catch (LogStorageException e) {
			errorMessages.addTextMessage("Error retrieving logs: " + e.getMessage());
		}

		HashMap<String, Object> data = new HashMap<String, Object>();
		data.put("logRecords", logRecords);
		data.put("logFields", EnumSet.of(
			LogRecord.Fields.HOSTNAME,
			LogRecord.Fields.TIMESTAMP,
			LogRecord.Fields.LEVEL,
			LogRecord.Fields.MESSAGE
		));

		page.setTitle("Task Manager logs");
		page.writeHeader();
		page.writeTemplate("tasks-task-manager-logs", data);
		page.writeFooter();
