class MonitorThread
!!!141314.java!!!	MonitorThread()
			super("MonitorThread");
			start();
!!!141442.java!!!	run() : void
			while (true) {
				try {
					synchronized (monitorQueue) {
						for (ListIterator< ExperimentMetadata > iter = monitorQueue.listIterator(); iter.hasNext();) {
							ExperimentMetadata exp = iter.next();
							TaskDescriptor[] tasks = exp.getAllTasks();
							try {
								for (TaskDescriptor desc : tasks) {
									TaskState state = bm.getTaskStatus(desc.getTaskTid(),desc.getContextId());
									/*
									 * 1. TM deleted info about the task (state == null) -> flag task as finished
									 * 2. Task is finished/aborted -> flag as finished
									 * 3. otherwise flag as running
									 */
									if (state == null || state == TaskState.ABORTED || state == TaskState.FINISHED) {
										exp.getTaskSequence().setTaskStatus(desc.getTaskTid(),EntityStatus.FINISHED);
									}  else{
										exp.getTaskSequence().setTaskStatus(desc.getTaskTid(),EntityStatus.RUNNING);
									}
								}
		
								EntityStatus expStatus = exp.getStatus();
								bm.logDebug("Status " + EID.toNamedString(exp.getID()) + " - " +  expStatus );
								
								// we don't need to monitor finished experiments
								if (expStatus == EntityStatus.FINISHED) {
									bm.logDebug("Experiment " + EID.toNamedString(exp.getID()) + " finished - removing from queue");
									storeExperiment(exp);
									iter.remove();
								}
							} catch (BenchmarkManagerException e) {
								e.printStackTrace();
								bm.logError("Can't update status for experiment: " + e.getMessage());
							} catch (IOException e) {
								e.printStackTrace();
								bm.logError("Can't write status for experiment: " + e.getMessage());
							}
						}
					}
				} catch (Exception e) {
					e.printStackTrace();
					// keep running
				}
				
				try {
					sleep(EXPERIMENT_MONITOR_INTERVAL);
				} catch (InterruptedException e) {
					// ignored
					e.printStackTrace();
				}
			}
