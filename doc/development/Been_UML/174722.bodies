class UserProperties
!!!395010.java!!!	writePropertyTree(inout o : PropertyTreeReadInterface, in depth : int) : void
		
		indent(depth);
		System.out.println(o.getName(true));
		
		for (Iterator< NameValuePair > it1 = o.getPropertyIterator(); it1.hasNext(); ) {

			indent(depth + 1);
			System.out.println(it1.next());
		}
		
		for (Iterator< PropertyTreeReadInterface > it = o.getObjectIterator(); it.hasNext(); ) {

			PropertyTreeReadInterface current = it.next();
			
			writePropertyTree(current, depth + 1);
		}		
!!!395138.java!!!	main(in args : String) : void

		String managerURL = MANAGER_URL_DEFAULT;
		
		/* set path to the manager from the command line.
		 */
		if (args.length > 0) {
			managerURL = args[0];
		}
		
		/* Connect to the Host Manager
		 */
		HostManagerInterface manager = null;
		
		try {
			manager = (HostManagerInterface) Naming.lookup("rmi://" + managerURL + HostManagerInterface.URL);
		} catch (Exception e) {
			System.err.println("Error connecting to the Host Manager.");
			System.err.println("Error message: " + e.getMessage());
			return;
		}

		/* Get data about the first host.
		 */
		HostInfoInterface hi = null;
		
		try {
			hi = manager.getHostInfo(manager.getHostNames()[0]);
		} catch (Exception e) {
			System.err.println("Error querying host data.");
			System.err.println("Error message: " + e.getMessage());
			return;
		}

		PropertyTreeInterface userProps = hi.getUserPropertiesObject();
		
		System.out.println("User properties before modification:");
		writePropertyTree(userProps, 0);
		System.out.println("=======================================================");
		
		// now put new property: current time
		try {
			userProps.putProperty("boolean", new ValueBoolean(false));
			userProps.putProperty("time", new ValueInteger(System.currentTimeMillis()));
			userProps.putProperty("string", new ValueString("A gulocka urobila zblnk (bez diakritiky :-( )..."));
			userProps.putProperty("double", new ValueDouble(1.4142));
			userProps.putProperty("regexp", new ValueRegexp("(regular)+expression"));
			userProps.putProperty("version", new ValueVersion("7.3.1 rc8"));
			userProps.putProperty("rangeInt", new ValueRange< ValueInteger >(new ValueInteger(7),
				null, false, false));
			userProps.putProperty("listString", new ValueList< ValueString >(
					new ValueString[] {new ValueString("s1"), 
					                   new ValueString("ss1"), 
					                   new ValueString("lol <!--")}));
		} catch (Exception e) {
			System.err.println("Unable to add new properties, message: " + e.getMessage());
			return;
		}
		
		try {
			manager.updateUserProperties(hi);
		} catch (Exception e) {
			System.err.println("Unable to modify properties, message: " + e.getMessage());
			return;
		}
		
		// now request data again from database
		String hostName = hi.getHostName();
		HostInfoInterface newHostData = null;
		
		try {
			newHostData = manager.getHostInfo(hostName);
		} catch (Exception e) {
			System.err.println("Unable to get data from HM, message: " + e.getMessage());
		}
		
		// write new properties
		writePropertyTree(newHostData.getUserPropertiesObject(), 0);
!!!395266.java!!!	indent(in d : int) : void

		for (int i = 0; i < d; ++i) {
			System.out.print("  ");
		}
