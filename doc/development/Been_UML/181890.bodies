class PackageCacheManager
!!!480002.java!!!	getCacheDir() : String
		return cacheDir;
!!!480130.java!!!	getBootPackagesDir() : String
		return bootPackagesDir;
!!!480258.java!!!	getMaxCacheSize() : long
		return maxCacheSize;
!!!480386.java!!!	setMaxCacheSize(in sizeLimit : long) : void
		this.maxCacheSize = sizeLimit;
!!!480514.java!!!	getSoftwareRepository() : SoftwareRepositoryInterface
		return softwareRepository;
!!!480642.java!!!	setSoftwareRepository(inout softwareRepository : SoftwareRepositoryInterface) : void
		this.softwareRepository = softwareRepository;
!!!480770.java!!!	findPackage(in packageFilename : String) : Package
		for (Package p: packages) {
			if (p.getFilename().equals(cacheDir + File.separator + packageFilename)
					|| p.getFilename().equals(bootPackagesDir + File.separator + packageFilename)) {
				return p;
			}
		}
		return null;
!!!480898.java!!!	findOldestNonBootPackage() : Package
		Package result = null;
		for (Package p: packages) {
			if (p.getType().equals(Package.Type.NON_BOOT)
					&& (result == null || p.getDownloadTime().compareTo(result.getDownloadTime()) < 0)) {
				result = p;
			}
		}
		return result;
!!!481026.java!!!	deletePackage(inout pakkage : Package) : boolean
		if (new File(pakkage.getFilename()).delete()) {
			packages.remove(pakkage);
			return true;
		} else {
			return false;
		}
!!!481154.java!!!	deleteOldestNonBootPackage() : void
		deletePackage(findOldestNonBootPackage());
!!!481282.java!!!	calculateCacheSize() : long
		long result = 0;
		for (Package p: packages) {
			if (p.type.equals(Package.Type.NON_BOOT)) {
				result += p.getSize();
			}
		}
		return result;
!!!481410.java!!!	ensureSize(in limit : long) : void
		while (calculateCacheSize() > limit) {
			deleteOldestNonBootPackage();
		}
!!!481538.java!!!	tryDownloadPackage(in packageFilename : String) : Package
		/* No Software Repository reference set? */
		if (softwareRepository == null) {
			return null;
		}
		
		/* Retrieve the package size and ensure we have enough space in the cache. */
		PackageMetadata[] metadata = null;
		try {
			metadata = softwareRepository.queryPackages(
				new PackageNameQueryCallback(packageFilename)
			);
		} catch (MatchException e) {
			assert false: "MatchException should be never thrown here.";
		}
		if (metadata.length == 0) {
			return null;
		}
		long packageSize = metadata[0].getSize();
		ensureSize(maxCacheSize - packageSize);
		
		/* Download the package. */
		ServerSocket serverSocket = new ServerSocket(0); // 0 = use any port
		DownloadHandle handle = softwareRepository.beginPackageDownload(
			packageFilename,
			InetAddress.getLocalHost(),
			serverSocket.getLocalPort()
		);
		byte[] buffer = new byte[SoftwareRepositoryInterface.DOWNLOAD_BUFFER_SIZE];
		int bytesRead;
		Socket socket = serverSocket.accept();
		try {
			InputStream inputStream = new BufferedInputStream(
				socket.getInputStream(),
				SoftwareRepositoryInterface.DOWNLOAD_BUFFER_SIZE
  		);
			OutputStream outputStream = new BufferedOutputStream(
				new FileOutputStream(cacheDir + File.separator + packageFilename),
				SoftwareRepositoryInterface.DOWNLOAD_BUFFER_SIZE
			);
			try {
				while ((bytesRead = inputStream.read(buffer)) != -1) {
					outputStream.write(buffer, 0, bytesRead);     
				}
			}	finally {
				inputStream.close();
				outputStream.close();
			}
		} finally {
			socket.close();
			serverSocket.close();
			softwareRepository.endPackageDownload(handle);
		}
		
		/* Add package to internal data structues. */
		Package result = new Package(
			cacheDir + File.separator + packageFilename,
			packageSize,
			new Date(),
			Package.Type.NON_BOOT
		);
		packages.add(result);
		return result;
!!!481666.java!!!	extractZipFile(in zipFilename : String, in path : String) : void
		ZipFile zipFile = new ZipFile(zipFilename);
		for (Enumeration entries = zipFile.entries(); entries.hasMoreElements(); ) {
			ZipEntry entry = (ZipEntry) entries.nextElement();
			
			if (!entry.isDirectory()) {
				byte[] buffer = new byte[PACKAGE_EXTRACTION_BUFFER_SIZE];
				int bytesRead;
				InputStream inputStream = new BufferedInputStream(
					zipFile.getInputStream(entry),
					PACKAGE_EXTRACTION_BUFFER_SIZE
				);
				OutputStream outputStream = new BufferedOutputStream(
					new FileOutputStream(path + File.separator + entry.getName()),
					PACKAGE_EXTRACTION_BUFFER_SIZE
				);
				try {
					while ((bytesRead = inputStream.read(buffer)) != -1) {
						outputStream.write(buffer, 0, bytesRead);     
					}
				}	finally {
					inputStream.close();
					outputStream.close();
				}
			} else {
				new File(path, entry.getName()).mkdirs();
			}
		}
!!!481794.java!!!	extractPackage(in packageName : String, in path : String) : void
		Package pakkage = findPackage(packageName);
		if (pakkage == null) {
			pakkage = tryDownloadPackage(packageName);
		}
		
		if (pakkage != null) {
			extractZipFile(pakkage.getFilename(), path);
		} else {
			throw new HostRuntimeException("Can't find task package: " + packageName);
		}
!!!481922.java!!!	PackageCacheManager(in cacheDir : String, in bootPackagesDir : String)
		this.cacheDir = cacheDir;
		this.bootPackagesDir = bootPackagesDir;
		
		Date now = new Date();
		File[] files = new File(bootPackagesDir).listFiles();
		if (files == null) {
			throw new IOException("Error getting list of boot packages.");
		}
		
		for (File f: files) {
			packages.add(new Package(
				f.getPath(),
				f.length(),
				now,
				Package.Type.BOOT)
			);
		}
