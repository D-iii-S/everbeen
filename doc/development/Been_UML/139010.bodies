class OID
!!!262402.java!!!	OID(in value : long)
		this.value = value;
!!!262530.java!!!	OID()
		
!!!262658.java!!!	setValue(in value : long) : void
		this.value = value;
!!!262786.java!!!	value() : Object
		return new Long(value);
!!!262914.java!!!	compareTo(inout o : Object) : int
		return compareTo((OID) o);
!!!263042.java!!!	compareTo(inout anotherOID : OID) : int
		/* Because the values are longs and we return int, we can't do the usual
		 * trick "return value - anotherOID.value;" without risk of overflow. 
		 */
		long diff = value - anotherOID.value;
		if (diff < 0) {
			return -1;
		} else if (diff > 0) {
			return 1;
		} else {
			return 0;
		}
!!!263170.java!!!	equals(inout o : Object) : boolean
		/*
		 * This is not sufficient:  
		 * return o instanceof OID && compareTo(o) == 0;
		 * 
		 * In such case (EID uses OID.equals()): OID(1).equals(EID(1)) == true
		 * 
		 * I used dynamic version of 'instanceof' operator Class.isInstance()
		 * so that equals() method does not need to be redefined on each
		 * extension of OID object
		 */
		if (o == null) {
			return false;
		}
		
		Class objectClass = o.getClass();
		Class thisClass = getClass();
		return objectClass.isInstance(this)
			&& thisClass.isInstance(o)
			&& compareTo(o) == 0;
!!!263298.java!!!	hashCode() : int
		return new Long(value).hashCode();
!!!263426.java!!!	toString() : String
		return Long.toString(value);
!!!263554.java!!!	valueOf(in s : String) : OID
		return new OID(Long.parseLong(s));
