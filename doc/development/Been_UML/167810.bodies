class HostInfo
!!!359682.java!!!	HostInfo()
		
		super("host", null);
		
		try {
			putProperty(Properties.HOST_NAME, null);
			putProperty(Properties.DETECTOR, null);
			putProperty(Properties.CHECK_DATE, null);
			putProperty(Properties.CHECK_TIME, null);
	
			diskDrives = new ArrayList< DiskDrive >();
			processors = new ArrayList< Processor >();
			networkAdapters = new ArrayList< NetworkAdapter >();
			
			putProperty(Properties.DRIVES, new ValueInteger(0));
			putProperty(Properties.PROCESSORS, new ValueInteger(0));
			putProperty(Properties.ADAPTERS, new ValueInteger(0));
			
			products = new ArrayList< Product >();
			
			putProperty(Properties.APPLICATIONS, new ValueInteger(0));
			
			userObject = new PropertyTree(Objects.USER_OBJECT, this);
			addObject(userObject);
			
			aliases = new ArrayList< SoftwareAlias >();
			putProperty(Properties.ALIASES, new ValueInteger(0));

			Collection<ValueString> groups = new ArrayList<ValueString>();
			groups.add(new ValueString("All hosts"));
			setMemberOf(groups);
		} catch (Exception e) {
			e.printStackTrace();
			assert false : "Unable to add properties to HostInfo.";
		}
!!!359810.java!!!	parseXMLNode(inout node : Node) : void
		
		throw new UnsupportedOperationException("HostInfo class cannot be parse from XML node."
				+ " Use constructor instead.");
!!!359938.java!!!	parse(inout input : InputSource) : void
		
		DocumentBuilder builder = null;

		try {
			builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();
		} catch (ParserConfigurationException e) {
			throw new InputParseException(e.getMessage());
		}
		
		Document document = null;
		
		try {
			document = builder.parse(input);
		} catch (Exception e) {
			throw new InputParseException(e.getMessage());
		}
		
		try {
			Node hostInfoNode = XMLHelper.getSubNodeByName("hostInfo", document);
			
			// parse basic info from file
			hostName = XMLHelper.getSubNodeValueByName("hostName", hostInfoNode);
			checkDate = XMLHelper.getSubNodeValueByName("lastCheckDate", hostInfoNode);
			checkTime = XMLHelper.getSubNodeValueByName("lastCheckTime", hostInfoNode);
			detector = XMLHelper.getSubNodeValueByName("detector", hostInfoNode);
			
			try {
				// parse date and time from XML file
				SimpleDateFormat df = new SimpleDateFormat(HostManagerInterface.DEFAULT_DATE_TIME_FORMAT);
				
				lastCheck = df.parse(checkDate + " " + checkTime);
			} catch (Exception e) {
				// error parsing date
				throw new InputParseException("Error parsing check date and time.", e);
			}

			try {
				putProperty(Properties.HOST_NAME, new ValueString(hostName));
				putProperty(Properties.DETECTOR, new ValueString(detector));
				putProperty(Properties.CHECK_DATE, new ValueString(checkDate));
				putProperty(Properties.CHECK_TIME, new ValueString(checkTime));
				
				putProperty(Properties.DRIVES, new ValueInteger(0));
				putProperty(Properties.PROCESSORS, new ValueInteger(0));
				putProperty(Properties.ADAPTERS, new ValueInteger(0));
				putProperty(Properties.APPLICATIONS, new ValueInteger(0));
			} catch (Exception e) {
				e.printStackTrace();
				assert false : "Unable to add properties to HostInfo.";
			}

			loadOsNode(XMLHelper.getSubNodeByName("operatingSystem", hostInfoNode));
			loadProductsNode(XMLHelper.getSubNodeByName("installedProducts", hostInfoNode));
			setMemory(new Memory(XMLHelper.getSubNodeByName("memory", hostInfoNode)));
			loadProcessorsNode(XMLHelper.getSubNodeByName("processors", hostInfoNode));
			loadDrivesNode(XMLHelper.getSubNodeByName("diskDrives", hostInfoNode));
			loadAdaptersNode(XMLHelper.getSubNodeByName("network", hostInfoNode));
			setBeenDisk(new BeenDisk(XMLHelper.getSubNodeByName("beenDisk", hostInfoNode)));
			setJavaInfo(new JavaInfo(XMLHelper.getSubNodeByName("javaInfo", hostInfoNode)));
			loadUserProperties(hostInfoNode);
			loadAliasesNode(hostInfoNode);

		} catch (InputParseException e) {
			throw e;
		} catch (Exception e) {
			e.printStackTrace();
			throw new InputParseException("Other error: " + e.getMessage());
		}
!!!360066.java!!!	loadOsNode(inout osNode : Node) : void

		OperatingSystem os = null;
		
		if (detector.equals(Detectors.WINDOWS)) {
			os = new WindowsOperatingSystem(osNode);
		} else if (detector.equals(Detectors.LINUX)) {
			os = new LinuxOperatingSystem(osNode);
		} else if (detector.equals(Detectors.SOLARIS)) {
			os = new SolarisOperatingSystem(osNode);
		} else {
			os = new UnknownOperatingSystem(osNode);
		}
						
		setOperatingSystem(os);				
!!!360194.java!!!	loadProductsNode(inout installedProducts : Node) : void

		ArrayList< Node > productList = XMLHelper.getChildNodesByName("product", installedProducts);
		
		for (int i = 0; i < productList.size(); ++i) {
			addProduct(new Product(productList.get(i)));
		}
!!!360322.java!!!	loadProcessorsNode(inout processorsNode : Node) : void

		ArrayList< Node > procList = XMLHelper.getChildNodesByName("processor", processorsNode);
		
		for (int i = 0; i < procList.size(); ++i) {
			
			addProcessor(new Processor(procList.get(i)));
		}
!!!360450.java!!!	loadDrivesNode(inout drivesNode : Node) : void

		ArrayList< Node > drives = XMLHelper.getChildNodesByName("diskDrive", drivesNode);

		for (int i = 0; i < drives.size(); ++i) {

			addDiskDrive(new DiskDrive(drives.get(i)));
		}
!!!360578.java!!!	loadAdaptersNode(inout networkNode : Node) : void

		ArrayList< Node > adapters = XMLHelper.getChildNodesByName("networkAdapter", networkNode);
		
		for (int i = 0; i < adapters.size(); ++i) {
			
			addNetworkAdapter(new NetworkAdapter(adapters.get(i)));
		}
!!!360706.java!!!	loadUserProperties(inout hostInfoNode : Node) : void

		Node userNode = null;
		
		try {
			userNode = XMLHelper.getSubNodeByName("user", hostInfoNode);
		} catch (Exception e) {
			// do nothing, we just do not have any user properties
			userNode = null;
		}
		
		if (userNode != null) {

			Node propTree = XMLHelper.getSubNodeByName(PropertyTree.XML_NODE_NAME, userNode);
		
			if (propTree == null) {
				userObject = new PropertyTree(Objects.USER_OBJECT);
				addObject(userObject);
			} else {
				userObject = new PropertyTree(propTree);
				addObject(userObject);
			}
		} else {
			userObject = new PropertyTree(Objects.USER_OBJECT);
			addObject(userObject);
		}
!!!360834.java!!!	loadAliasesNode(inout hostInfoNode : Node) : void

		Node aliasesNode = null;
		
		try {
			aliasesNode = XMLHelper.getSubNodeByName("aliases", hostInfoNode);
		} catch (Exception e) {
			// this is not an error, since we may not have any aliases present
			aliasesNode = null;
		}
		
		if (aliasesNode != null) {
			ArrayList< Node > nodes = 
				XMLHelper.getChildNodesByName(SoftwareAlias.ALIAS_XML_NODE_NAME, aliasesNode);
		
			for (Node n: nodes) {
				try {
					addAlias(new SoftwareAlias(n));
				} catch (HostManagerException e) {
					throw new InputParseException("Error parsing alias data.", e);
				}
			}
		}
!!!360962.java!!!	HostInfo(inout input : InputSource)
		
		super("host", null);
		
		try {
			putProperty(Properties.HOST_NAME, null);
			putProperty(Properties.DETECTOR, null);
			putProperty(Properties.CHECK_DATE, null);
			putProperty(Properties.CHECK_TIME, null);
	
			diskDrives = new ArrayList< DiskDrive >();
			processors = new ArrayList< Processor >();
			networkAdapters = new ArrayList< NetworkAdapter >();
			
			putProperty(Properties.DRIVES, new ValueInteger(0));
			putProperty(Properties.PROCESSORS, new ValueInteger(0));
			putProperty(Properties.ADAPTERS, new ValueInteger(0));
			
			products = new ArrayList< Product >();
			
			putProperty(Properties.APPLICATIONS, new ValueInteger(0));
			
			aliases = new ArrayList< SoftwareAlias >();
			putProperty(Properties.ALIASES, new ValueInteger(0));

			Collection<ValueString> groups = new ArrayList<ValueString>();
			groups.add(new ValueString("All hosts"));
			setMemberOf(groups);
		} catch (Exception e) {
			e.printStackTrace();
			assert false : "Unable to add properties to HostInfo.";
		}

		parse(input);
!!!361090.java!!!	exportAsElement(inout document : Document) : Element
		
		Element hostInfoElement = document.createElement("hostInfo");
		
		hostInfoElement.appendChild(XMLHelper.writeValueToElement(document, hostName, "hostName"));
		hostInfoElement.appendChild(XMLHelper.writeValueToElement(document, checkDate, "lastCheckDate"));
		hostInfoElement.appendChild(XMLHelper.writeValueToElement(document, checkTime, "lastCheckTime"));
		hostInfoElement.appendChild(XMLHelper.writeValueToElement(document, detector, "detector"));
		hostInfoElement.appendChild(operatingSystem.exportAsElement(document));

		Element networkElement = document.createElement("network");
		
		for (NetworkAdapter adapter: networkAdapters) {
			networkElement.appendChild(adapter.exportAsElement(document));
		}
		
		hostInfoElement.appendChild(networkElement);
		
		hostInfoElement.appendChild(memory.exportAsElement(document));
		
		Element processorsElement = document.createElement("processors");
		
		for (Processor processor: processors) {
			processorsElement.appendChild(processor.exportAsElement(document));
		}
		
		hostInfoElement.appendChild(processorsElement);
		
		Element productsElement = document.createElement("installedProducts");
		
		for (Product product: products) {
			productsElement.appendChild(product.exportAsElement(document));
		}
		
		hostInfoElement.appendChild(productsElement);
		
		Element diskDrivesElement = document.createElement("diskDrives");
		
		for (DiskDrive drive: diskDrives) {
			diskDrivesElement.appendChild(drive.exportAsElement(document));
		}
		
		hostInfoElement.appendChild(diskDrivesElement);
		
		hostInfoElement.appendChild(beenDisk.exportAsElement(document));
		hostInfoElement.appendChild(javaInfo.exportAsElement(document));

		Element userObjectElement = document.createElement("user");
		
		userObjectElement.appendChild(userObject.exportAsElement(document));
		
		hostInfoElement.appendChild(userObjectElement);
		
		Element aliasElement = document.createElement("aliases");
		hostInfoElement.appendChild(aliasElement);
		
		for (SoftwareAlias a: aliases) {
			aliasElement.appendChild(a.exportAsElement(document));
		}

		return hostInfoElement;
!!!361218.java!!!	getHostName() : String
		
		return hostName;
!!!361346.java!!!	getCheckDate() : String
		
		return checkDate;
!!!361474.java!!!	getCheckTime() : String
		
		return checkTime;
!!!361602.java!!!	getDetectorIDString() : String
		
		return detector;
!!!361730.java!!!	getDriveCount() : int
		
		return diskDrives.size();
!!!361858.java!!!	getDiskDrive(in index : int) : DiskDrive
		
		return diskDrives.get(index);
!!!361986.java!!!	addDiskDrive(inout newDrive : DiskDrive) : void

		newDrive.setParent(this);
		diskDrives.add(newDrive);
		addObject(newDrive);
		
		try {
			setPropertyValue(Properties.DRIVES, new ValueInteger(diskDrives.size()));
		} catch (Exception e) {
			e.printStackTrace();
			assert false : "Unable to add drive.";
		}
!!!362114.java!!!	getProcessorCount() : int
		
		return processors.size();
!!!362242.java!!!	getProcessor(in index : int) : Processor
		
		return processors.get(index);
!!!362370.java!!!	addProcessor(inout newProcessor : Processor) : void

		newProcessor.setParent(this);
		processors.add(newProcessor);
		addObject(newProcessor);
		
		try {
			setPropertyValue(Properties.PROCESSORS, new ValueInteger(processors.size()));
		} catch (Exception e) {
			e.printStackTrace();
			assert false : "Unable to add processor.";
		}
!!!362498.java!!!	getNetworkAdapterCount() : int
		
		return networkAdapters.size();
!!!362626.java!!!	getNetworkAdapter(in index : int) : NetworkAdapter
	
		return networkAdapters.get(index);
!!!362754.java!!!	addNetworkAdapter(inout newAdapter : NetworkAdapter) : void

		newAdapter.setParent(this);
		addObject(newAdapter);
		networkAdapters.add(newAdapter);
		
		try {
			setPropertyValue(Properties.ADAPTERS, new ValueInteger(networkAdapters.size()));
		} catch (Exception e) {
			e.printStackTrace();
			assert false : "Unable to add network adapter.";
		}
!!!362882.java!!!	getMemory() : Memory
		
		return memory;
!!!363010.java!!!	setMemory(inout mm : Memory) : void
		
		memory = mm;
		memory.setParent(this);
		try {
			removeObject(Objects.MEMORY);
		} catch (Exception e) {
			/* ignore this */
		}
		addObject(mm);
!!!363138.java!!!	getOperatingSystem() : OperatingSystem
	
		return operatingSystem;
!!!363266.java!!!	setOperatingSystem(inout newOs : OperatingSystem) : void
		
		operatingSystem = newOs;
		operatingSystem.setParent(this);
		try {
			removeObject(Objects.OPERATING_SYSTEM);
		} catch (Exception e) {
			/* ignore this */
		}

		addObject(operatingSystem);
!!!363394.java!!!	getProductCount() : int
		
		return products.size();
!!!363522.java!!!	getProduct(in index : int) : Product

		return products.get(index);
!!!363650.java!!!	addProduct(inout newProduct : Product) : void

		newProduct.setParent(this);
		products.add(newProduct);
		addObject(newProduct);
		
		try {
			setPropertyValue(Properties.APPLICATIONS, new ValueInteger(products.size()));
		} catch (Exception e) {
			e.printStackTrace();
			assert false : "Unable to add product.";
		}
!!!363778.java!!!	getJavaInfo() : JavaInfo
		
		return javaInfo;
!!!363906.java!!!	setJavaInfo(inout ji : JavaInfo) : void
	
		javaInfo = ji;
		javaInfo.setParent(this);
		try {
			removeObject(Objects.JAVA);
		} catch (Exception e) {
			/* ignore this */
		}
		addObject(javaInfo);
!!!364034.java!!!	getBeenDisk() : BeenDisk
		
		return beenDisk;
!!!364162.java!!!	getSoftwareAlias(in index : int) : SoftwareAlias

		return aliases.get(index);
!!!364290.java!!!	getSoftwareAliasCount() : int
		
		return aliases.size();
!!!364418.java!!!	getSoftwareAliasList() : SoftwareAlias
		
		SoftwareAlias []a = new SoftwareAlias[aliases.size()];
		
		a = aliases.toArray(a);
		
		return a;
!!!364546.java!!!	hasSoftwareAlias(in aliasName : String) : boolean
		
		for (SoftwareAlias a: aliases) {
			if (a.getAliasName().equals(aliasName)) {
				return true;
			}
		}
		
		return false;
!!!364674.java!!!	getSoftwareAliasByName(in name : String) : SoftwareAlias
		
		ArrayList< SoftwareAlias > result = new ArrayList< SoftwareAlias >();
		
		for (SoftwareAlias a: aliases) {
			if (a.getAliasName().equals(name)) {
				result.add(a);
			}
		}
		
		return result;
!!!364802.java!!!	addAlias(inout newAlias : SoftwareAlias) : void
		
		try {
			aliases.add(newAlias);
			addObject(newAlias);
	
			setPropertyValue(Properties.ALIASES, new ValueInteger(aliases.size()));
		} catch (Exception e) {
			throw new HostManagerException("Error adding alias.", e);
		}
!!!364930.java!!!	removeAllAliases() : void

		if (aliases.size() == 0) {
			return;
		}
		
		try {
			removeAllOfType("alias");
			aliases.clear();
			setPropertyValue(Properties.ALIASES, new ValueInteger(0));
		} catch (Exception e) {
			throw new HostManagerException("Error removing aliases.", e);
		}
!!!365058.java!!!	getCheckDateTime() : Date
		
		return lastCheck;
!!!365186.java!!!	setBeenDisk(inout newBD : BeenDisk) : void
		
		beenDisk = newBD;
		beenDisk.setParent(this);
		try {
			removeObject(Objects.BEEN_DISK);
		} catch (Exception e) {
			//assert false : "Unable to remove been disk info. This should not happen.";
		}
		addObject(beenDisk);
!!!365314.java!!!	hashCode() : int
		
		return getHostName().hashCode();
!!!365442.java!!!	toString() : String
		
		return hostName + " @ " + checkDate + " " + checkTime;
!!!365570.java!!!	getXMLNodeName() : String
		
		return "hostInfo";
!!!365698.java!!!	setMemberOf(inout groups : Collection< ValueString >) : void
		
		try {
			this.putProperty("memberof", new ValueList< ValueString >(groups));
		} catch (InvalidArgumentException e) {
			// this will never happen
			e.printStackTrace();
			assert false : "Yer computah iz ded.";
		}
!!!365826.java!!!	addUserProperty(in name : String, inout value : ValueCommonInterface) : void
		
		userObject.addProperty(name, value);
!!!365954.java!!!	addUserProperty(inout property : NameValuePair) : void
		
		userObject.addProperty(property);
!!!366082.java!!!	getUserPropertiesIterator() : NameValuePair
		
		return userObject.getPropertyIterator();
!!!366210.java!!!	putUserProperty(in name : String, inout value : ValueCommonInterface) : ValueCommonInterface
	
		return userObject.putProperty(name, value);
!!!366338.java!!!	putUserProperty(inout property : NameValuePair) : ValueCommonInterface
		
		return userObject.putProperty(property);
!!!366466.java!!!	removeUserProperty(in name : String) : void

		userObject.removeProperty(name);
!!!366594.java!!!	setUserProperty(in name : String, inout value : ValueCommonInterface) : ValueCommonInterface

		return userObject.setPropertyValue(name, value);
!!!366722.java!!!	getUserPropertyValue(in name : String) : ValueCommonInterface

		return userObject.getPropertyValue(name);
!!!366850.java!!!	hasUserProperty(in name : String) : boolean

		return userObject.hasProperty(name);
!!!366978.java!!!	setUserProperty(inout property : NameValuePair) : ValueCommonInterface

		return userObject.setPropertyValue(property);
!!!367106.java!!!	getUserPropertiesObject() : PropertyTreeInterface

		return userObject;
!!!367234.java!!!	setUserPropertiesObject(inout props : PropertyTreeReadInterface) : void
		
		int oc = 0;
		
		try {
			oc = getObjectCount("user");
		} catch (Exception e) {
			// do nothing
		}
		
		if (oc > 0) {
			try {
				removeObject("user");
			} catch (Exception e) {
				// do nothing
			}
		}
		
		userObject = (PropertyTree) props;
		addObject((PropertyTree) props);
!!!367362.java!!!	getUserProperties() : NameValuePair
		List<NameValuePair> result = new LinkedList<NameValuePair>();
		for (
			Iterator<NameValuePair> iterator = userObject.getPropertyIterator();
			iterator.hasNext();
		) {
			result.add(iterator.next());
		}
		return result.toArray(new NameValuePair[result.size()]);
