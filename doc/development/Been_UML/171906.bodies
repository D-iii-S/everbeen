class PropertyTreeFactory
!!!380546.java!!!	create(in name : String) : PropertyTreeInterface
		
		return new PropertyTree(name);
!!!380674.java!!!	create(in name : String, inout parent : PropertyTreeInterface) : PropertyTreeInterface
		
		return new PropertyTree(name, parent);
!!!380802.java!!!	create(inout node : Node) : PropertyTreeInterface
		
		return new PropertyTree(node);
!!!380930.java!!!	isValidObjectPath(in path : String) : boolean

		Matcher m = pathValid.matcher(path);
		
		return m.matches();
!!!381058.java!!!	isValidPropertyPath(in path : String) : boolean
		
		Matcher m = propPathValid.matcher(path);
		
		return m.matches();
!!!381186.java!!!	isValidTypeName(in tname : String) : boolean
		
		Matcher m = pathTypeOnly.matcher(tname);
		
		return m.matches();
!!!381314.java!!!	extractTypePathFromPath(in path : String) : String
		
		if (isValidPropertyPath(path) || isValidObjectPath(path)) {
			String result = "";
			int start = 0;
			
			while (start < path.length()) {
				int end = path.indexOf('.', start);
				
				if (end == -1) {
					end = path.length();
				}
				
				String objectName = path.substring(start, end);
				int par = objectName.indexOf('(');
				
				if (par == -1) {
					result = concatenatePaths(result, objectName);
				} else {
					result = concatenatePaths(result, objectName.substring(0, par));
				}
				
				start = end + 1;
			}
			
			return result;
		} else {
			throw new InvalidArgumentException("Specified property or object path is not valid: \"" 
					+ path + "\".");
		}
!!!381442.java!!!	concatenatePaths(in p1 : String, in p2 : String) : String
		
		if (p1.length() == 0) {
			return p2;
		}
		
		if (p2.length() == 0) {
			return p1;
		}
		
		if (p1.endsWith(".") || p2.startsWith(".")) {
			return p1 + p2;
		} else {
			return p1 + "." + p2;
		}
