class AlternativeRestriction
!!!315266.java!!!	AlternativeRestriction(inout restr1 : ObjectRestriction, inout restr2 : ObjectRestriction)
		
		if ((restr1 == null) || (restr2 == null)) {
			throw new IllegalArgumentException("null parameters are not allowed for AlternativeRestriction.");
		}
		
		restrictions = new ObjectRestriction[2];
		
		restrictions[0] = restr1;
		restrictions[1] = restr2;
!!!315394.java!!!	AlternativeRestriction(inout restr1 : ObjectRestriction, inout restr2 : ObjectRestriction, inout restr3 : ObjectRestriction)
		
		if ((restr1 == null) || (restr2 == null) || (restr3 == null)) {
			throw new IllegalArgumentException("null parameters are not allowed for "
					+ "AlternativeRestriction.");
		}
		
		restrictions = new ObjectRestriction[3];
		
		restrictions[0] = restr1;
		restrictions[1] = restr2;
		restrictions[2] = restr3;
!!!315522.java!!!	AlternativeRestriction(inout restr : ObjectRestriction)
		
		if (restr == null) {
			throw new IllegalArgumentException("null parameters are not allowed for AlternativeRestriction.");
		}
		
		if (restr.length == 0) {
			throw new IllegalArgumentException("Empty restriction array.");
		}
		
		restrictions = restr;
!!!315650.java!!!	AlternativeRestriction(inout node : Node)
		
		parseXMLNode(node);
!!!315778.java!!!	getRestrictions() : ObjectRestriction
		
		return restrictions;
!!!315906.java!!!	toString() : String
		
		String result = "Alternative { \n";
		
		for (int i = 0; i < restrictions.length; ++i) {
			
			result += "\t" + restrictions[i].toString().replaceAll("\t", "\t\t").replaceAll("}", "\t}") + "\n";
		}

		result += "}";
		
		return result;
!!!316034.java!!!	parseXMLNode(inout node : Node) : void

		if (!node.getNodeName().equals(getXMLNodeName())) {
			throw new InputParseException("Node does not contain alternative restriction data."
					+ " Node name is \"" +  node.getNodeName() + "\".");
		}
		
		ArrayList< Node > restr = XMLHelper.getChildNodesByName("restriction", node);
		restrictions = new ObjectRestriction[restr.size()];
		
		int i = 0;
		for (Node current: restr) {
			
			restrictions[i] = new ObjectRestriction(current);
			i += 1;
		}
		
!!!316162.java!!!	exportAsElement(inout doc : Document) : Element
		
		/* Node:
		 * 
		 * <alternative>
		 *    <object-restr #1/>
		 *    <object-restr #2/>
		 *           .
		 *           .
		 *           .
		 *    <object-restr #n/>
		 * </alternative>
		 * 
		 * where <object-rest #i/> are serialised ObejctRestrictions.
		 */
		
		Element element = doc.createElement(getXMLNodeName());
		
		for (ObjectRestriction current: restrictions) {
			
			element.appendChild(current.exportAsElement(doc));
		}
		
		return element;
!!!316290.java!!!	getXMLNodeName() : String
		
		return "alternative";
!!!316418.java!!!	equals(inout o : Object) : boolean
		
		if (o instanceof AlternativeRestriction) {
			return equals((AlternativeRestriction) o);
		} else {
			return false;
		}
!!!316546.java!!!	equals(inout o : AlternativeRestriction) : boolean
		
		if (restrictions.length != o.restrictions.length) {
			return false;
		}

		/* This can be quite slow (O(n^2)), but that should not matter since this should not be
		 * used too often (it's not that important to compare various restrictions).
		 */
		for (ObjectRestriction current: restrictions) {
			if (!isInArray(current, o.restrictions)) {
				return false;
			}
		}
		
		return true;
!!!316674.java!!!	hashCode() : int
		
		int result = 0;
		
		for (ObjectRestriction o: restrictions) {
			result += o.hashCode();
		}
		
		return result;
!!!316802.java!!!	isInArray(inout what : T, inout where : T) : boolean
		
		for (T current: where) {
			if (current.equals(what)) {
				return true;
			}
		}
		
		return false;
