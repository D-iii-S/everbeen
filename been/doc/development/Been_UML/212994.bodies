class BenchmarksModule
!!!764034.java!!!	BenchmarksModule()
		super();
		
		/* Initialize general module info... */
		id = "benchmarks";
		name = "Benchmarks";
		defaultAction = "analysis-list";
		
		menu = new MenuItem[] {
				new MenuItem("analysis-list", "Analyses"), 
				new MenuItem("analysis-add", "Add analysis"), 
				new MenuItem("plugin-list", "Plugins"), 
				new MenuItem("plugin-install", "Install plugin"), 
		};
		
		eventManager.registerEventListener(this);
!!!764162.java!!!	getInstance() : BenchmarksModule
		if (instance == null) {
			 instance = new BenchmarksModule();
		}
		return instance;
!!!764290.java!!!	receiveEvent(inout event : Event) : void
		taskManager.drop();
		benchmarkManager.drop();
		resultsRepository.drop();
!!!764418.java!!!	invokeMethodForAction(inout request : HttpServletRequest, inout response : HttpServletResponse, in action : String) : void
		try {
			super.invokeMethodForAction(request, response, action);
		} catch (InvocationTargetException e) {
			if (e.getCause() instanceof ConnectException) {
				throw new InvocationTargetException(
					new ConnectException(
						"<strong>Can't execute remote call to the Benchmark Manager."
						+ "</strong><br /><br />"
						+ "Try to reload the page. If the error persists after multiple reloads, "
						+ "go to the <a href=\"../../services/>Services</a> tab and make "
						+ "sure the Benchmark Manager is running.<br /><br/>"
						+ "Most probale causes of this error are network-related problems or "
						+ "crash of the service."
					),
					e.getMessage()
				);
			} else {
				throw e;
			}
		}
!!!764546.java!!!	getLogRecordsForTasks(inout tasks : TaskEntry) : LogRecord
		List<LogRecord[]> logRecordsList = new LinkedList<LogRecord[]>();
		for (TaskEntry task: tasks) {
			try {
				logRecordsList.add(taskManager.get().getLogsForTask(task.getContextId(), task.getTaskId()));
			} catch (IllegalArgumentException e) {
				/* Ignore it and simply don't add logs for this task. */
			}
		}

		return LogUtils.aggregateLogs(logRecordsList);
!!!764674.java!!!	buildExperiment(inout aid : AID, inout eid : EID) : Experiment
		AnalysisEntityInterface analysisInterface = benchmarkManager.get().getAnalysisInterface();
		ExperimentEntityInterface experimentInterface = analysisInterface.getSubentityInterface(aid);
		BinaryEntityInterface binaryInterface = experimentInterface.getSubentityInterface(eid);

		List<Binary> binaries = new LinkedList<Binary>();
		for (BinaryEntity binaryEntity: binaryInterface.getEntities()) {
			RunEntityInterface runInterface = binaryInterface.getSubentityInterface(binaryEntity.getId());
			List<Run> runs = new LinkedList<Run>();
			for (RunEntity runEntity: runInterface.getEntities()) {
				TaskEntry[] taskEntries = taskEntriesFor(
					runInterface.getTasks(runEntity.getId())
				);
				runs.add(new Run(
					runEntity,
					taskEntries,
					TaskUtils.getCheckPointsForTasks(taskManager.get(), taskEntries)
				));
			}
			TaskEntry[] taskEntries = taskEntriesFor(
				binaryInterface.getTasks(binaryEntity.getId())
			);
			binaries.add(new Binary(
				binaryEntity,
				runs.toArray(new Run[runs.size()]),
				taskEntries,
				TaskUtils.getCheckPointsForTasks(taskManager.get(), taskEntries)
			));
		}
		ExperimentEntity experimentEntity = analysisInterface.getSubentityInterface(aid).getEntity(eid);
		TaskEntry[] taskEntries = taskEntriesFor(
			experimentInterface.getTasks(eid)
		);
		return new Experiment(
			experimentEntity,
			binaries.toArray(new Binary[binaries.size()]),
			taskEntries,
			TaskUtils.getCheckPointsForTasks(taskManager.get(), taskEntries)
		);
!!!764802.java!!!	buildExperiments(inout aid : AID) : Experiment
		AnalysisEntityInterface analysisInterface = benchmarkManager.get().getAnalysisInterface();
		ExperimentEntityInterface experimentInterface = analysisInterface.getSubentityInterface(aid);
		ExperimentEntity[] experimentEntities = experimentInterface.getEntities();
		Experiment[] result = new Experiment[experimentEntities.length];
		for (int i = 0; i < experimentEntities.length; i++) {
			result[i] = buildExperiment(aid, experimentEntities[i].getId());
		}
		return result;
!!!764930.java!!!	getTasksForExperiments(inout experiments : Experiment) : TaskEntry
		List<TaskEntry> result = new LinkedList<TaskEntry>();
		for (Experiment experiment: experiments) {
			result.addAll(Arrays.asList(experiment.getAggregatedTasks()));
		}
		return result.toArray(new TaskEntry[result.size()]);
!!!765058.java!!!	computePeriodicityFromScheduleInfo(inout schedulerInfo : SchedulerInfo) : String
		if (schedulerInfo.getDaysOfWeek().length == 1 && schedulerInfo.getDaysOfWeek()[0] == -1) {
			return SCHEDULER_PERIODICITY_DAYS_OF_MONTH;
		} else {
			return SCHEDULER_PERIODICITY_DAYS_OF_WEEK;
		}
!!!765186.java!!!	integerListToIntArray(inout list : List<Integer>) : int
		int[] result = new int[list.size()];
		for (int i = 0; i < list.size(); i++) {
			result[i] = list.get(i);
		}
		return result;
!!!765314.java!!!	integerListToTimeArray(inout list : List<Integer>) : int
		if (list.isEmpty()) {
			return new int[] { -1 };
		}

		int[] result = new int[list.size()];
		for (int i = 0; i < list.size(); i++) {
			result[i] = Integer.valueOf(list.get(i));
		}
		return result;
!!!765442.java!!!	isWhitespacedNumberBetween(in s : String, in min : int, in max : int) : boolean
		try {
			int value = Integer.valueOf(Routines.trim(s));
			return min <= value && value <= max;
		} catch (NumberFormatException e) {
			return false;
		}
!!!765570.java!!!	isCronField(in s : String, in min : int, in max : int) : boolean
		if (s.equals("")) {
			return true;
		}

		String[] parts = s.split(",");
		for (int i = 0; i < parts.length; i++) {
			if (parts[i].indexOf('-') >= 0) {
				String[] bounds = parts[i].split("-");
				if (bounds.length != 2
						|| !isWhitespacedNumberBetween(bounds[0], min, max)
						|| !isWhitespacedNumberBetween(bounds[1], min, max)
						|| getWhitespacedNumber(bounds[0]) > getWhitespacedNumber(bounds[1])) {
					return false;
				}
			} else {
				if (!isWhitespacedNumberBetween(parts[i], min, max)) {
					return false;
				}
			}
		}

		return true;
!!!765698.java!!!	getWhitespacedNumber(in s : String) : int
		return Integer.valueOf(Routines.trim(s));
!!!765826.java!!!	cronFieldToTimeArray(in s : String) : int
		if (s.equals("")) {
			return new int[] { -1 };
		}

		List<Integer> resultList = new LinkedList<Integer>();
		String[] parts = s.split(",");
		for (int i = 0; i < parts.length; i++) {
			if (parts[i].indexOf('-') >= 0) {
				String[] bounds = parts[i].split("-");
				int min = getWhitespacedNumber(bounds[0]);
				int max = getWhitespacedNumber(bounds[1]);
				for (int j = min; j <= max; j++) {
					resultList.add(j);
				}
			} else {
				resultList.add(getWhitespacedNumber(parts[i]));
			}
		}

		int[] result = new int[resultList.size()];
		for (int i = 0; i < resultList.size(); i++) {
			result[i] = resultList.get(i);
		}
		return result;
!!!765954.java!!!	timeArrayToCronField(in timeArray : int) : String
		if (timeArray.length == 1 && timeArray[0] == -1) {
			return "";
		}

		String result = "";
		for (int i = 0; i < timeArray.length; i++) {
			if (i != 0) {
				result += ", ";
			}
			result += Integer.toString(timeArray[i]);
		}

		return result;
!!!766082.java!!!	ensureSchedulingInfoParams(inout request : HttpServletRequest) : List<Integer>
		params.ensureExist("historical-start-date", "historical-end-date");
		params.ensureExist("periodicity", "hours", "minutes");

		Set<String> periodicities = new HashSet<String>();
		periodicities.add(SCHEDULER_PERIODICITY_DAYS_OF_WEEK);
		periodicities.add(SCHEDULER_PERIODICITY_DAYS_OF_MONTH);
		params.ensureCondition("periodicity", params.isInSet("periodicity", periodicities));
		params.ensureCondition("days-of-month", isCronField(request.getParameter("days-of-month"), 1, 31));

		List<Integer> dayOfWeekList = new LinkedList<Integer>();
		for (int day = 1; day <= 7; day++) {
			String paramName = params.makeIndexed("day-of-week", day);
			if (params.exists(paramName)) {
				params.ensureCondition(paramName, params.isCheckboxBool(paramName));
				dayOfWeekList.add(day);
			}
		}
		return dayOfWeekList;
!!!766210.java!!!	checkSchedulingInfoParams(inout request : HttpServletRequest, inout dayOfWeekList : List<Integer>) : void
		if (!request.getParameter("historical-start-date").equals("")) {
			try {
				historicalDateFormat.parse(request.getParameter("historical-start-date"));
			} catch (ParseException e) {
				params.checkCondition(false, "Enter analysis start date in correct format (\""
					+ historicalDateFormat.toPattern() + "\")");
			}
		}
		if (!request.getParameter("historical-end-date").equals("")) {
			try {
				historicalDateFormat.parse(request.getParameter("historical-end-date"));
			} catch (ParseException e) {
				params.checkCondition(false, "Enter analysis end date in correct format (\""
					+ historicalDateFormat.toPattern() + "\")");
			}
		}
		if (request.getParameter("historical-start-date").equals("")
				&& !request.getParameter("historical-end-date").equals("")
				&& errorMessages.isEmpty()) {
			Date endDate;
			try {
				endDate = historicalDateFormat.parse(request.getParameter("historical-end-date"));
			} catch (ParseException e) {
				throw new AssertionError("Format of the analysis date should be checked now.");
			}
			Date now = new Date();
			params.checkCondition(now.compareTo(endDate) < 0,
			"Analysis end date must be in the future when no analysis start date is entered.");
		}
		if (!request.getParameter("historical-start-date").equals("")
				&& !request.getParameter("historical-end-date").equals("")
				&& errorMessages.isEmpty()) {
			Date startDate;
			Date endDate;
			try {
				startDate = historicalDateFormat.parse(request.getParameter("historical-start-date"));
				endDate = historicalDateFormat.parse(request.getParameter("historical-end-date"));
			} catch (ParseException e) {
				throw new AssertionError("Format of the historical date should be checked now.");
			}
			params.checkCondition(startDate.compareTo(endDate) < 0,
			"Analysis start date and analysis end date must be correctly ordered.");
		}

		params.checkCondition(isCronField(request.getParameter("hours"), 0, 23),
			"Enter hours in correct format.");
		params.checkCondition(isCronField(request.getParameter("minutes"), 0, 59),
			"Enter minutes in correct format.");
		if (request.getParameter("periodicity").equals(SCHEDULER_PERIODICITY_DAYS_OF_WEEK)) {
			params.checkCondition(dayOfWeekList.size() > 0, "Select at least one day of the week.");
		}
		if (request.getParameter("periodicity").equals(SCHEDULER_PERIODICITY_DAYS_OF_MONTH)) {
			params.checkCondition(request.getParameter("days-of-month").length() > 0,
				"Select at least one day of the month.");
		}
!!!766338.java!!!	buildSchedulerInfoFromParams(inout request : HttpServletRequest, inout dayOfWeekList : List<Integer>, inout isPaused : boolean) : SchedulerInfo
		try {
			return new SchedulerInfo(
				cronFieldToTimeArray(request.getParameter("minutes")),
				cronFieldToTimeArray(request.getParameter("hours")),
				request.getParameter("periodicity").equals(SCHEDULER_PERIODICITY_DAYS_OF_MONTH)
					? cronFieldToTimeArray(request.getParameter("days-of-month"))
					: new int[] { -1 },
				new int[] { -1 },
				request.getParameter("periodicity").equals(SCHEDULER_PERIODICITY_DAYS_OF_WEEK)
					? integerListToTimeArray(dayOfWeekList)
					: new int[] { -1},
				-1,
				isPaused,
				!request.getParameter("historical-start-date").equals("")
					? historicalDateFormat.parse(request.getParameter("historical-start-date")).getTime()
					: VersionProvider.NO_START,
				!request.getParameter("historical-end-date").equals("")
					? historicalDateFormat.parse(request.getParameter("historical-end-date")).getTime()
					: VersionProvider.NO_END
			);
		} catch (ParseException e) {
			throw new AssertionError("Format of the historical date should be checked now.");
		}
!!!766466.java!!!	appendScheduleInfoDataFromParams(inout request : HttpServletRequest, inout data : HashMap<String, Object>, inout dayOfWeekList : List<Integer>) : void
		data.put("historicalStartDate", request.getParameter("historical-start-date"));
		data.put("historicalEndDate", request.getParameter("historical-end-date"));
		data.put("periodicity", request.getParameter("periodicity"));
		data.put("daysOfWeek", integerListToIntArray(dayOfWeekList));
		data.put("daysOfMonth", cronFieldToTimeArray(request.getParameter("days-of-month")));
		data.put("hours", request.getParameter("hours"));
		data.put("minutes", request.getParameter("minutes"));
!!!766594.java!!!	formatHistoricalDate(in date : long, in emptyValue : long) : String
		return date != emptyValue
			? historicalDateFormat.format(new Date(date))
			: "";
!!!766722.java!!!	appendChedulerInfoDataFromSchedulerInfo(inout data : HashMap<String,
			Object>, inout schedulerInfo : SchedulerInfo) : void
		data.put("historicalStartDate", schedulerInfo != null
			? formatHistoricalDate(schedulerInfo.getHistoricalStartDate(), VersionProvider.NO_START)
			: "");
		data.put("historicalEndDate", schedulerInfo != null
			? formatHistoricalDate(schedulerInfo.getHistoricalEndDate(), VersionProvider.NO_END)
			: "");
		data.put("periodicity", schedulerInfo != null
			? computePeriodicityFromScheduleInfo(schedulerInfo)
			: SCHEDULER_PERIODICITY_DAYS_OF_WEEK);
		data.put("daysOfWeek", schedulerInfo != null
			? schedulerInfo.getDaysOfWeek()
			: new int[0]);
		data.put("daysOfMonth", schedulerInfo != null
			? schedulerInfo.getDaysOfMonth()
			: new int[0]);
		data.put("hours", schedulerInfo != null
			? timeArrayToCronField(schedulerInfo.getHours())
			: "");
		data.put("minutes", schedulerInfo != null
			? timeArrayToCronField(schedulerInfo.getMinutes())
			: "");
!!!766850.java!!!	handleBenchmarkManagerException(inout e : BenchmarkManagerException) : void
		errorMessages.addTextMessage("Benchmark Manager reports an error: "
			+ e.getMessage());
		
		page.setTitle("Benchmark Manager error");
		page.writeHeader();
		page.writeErrorMessages();
		page.writeFooter();
		return;
!!!766978.java!!!	analysisList(inout request : HttpServletRequest, inout response : HttpServletResponse) : void
		if (params.exists("action")) {
			String action = request.getParameter("action");
			if (action.equals("added")) {
				infoMessages.addTextMessage("Analysis added successfully.");
			} else if (action.equals("deleted")) {
				infoMessages.addTextMessage("Analysis deleted successfully.");
			} else if (action.equals("created")) {
				infoMessages.addTextMessage("Experiment created successfully.");
			} else {
				throw new InvalidParamValueException("Parameter \"action\" has invalid value.");
			}
		}

		BenchmarkManagerGUIInterface bm = benchmarkManager.get();
		AnalysisEntityInterface root = bm.getAnalysisInterface();
		AnalysisEntity[] analyses = root.getEntities();
							
		HashMap<String, Object> data = new HashMap<String, Object>();
		data.put("analyses", analyses);
				
		page.setTitle("Analyses");
		page.writeHeader();
		page.writeTemplate("benchmarks-analysis-list", data);
		page.writeFooter();
!!!767106.java!!!	analysisAdd(inout request : HttpServletRequest, inout response : HttpServletResponse) : void
		HashMap<String, Object> data = new HashMap<String, Object>();

		if (params.exists("add")) {
			params.ensureExist("name", "description", "type");
		
			Set<String> types = new HashSet<String>();
			types.add(ANALYSIS_TYPE_COMPARISON);
			types.add(ANALYSIS_TYPE_REGRESSION);
			params.ensureCondition("type", params.isInSet("type", types));

			params.checkCondition(params.notEmpty("name"), "Enter non-empty name.");
		
			if (errorMessages.isEmpty()) {
				try {
					benchmarkManager.get().createAnalysis(
						request.getParameter("name"),
						request.getParameter("description"),
						request.getParameter("type").equals(ANALYSIS_TYPE_REGRESSION)
					);
				} catch (BenchmarkManagerException e) {
					errorMessages.addTextMessage("Error adding analysis: " + e.getMessage() + ".");
				}
			}
						
			if (errorMessages.isEmpty()) {
				HashMap<String, String> actionParams = new HashMap<String, String>();
				actionParams.put("action", "added");
				page.redirectToAction("analysis-list", actionParams);
				return;
			} else {
				data.put("name", request.getParameter("name"));
				data.put("description", request.getParameter("description"));
				data.put("type", request.getParameter("type"));
				data.put("callbackRScripts", new CallbackRScripts(
					request.getParameter("complete-run-script"),
					request.getParameter("complete-binary-script"),
					request.getParameter("complete-experiment-script"),
					request.getParameter("incomplete-binary-script"),
					request.getParameter("incomplete-experiment-script")
				));
			}
		} else if (params.exists("cancel")) {
			page.redirectToAction("analysis-list");
			return;
		} else {
			String type;
			if (params.exists("type")) {
				Set<String> types = new HashSet<String>();
				types.add(ANALYSIS_TYPE_COMPARISON);
				types.add(ANALYSIS_TYPE_REGRESSION);
				params.ensureCondition("type", params.isInSet("type", types));

				type = request.getParameter("type");
			} else {
				type = ANALYSIS_TYPE_COMPARISON;
			}
			
			data.put("name", "");
			data.put("description", "");
			data.put("type", type);
		}
		
		page.setTitle("Add analysis");
		page.setFocusedElement(0, "name");
		page.writeHeader();
		page.writeTemplate("benchmarks-analysis-add", data);
		page.writeFooter();
!!!767234.java!!!	analysisDelete(inout request : HttpServletRequest, inout response : HttpServletResponse) : void
		params.ensureExists("aid");
		
		params.ensureCondition("aid", params.isLong("aid"));
		
		try {
			benchmarkManager.get().getAnalysisInterface().deleteEntity(
				(AID) AID.valueOf(request.getParameter("aid"))
			);
		} catch (BenchmarkManagerException e) {
			handleBenchmarkManagerException(e);
			return;
		} catch (IllegalArgumentException e) {
			throw new InvalidParamValueException("Parameter \"aid\" has invalid value.");
		}
		
		HashMap<String, String> actionParams = new HashMap<String, String>();
		actionParams.put("action", "deleted");
		page.redirectToAction("analysis-list", actionParams);
!!!767362.java!!!	analysisDetails(inout request : HttpServletRequest, inout response : HttpServletResponse) : void
		String activeSheet = "general-sheet";

		if (params.exists("action")) {
			String action = request.getParameter("action");
			if (action.equals("rescheduled")) {
				infoMessages.addTextMessage("Analysis rescheduled successfully.");
				activeSheet = "scheduling-info-sheet";
			} else if (action.equals("paused")) {
				infoMessages.addTextMessage("Analysis paused successfully.");
				activeSheet = "scheduling-info-sheet";
			} else if (action.equals("resumed")) {
				infoMessages.addTextMessage("Experiment resumed successfully.");
				activeSheet = "scheduling-info-sheet";
			} else {
				throw new InvalidParamValueException("Parameter \"action\" has invalid value.");
			}
		}

		params.ensureExists("aid");
		params.ensureCondition("aid", params.isLong("aid"));
		AID aid = AID.valueOf(request.getParameter("aid"));
				
		AnalysisEntityInterface analysisInterface = benchmarkManager.get().getAnalysisInterface();
		AnalysisEntity analysis = null;
		ExperimentEntity[] experiments = null;
		try {
			analysis = analysisInterface.getEntity(aid);
			experiments = analysisInterface.getSubentityInterface(aid).getEntities(); 
		} catch (IllegalArgumentException e) {
			throw new InvalidParamValueException("Parameter \"aid\" has invalid value.");
		}

		LogRecord[] logRecords = null;
		try {
			logRecords = getLogRecordsForTasks(getTasksForExperiments(buildExperiments(aid)));
		} catch (LogStorageException e) {
			errorMessages.addTextMessage("Error retrieving logs: " + e.getMessage());
		}	

		HashMap<String, Object> data = new HashMap<String, Object>();

		if (analysis.isRegression()) {
			if (params.exists("change")) {
				List<Integer> dayOfWeekList = ensureSchedulingInfoParams(request);
				checkSchedulingInfoParams(request, dayOfWeekList);

				if (errorMessages.isEmpty()) {
					try {
						SchedulerInfo oldSchedulerInfo = ((RegressionAnalysisEntity) analysis).getSchedule();
						analysisInterface.reschedule(aid, buildSchedulerInfoFromParams(
							request,
							dayOfWeekList,
							oldSchedulerInfo.isPaused()
						));
					} catch (BenchmarkManagerException e) {
						handleBenchmarkManagerException(e);
						return;
					}

					HashMap<String, String> actionParams = new HashMap<String, String>();
					actionParams.put("aid", aid.toString());
					actionParams.put("action", "rescheduled");
					page.redirectToAction("analysis-details", actionParams);
					return;
				} else {
					appendScheduleInfoDataFromParams(request, data, dayOfWeekList);
					activeSheet = "scheduling-info-sheet";
				}
			} else if (params.exists("pause")) {
				SchedulerInfo schedulerInfo = ((RegressionAnalysisEntity) analysis).getSchedule();

				params.ensureCondition("pause", !schedulerInfo.isPaused());
				try {
					analysisInterface.reschedule(aid, new SchedulerInfo(
						schedulerInfo.getMinutes(),
						schedulerInfo.getHours(),
						schedulerInfo.getDaysOfMonth(),
						schedulerInfo.getMonths(),
						schedulerInfo.getDaysOfWeek(),
						schedulerInfo.getYear(),
						true,
						schedulerInfo.getHistoricalStartDate(),
						schedulerInfo.getHistoricalEndDate()
					));
				} catch (BenchmarkManagerException e) {
					handleBenchmarkManagerException(e);
					return;
				}

				HashMap<String, String> actionParams = new HashMap<String, String>();
				actionParams.put("aid", aid.toString());
				actionParams.put("action", "paused");
				page.redirectToAction("analysis-details", actionParams);
			} else if (params.exists("resume")) {
				SchedulerInfo schedulerInfo = ((RegressionAnalysisEntity) analysis).getSchedule();

				params.ensureCondition("resume", schedulerInfo.isPaused());

				try {
					analysisInterface.reschedule(aid, new SchedulerInfo(
						schedulerInfo.getMinutes(),
						schedulerInfo.getHours(),
						schedulerInfo.getDaysOfMonth(),
						schedulerInfo.getMonths(),
						schedulerInfo.getDaysOfWeek(),
						schedulerInfo.getYear(),
						false,
						schedulerInfo.getHistoricalStartDate(),
						schedulerInfo.getHistoricalEndDate()
					));
				} catch (BenchmarkManagerException e) {
					handleBenchmarkManagerException(e);
					return;
				}

				HashMap<String, String> actionParams = new HashMap<String, String>();
				actionParams.put("aid", aid.toString());
				actionParams.put("action", "resumed");
				page.redirectToAction("analysis-details", actionParams);
			} else {
				appendChedulerInfoDataFromSchedulerInfo(
					data, 
					((RegressionAnalysisEntity) analysis).getSchedule()
				);
			}
		}

		data.put("analysis", analysis);
		data.put("experiments", experiments);
		data.put("logRecords", logRecords);
		data.put("logFields", EnumSet.of(
			LogRecord.Fields.CONTEXT,
			LogRecord.Fields.TASK_ID,
			LogRecord.Fields.HOSTNAME,
			LogRecord.Fields.TIMESTAMP,
			LogRecord.Fields.LEVEL,
			LogRecord.Fields.MESSAGE
		));
		data.put("logEntityColumns", new LogEntityColumn[0]);
		data.put("activeSheet", activeSheet);
		
		page.setTitle("Analysis details: " + analysis.getName());
		page.writeHeader();
		page.writeTemplate("benchmarks-analysis-details", data);
		page.writeFooter();
!!!767490.java!!!	taskEntriesFor(inout taskDescriptors : TaskDescriptor) : TaskEntry
			TaskEntry[] result = new TaskEntry[taskDescriptors.length];
			for (int i = 0; i < taskDescriptors.length; i++) {
				/* We try to get the entry form the Task Manager. If this fails, we
				 * build the entry in a do-it-yourself way :-) The entry built without
				 * the Task Manager's cooperation will not have many fields filled
				 * correctly.
				 * 
				 * Of course, this is an ugly hack, but there is a little time to do
				 * something better.
				 */
				try {
					result[i] = taskManager.get().getTaskById(
						taskDescriptors[i].getTaskTid(),
						taskDescriptors[i].getContextId()
					);
				} catch (IllegalArgumentException e) {
					result[i] = new TaskEntry(
						taskDescriptors[i].getTaskTid(),
						taskDescriptors[i].getContextId(),
						"dummy",
						taskDescriptors[i].getTaskName(),
						taskDescriptors[i].getTaskDescription(),
						null,
						"dummy",
						"dummy",
						"dummy",
						null,
						null,
						false,
						0,
						0
					);
				}
			}
			return result;
!!!767618.java!!!	experimentDetails(inout request : HttpServletRequest, inout response : HttpServletResponse) : void
		params.ensureExist("aid", "eid");

		params.ensureCondition("aid", params.isLong("aid"));
		params.ensureCondition("eid", params.isLong("eid"));

		AnalysisEntity analysis = null;
		try {
			analysis = benchmarkManager.get().getAnalysisInterface().getEntity(
				AID.valueOf(request.getParameter("aid"))
			);
		} catch (IllegalArgumentException e) {
			throw new InvalidParamValueException("Parameter \"aid\" has invalid value.");
		}
		
		Experiment experiment = null;
		try {
			experiment = buildExperiment(
				AID.valueOf(request.getParameter("aid")),
				EID.valueOf(request.getParameter("eid"))
			);
		} catch (IllegalArgumentException e) {
			throw new InvalidParamValueException("Parameter \"eid\" has invalid value.");
		}
		
		TaskListMode mode = null;
		if (experiment.getStatus().equals(EntityStatus.CONFIGURED)
				|| experiment.getStatus().equals(EntityStatus.DISPATCHED)) {
			mode = TaskListMode.BEFORE_EXECUTION;
		} else {
			try {
				mode = taskManager.get().isContextRegistered(experiment.getContextId())
					? TaskListMode.NORMAL
					: TaskListMode.AFTER_EXECUTION;
			} catch (LogStorageException e) {
				errorMessages.addTextMessage("Error retrieving logs: " + e.getMessage());
			}
		}
		
		LogRecord[] logRecords = null;
		try {
			logRecords = getLogRecordsForTasks(experiment.getAggregatedTasks());
		} catch (LogStorageException e) {
			errorMessages.addTextMessage("Error retrieving logs: " + e.getMessage());
		}	

		HashMap<String, Object> data = new HashMap<String, Object>();
		data.put("analysis", analysis);
		data.put("experiment", experiment);
		data.put("mode", mode);
		data.put("logRecords", logRecords);
		data.put("logFields", EnumSet.of(
			LogRecord.Fields.CONTEXT,
			LogRecord.Fields.TASK_ID,
			LogRecord.Fields.HOSTNAME,
			LogRecord.Fields.TIMESTAMP,
			LogRecord.Fields.LEVEL,
			LogRecord.Fields.MESSAGE
		));
		data.put("logEntityColumns", new LogEntityColumn[0]);
		
		page.setTitle("Experiment details: " + experiment.getName());
		page.writeHeader();
		page.writeTemplate("benchmarks-experiment-details", data);
		page.writeFooter();
!!!767746.java!!!	ensureAndGetState(inout request : HttpServletRequest) : BenchmarkRunState
		BenchmarkRunState result = (BenchmarkRunState) request.getSession().getAttribute(
				BenchmarkRunState.SESSION_PREFIX + request.getParameter("brid")
		);
		params.ensureCondition("brid", result != null);
		return result;
!!!767874.java!!!	ensureWizardScreenAllowed(inout state : BenchmarkRunState, inout displayedScreen : WizardScreen) : void
		if (displayedScreen.ordinal() > state.getLastWizardScreen().ordinal() + 1) {
			throw new IllegalWizardScreenSequenceException("Wizard screen ordering mismatch.");
		}
!!!768002.java!!!	runSelectPlugin(inout request : HttpServletRequest, inout response : HttpServletResponse) : void
		BenchmarkRunState state = null;
		PEID pluginId = null;
		BeenPluginDescriptor[] plugins = benchmarkManager.get().getAvailablePlugins();
		
		if (params.exists("next")) {
			params.ensureExist("brid");
			
			state = ensureAndGetState(request);
			
			params.checkCondition(params.exists("plugin-id"),
				"Select one of the plugins.");
			
			if (errorMessages.isEmpty()) {
				pluginId = PEID.valueOf(request.getParameter("plugin-id"));

				BeenPluginDescriptor selectedPlugin = null;
				for (BeenPluginDescriptor plugin: plugins) {
					if (plugin.getID().equals(pluginId)) {
						selectedPlugin = plugin;
						break;
					}
				}
				if (selectedPlugin != null) {
					state.setPlugin(selectedPlugin);
				} else {
					throw new InvalidParamValueException("Parameter \"plugin-id\" has invalid value.");
				}
				
				HashMap<String, String> actionParams = new HashMap<String, String>();
				actionParams.put("brid", state.getBrid().toString());
				page.redirectToAction("run-select-create-experiment", actionParams);
				return;
			} else {
				pluginId = PEID.INVALID;
			}
		} else if (params.exists("cancel")) {
			page.redirectToAction("analysis-list");
			return;
		} else {
			params.ensureExists("aid");

			params.ensureCondition("aid", params.isLong("aid"));
			AID aid = AID.valueOf(request.getParameter("aid"));
			AnalysisEntity analysis = benchmarkManager.get().getAnalysisInterface().getEntity(aid);
			if (analysis.isRegression()) {
				params.ensureCondition("aid", ((RegressionAnalysisEntity) analysis).getSchedule() == null);
			}

			/* We begin new benchmark run, so we generate new variable for holding
			 * a state of thw wizard a and save it to the session attribute under
			 * ID generated by the ID Manager.
			 */
			state = new BenchmarkRunState(
				IDManager.getInstance().getNext(BRID.class)
			);
			state.setAid(aid);
			state.setIsRegression(
				benchmarkManager.get().getAnalysisInterface().getEntity(aid).isRegression()
			);
			state.setLastWizardScreen(BenchmarkRunState.WizardScreen.SELECT_PLUGIN);
			request.getSession().setAttribute(
				BenchmarkRunState.SESSION_PREFIX + state.getBrid().toString(),
				state
			);
			if (state.getPlugin() == null) {
				pluginId = plugins.length > 0 ? plugins[0].getID() : PEID.INVALID;
			} else {
				pluginId = state.getPlugin().getID();
			}
		}

		HashMap<String, Object> data = new HashMap<String, Object>();
		data.put("brid", state.getBrid());
		data.put("plugins", plugins);
		data.put("pluginId", pluginId);
	
		page.setTitle("Create benchmark experiment: Select plugin"); 
		page.setFocusedElement(0, "plugin-id");
		page.writeHeader();
		page.writeTemplate("benchmarks-run-select-plugin", data);
		page.writeFooter();
!!!768130.java!!!	runSelectCreateExperiment(inout request : HttpServletRequest, inout response : HttpServletResponse) : void
		params.ensureExists("brid");
		
		BenchmarkRunState state = ensureAndGetState(request);
		ensureWizardScreenAllowed(state, BenchmarkRunState.WizardScreen.SELECT_CREATE_EXPERIMENT);
		String newExperimentName = null;
		String newExperimentDescription = null;
		
		if (params.exists("next")) {
			params.ensureExist("new-experiment-name", "new-experiment-description");
			
			params.checkCondition(params.notEmpty("new-experiment-name"),
			"Enter non-empty name.");
			
			newExperimentName = request.getParameter("new-experiment-name");
			newExperimentDescription = request.getParameter("new-experiment-description");
			
			if (errorMessages.isEmpty()) {
				state.setExperimentDescription(newExperimentDescription);
				state.setExperimentName(newExperimentName);
				if (state.getIsRegression()) {
					state.setLastWizardScreen(BenchmarkRunState.WizardScreen.SELECT_CREATE_EXPERIMENT);
				} else {
					/* In comparison analysis there is no scheduling info step in the
					 * wizard, so we just skip it and behave like we went through it
					 * (this is little hack to simplify the state checking code which
					 * assumes that we go through each step). 
					 */
					state.setLastWizardScreen(BenchmarkRunState.WizardScreen.SCHEDULING_INFO);
				}
				
				HashMap<String, String> actionParams = new HashMap<String, String>();
				actionParams.put("brid", state.getBrid().toString());
				if (state.getIsRegression()) {
					page.redirectToAction("run-scheduling-info", actionParams);
				} else {
					page.redirectToAction("run-configure-plugin", actionParams);
				}
			}
		} else if (params.exists("previous")) {
			HashMap<String, String> actionParams = new HashMap<String, String>();
			actionParams.put("aid", state.getAid().toString());
			page.redirectToAction("run-select-plugin", actionParams);
			return;
		} else if (params.exists("cancel")) {
			page.redirectToAction("analysis-list");
			return;
		} else {
			newExperimentName = state.getExperimentName() != null
				? state.getExperimentName()
				: "";
			newExperimentDescription = state.getExperimentDescription() != null
				? state.getExperimentDescription()
				: "";
		}

		HashMap<String, Object> data = new HashMap<String, Object>();
		data.put("brid", state.getBrid());
		data.put("newExperimentName", newExperimentName);
		data.put("newExperimentDescription", newExperimentDescription);		
	
		page.setTitle("Create benchmark experiment: Choose experiment name and description"); 
		page.setFocusedElement(0, "new-experiment-name");
		page.writeHeader();
		page.writeTemplate("benchmarks-run-select-create-experiment", data);
		page.writeFooter();
!!!768258.java!!!	runSchedulingInfo(inout request : HttpServletRequest, inout response : HttpServletResponse) : void
		params.ensureExists("brid");
		
		BenchmarkRunState state = ensureAndGetState(request);
		ensureWizardScreenAllowed(state, BenchmarkRunState.WizardScreen.SCHEDULING_INFO);

		HashMap<String, Object> data = new HashMap<String, Object>();
		
		if (params.exists("next")) {
			List<Integer> dayOfWeekList = ensureSchedulingInfoParams(request);
			checkSchedulingInfoParams(request, dayOfWeekList);
				
			if (errorMessages.isEmpty()) {
				state.setSchedulerInfo(buildSchedulerInfoFromParams(
					request,
					dayOfWeekList,
					false
				));
				state.setLastWizardScreen(BenchmarkRunState.WizardScreen.SCHEDULING_INFO);
				
				HashMap<String, String> actionParams = new HashMap<String, String>();
				actionParams.put("brid", state.getBrid().toString());
				page.redirectToAction("run-configure-plugin", actionParams);
				return;
			} else {
				appendScheduleInfoDataFromParams(request, data, dayOfWeekList);
			}
		} else if (params.exists("previous")) {
			HashMap<String, String> actionParams = new HashMap<String, String>();
			actionParams.put("aid", state.getAid().toString());
			page.redirectToAction("run-select-plugin", actionParams);
			return;
		} else if (params.exists("cancel")) {
			page.redirectToAction("analysis-list");
			return;
		} else {
			SchedulerInfo schedulerInfo = state.getSchedulerInfo();
			appendChedulerInfoDataFromSchedulerInfo(data, schedulerInfo);
		}

		data.put("brid", state.getBrid());
	
		page.setTitle("Create benchmark experiment: Scheduling information"); 
		page.writeHeader();
		page.writeTemplate("benchmarks-run-scheduling-info", data);
		page.writeFooter();
!!!768386.java!!!	runConfigurePlugin(inout request : HttpServletRequest, inout response : HttpServletResponse) : void
		params.ensureExists("brid");
		
		BenchmarkRunState state = ensureAndGetState(request);
		ensureWizardScreenAllowed(state, BenchmarkRunState.WizardScreen.CONFIGURE_PLUGIN);
		Screen screen;
		String nullScreenAction = null;
		
		if (params.exists("next") || params.exists("previous")) {
			screen = state.getCurrentScreen();
			ScreenHandler screenHandler = new ScreenHandler(request);
			screenHandler.ensure(screen);
			screenHandler.check(screen);
			screenHandler.updateItems(screen);
			if (errorMessages.isEmpty()) {
				try {
					if (params.exists("next")) {
						screen = benchmarkManager.get().getNextConfiguratorScreen(state.getBrid(), screen);
						nullScreenAction = "run-select-hosts-for-roles";
					} else if (params.exists("previous")) {
						screen = benchmarkManager.get().getPreviousConfiguratorScreen(state.getBrid(), screen);
						if (state.getIsRegression()) {
							nullScreenAction = "run-scheduling-info";
						} else {
							nullScreenAction = "run-select-create-experiment";
						}
					} else {
						assert false: "You just reached an impossible state :-)";
					}
				} catch (ApplicationException e) {
					throw new ComponentInitializationException("Error getting next configurator screen: " + e.getMessage());
				}
			}
		} else if (params.exists("cancel")) {
			page.redirectToAction("analysis-list");
			return;
		} else {
			try {
				screen = benchmarkManager.get().getFirstConfiguratorScreen(
					state.getBrid(),
					state.getAid(),
					state.getExperimentName(),
					state.getExperimentDescription(),
					state.getPlugin().getID());
				nullScreenAction = "run-select-hosts-for-roles";
			} catch (ApplicationException e) {
				throw new ComponentInitializationException("Error getting first "
					+ "configurator screen: " + e.getMessage());
			}
		}

		/* No more screens? Go to the confirmation step then. */
		if (screen == null) {
			state.setLastWizardScreen(BenchmarkRunState.WizardScreen.CONFIGURE_PLUGIN);

			HashMap<String, String> actionParams = new HashMap<String, String>();
			actionParams.put("brid", state.getBrid().toString());
			page.redirectToAction(nullScreenAction, actionParams);
			return;
		}			

		state.setCurrentScreen(screen);

		HashMap<String, Object> data = new HashMap<String, Object>();
		data.put("brid", state.getBrid());
		data.put("screen", screen);
		
		page.setTitle("Create benchmark experiment: Configure plugin"); 
		page.writeHeader();
		page.writeTemplate("benchmarks-run-configure-plugin", data);
		page.writeFooter();
!!!768514.java!!!	getRolesFormBenchmarkManager(inout state : BenchmarkRunState) : Role
		Role[] rolesFromBenchmarkManager = null; 
		try {
			rolesFromBenchmarkManager
				= benchmarkManager.get().getBenchmarkRoles(state.getBrid());
		} catch (ValueNotFoundException e) {
			errorMessages.addTextMessage("Error retrieving role information from "
				+ "the Benchmark Manager - error in RSL host specification: "
				+ e.getMessage() + " Plase go back in the wizard and correct the "
				+ "RSL host specification.");
		} catch (ValueTypeIncorrectException e) {
			errorMessages.addTextMessage("Error retrieving role information from "
				+ "the Benchmark Manager - error in RSL host specification: "
				+ e.getMessage() + " Plase go back in the wizard and correct the "
				+ "RSL host specification.");
		} catch (HostManagerException e) {
			errorMessages.addTextMessage("Error retrieving role information from "
				+ "the Benchmark Manager: " + e.getMessage());
		} catch (BenchmarkManagerException e) {
			errorMessages.addTextMessage("Error retrieving role information from "
				+ "the Benchmark Manager: " + e.getMessage());
		}
		return rolesFromBenchmarkManager;
!!!768642.java!!!	filterSelectedHosts(in selectedHosts : String, in availableHosts : String) : String
		List<String> result = new LinkedList<String>();
		for (String selectedHost: selectedHosts) {
			for (String availableHost: availableHosts) {
				if (selectedHost.equals(availableHost)) {
					result.add(selectedHost);
				}
			}
		}
		return result.toArray(new String[result.size()]);
!!!768770.java!!!	adjustRoleHosts(inout state : BenchmarkRunState, inout newRoles : Role) : void
		Role[] roles = state.getRoles();
		
		for (int i = 0; i < roles.length; i++) {
			for (Role newRole: newRoles) {
				if (roles[i].getName().equals(newRole.getName())) {
					roles[i] = new Role(
						roles[i].getName(),
						roles[i].getCount(),
						newRole.getHosts(),
						filterSelectedHosts(roles[i].getSelectedHosts(), newRole.getHosts())
					);
				}
			}
		}
		
		state.setRoles(roles);
!!!768898.java!!!	preselectHostsToRoles(inout state : BenchmarkRunState) : void
		Role[] roles = state.getRoles();
		
		for (int i = 0; i < roles.length; i++) {
			String[] hosts = roles[i].getHosts();
			int selectedHostCount = Math.min(roles[i].getCount(), hosts.length);
			String[] selectedHosts = new String[selectedHostCount];
			
			for (int j = 0; j < selectedHostCount; j++) {
				selectedHosts[j] = hosts[j];
			}
			
			roles[i] = new Role(
				roles[i].getName(),
				roles[i].getCount(),
				hosts,
				selectedHosts
			);
		}
		
		state.setRoles(roles);
!!!769026.java!!!	runSelectHostsForRoles(inout request : HttpServletRequest, inout response : HttpServletResponse) : void
		params.ensureExists("brid");
		
		BenchmarkRunState state = ensureAndGetState(request);
		ensureWizardScreenAllowed(state, BenchmarkRunState.WizardScreen.SELECT_HOSTS_FOR_ROLES);
		
		if (params.exists("next")) {
			Role[] oldRoles = state.getRoles();
			Role[] newRoles = new Role[oldRoles.length];
			for (int i = 0; i < oldRoles.length; i++) {
				String[] selectedHosts
					= request.getParameterValues(params.makeIndexed("role-hosts", i));
				if (selectedHosts == null) {
					selectedHosts = new String[0];
				}
				params.checkCondition(selectedHosts.length <= oldRoles[i].getCount(),
					"Too many hosts selected for role \"" + oldRoles[i].getName() + "\".");
				params.checkCondition(selectedHosts.length >= oldRoles[i].getCount(),
					"Too few hosts selected for role \"" + oldRoles[i].getName() + "\".");
				newRoles[i] = new Role(
					oldRoles[i].getName(),
					oldRoles[i].getCount(),
					oldRoles[i].getHosts(),
					selectedHosts
				);
			}
			state.setRoles(newRoles);
					
			if (errorMessages.isEmpty()) {
				state.setLastWizardScreen(BenchmarkRunState.WizardScreen.SELECT_HOSTS_FOR_ROLES);
				
				HashMap<String, String> actionParams = new HashMap<String, String>();
				actionParams.put("brid", state.getBrid().toString());
				page.redirectToAction("run-callback-r-scripts", actionParams);
			} else {
				/* The role hosts could have changed now, so we update our information
				 * according to the Benchmark Manager.
				 */
				adjustRoleHosts(state, getRolesFormBenchmarkManager(state));
			}
		} else if (params.exists("previous")) {
			HashMap<String, String> actionParams = new HashMap<String, String>();
			actionParams.put("brid", state.getBrid().toString());
			page.redirectToAction("run-configure-plugin", actionParams);
			return;
		} else if (params.exists("cancel")) {
			page.redirectToAction("analysis-list");
			return;
		} else {
			Role[] rolesFromBenchmarkManager = getRolesFormBenchmarkManager(state);
			
			if (state.getRoles() == null) {
				state.setRoles(rolesFromBenchmarkManager);

				/* Skip this step if there are no roles to select hosts into. */
				if (state.getRoles().length == 0) {
					state.setLastWizardScreen(BenchmarkRunState.WizardScreen.SELECT_HOSTS_FOR_ROLES);

					HashMap<String, String> actionParams = new HashMap<String, String>();
					actionParams.put("brid", state.getBrid().toString());
					page.redirectToAction("run-callback-r-scripts", actionParams);
					return;
				}
				
				preselectHostsToRoles(state);
			} else {
				/* The role hosts could have changed now, so we update our information
				 * according to the Benchmark Manager.
				 */
				adjustRoleHosts(state, rolesFromBenchmarkManager);
			}
		}

		Role[] roles = state.getRoles();
		boolean notEnoughHosts = false;
		if (roles != null) {
			for (Role role: roles) {
				if (role.getHosts().length < role.getCount()) {
					notEnoughHosts = true;
				}
			}
		}
		if (notEnoughHosts) {
			errorMessages.addTextMessage("There is not enough hosts to fill one or "
				+ "more roles. Go back in the wizard and edit restrictions for the "
				+ "roles, or add more hosts to the system.");
		}
		
		HashMap<String, Object> data = new HashMap<String, Object>();
		data.put("brid", state.getBrid());
		data.put("roles", roles);
	
		page.setTitle("Create benchmark experiment: Select hosts for roles"); 
		page.writeHeader();
		page.writeTemplate("benchmarks-run-select-hosts-for-roles", data);
		page.writeFooter();
!!!769154.java!!!	runCallbackRScripts(inout request : HttpServletRequest, inout response : HttpServletResponse) : void
		params.ensureExists("brid");
		
		BenchmarkRunState state = ensureAndGetState(request);
		ensureWizardScreenAllowed(state, BenchmarkRunState.WizardScreen.CALLBACK_R_SCRIPTS);
		CallbackRScripts callbackRScripts = null;
		
		if (params.exists("next")) {
			params.ensureExist("complete-run-script", "complete-binary-script",
				"complete-experiment-script", "incomplete-binary-script",
				"incomplete-experiment-script");
			
			callbackRScripts = new CallbackRScripts(
				request.getParameter("complete-run-script"),
				request.getParameter("complete-binary-script"),
				request.getParameter("complete-experiment-script"),
				request.getParameter("incomplete-binary-script"),
				request.getParameter("incomplete-experiment-script")
			);
			
			if (errorMessages.isEmpty()) {
				state.setCallbackRScripts(callbackRScripts);
				state.setLastWizardScreen(BenchmarkRunState.WizardScreen.CALLBACK_R_SCRIPTS);
				
				HashMap<String, String> actionParams = new HashMap<String, String>();
				actionParams.put("brid", state.getBrid().toString());
				page.redirectToAction("run-confirm", actionParams);
			}
		} else if (params.exists("previous")) {
			HashMap<String, String> actionParams = new HashMap<String, String>();
			actionParams.put("brid", state.getBrid().toString());
			page.redirectToAction("run-select-hosts-for-roles", actionParams);
			return;
		} else if (params.exists("cancel")) {
			page.redirectToAction("analysis-list");
			return;
		} else {
			callbackRScripts = state.getCallbackRScripts() != null
				? state.getCallbackRScripts()
				: benchmarkManager.get().getAnalysisCallbackRScripts(state.getBrid());
		}

		HashMap<String, Object> data = new HashMap<String, Object>();
		data.put("brid", state.getBrid());
		data.put("callbackRScripts", callbackRScripts);
	
		page.setTitle("Create benchmark experiment: Callback R scripts"); 
		page.setFocusedElement(0, "complete-run-script");
		page.writeHeader();
		page.writeTemplate("benchmarks-run-callback-r-scripts", data);
		page.writeFooter();
!!!769282.java!!!	runConfirm(inout request : HttpServletRequest, inout response : HttpServletResponse) : void
		params.ensureExists("brid");
		
		BenchmarkRunState state = ensureAndGetState(request);
		ensureWizardScreenAllowed(state, BenchmarkRunState.WizardScreen.CONFIRM);
		
		if (params.exists("finish")) {
			/* We are now dealing with regression analysis - otherwise "next"
			 * parameter would be sent (see below).
			 */
			try {
				/* Calling startExperiment indicates that configuration phase is
				 * finished and configurator is removed from existence.
				 *  
				 * Experiment resulting from configuration is saved as model for
				 * the regression analysis.
				 */
				benchmarkManager.get().startExperiment(
					state.getBrid(),
					state.getSchedulerInfo(),
					state.getCallbackRScripts()
				);
			} catch (BenchmarkManagerException e) {
				errorMessages.addTextMessage("Can't finish creating of the experiment: "
					+ e.getMessage());
			}

			if (errorMessages.isEmpty()) {
				HashMap<String, String> actionParams = new HashMap<String, String>();
				actionParams.put("action", "created");
				page.redirectToAction("analysis-list", actionParams);
				return;
			}
		} else if (params.exists("next")) {
			/* We are now dealing with comparison analysis - otherwise "finish"
			 * parameter would be sent (see above).
			 */
			try {
				TaskDescriptor[] tasks
					= benchmarkManager.get().beginTaskGeneration(state.getBrid());
				state.setTasks(tasks);
			} catch (BenchmarkManagerException e) {
				errorMessages.addTextMessage("Generator error occured: " + e.getMessage());
			}

			if (errorMessages.isEmpty()) {
				state.setLastWizardScreen(BenchmarkRunState.WizardScreen.CONFIRM);

				HashMap<String, String> actionParams = new HashMap<String, String>();
				actionParams.put("brid", state.getBrid().toString());
				page.redirectToAction("run-tasks", actionParams);
				return;
			}
		} else if (params.exists("previous")) {
			HashMap<String, String> actionParams = new HashMap<String, String>();
			actionParams.put("brid", state.getBrid().toString());
			page.redirectToAction("run-callback-r-scripts", actionParams);
			return;
		} else if (params.exists("cancel")) {
			page.redirectToAction("analysis-list");
			return;
		}
		
		HashMap<String, Object> data = new HashMap<String, Object>();

		try {
			benchmarkManager.get().setBenchmarkRoles(state.getBrid(), state.getRoles());
			ExperimentEntity experiment = benchmarkManager.get()
				.getConfiguredExperiment(state.getBrid());
			state.setExperiment(experiment);
			data.put("brid", state.getBrid());
			data.put(
				"analysis",
				benchmarkManager.get().getAnalysisInterface().getEntity(state.getAid())
			);
			data.put("pluginName", state.getPlugin().getName());
			data.put("experimentName", experiment.getName());
			data.put("experimentDescription", experiment.getDescription());	
			data.put("roles", state.getRoles());
			data.put("callbackRScripts", state.getCallbackRScripts());
		} catch (BenchmarkManagerException e) {
			errorMessages.addTextMessage("Error obtaining experiment: " + e.getMessage());
		} 
			
		page.setTitle("Create benchmark experiment: Confirm entered data"); 
		page.writeHeader();
		page.writeTemplate("benchmarks-run-confirm", data);
		page.writeFooter();
!!!769410.java!!!	runTasks(inout request : HttpServletRequest, inout response : HttpServletResponse) : void
		params.ensureExists("brid");
		
		BenchmarkRunState state = ensureAndGetState(request);
		ensureWizardScreenAllowed(state, BenchmarkRunState.WizardScreen.TASKS);
		
		if (params.exists("finish")) {
			try {
				benchmarkManager.get().startExperiment(state.getBrid(), state.getSchedulerInfo(), state.getCallbackRScripts());
			} catch (BenchmarkManagerException e) {
				errorMessages.addTextMessage("Can't submit tasks: " + e.getMessage());
			}
			if (errorMessages.isEmpty()) {
				HashMap<String, String> actionParams = new HashMap<String, String>();
				actionParams.put("action", "created");
				page.redirectToAction("analysis-list", actionParams);
			}
		} else if (params.exists("previous")) {
			HashMap<String, String> actionParams = new HashMap<String, String>();
			actionParams.put("brid", state.getBrid().toString());
			page.redirectToAction("run-confirm", actionParams);
		} else if (params.exists("cancel")) {
			page.redirectToAction("analysis-list");
			return;
		}

		HashMap<String, Object> data = new HashMap<String, Object>();
		data.put("brid", state.getBrid());
		data.put("tasks", state.getTasks());
	
		page.setTitle("Create benchmark experiment: Generated tasks"); 
		page.writeHeader();
		page.writeTemplate("benchmarks-run-tasks", data);
		page.writeFooter();
!!!769538.java!!!	pluginList(inout request : HttpServletRequest, inout response : HttpServletResponse) : void
		if (params.exists("action")) {
			String action = request.getParameter("action");
			if (action.equals("deleted")) {
				infoMessages.addTextMessage("Plugin deleted successfully.");
			} else {
				throw new InvalidParamValueException("Parameter \"action\" has invalid value.");
			}
		}

		PluginsIntegrityReport report
			= benchmarkManager.get().getPluginsIntegrityReport();
					
		HashMap<String, Object> data = new HashMap<String, Object>();
		data.put("report", report);
				
		page.setTitle("Plugins");
		page.writeHeader();
		page.writeTemplate("benchmarks-plugin-list", data);
		page.writeFooter();
!!!769666.java!!!	uploadPackage(in packageName : String, inout inputStream : InputStream) : UploadResult
		UploadStatus status = UploadStatus.ACCEPTED;
		String[] errors = new String[0];
	    
		ServerSocket serverSocket = new ServerSocket(0); // 0 = use any port
		UploadHandle handle = benchmarkManager.get().beginPluginUpload(
			InetAddress.getLocalHost(), 
			serverSocket.getLocalPort()
		);
		byte[] buffer = new byte[BenchmarkManagerGUIInterface.UPLOAD_BUFFER_SIZE];
		int bytesRead;
		Socket socket = serverSocket.accept();
		try {
			OutputStream outputStream = new BufferedOutputStream(
				socket.getOutputStream(),
				BenchmarkManagerGUIInterface.UPLOAD_BUFFER_SIZE
			);
			InputStream bufferedInputStream = new BufferedInputStream(
				inputStream,
				BenchmarkManagerGUIInterface.UPLOAD_BUFFER_SIZE
			);
			try {
				while ((bytesRead = bufferedInputStream.read(buffer)) != -1) {
					outputStream.write(buffer, 0, bytesRead);
				}
			} finally {
				outputStream.close();
				bufferedInputStream.close();
			}
		} finally {
			socket.close();
			serverSocket.close();
	
			/* Wait until the Benchmark Manager finishes its processing and sets some
			 * meaningful state. Finish the upload then.
			 */
			do {
				status = benchmarkManager.get().getPluginUploadStatus(handle);
			} while (status == UploadStatus.UPLOADING || status == UploadStatus.INITIALIZING);
			if (status == UploadStatus.REJECTED) {
				errors = benchmarkManager.get().getRejectedPluginUploadErrorMessages(handle);
			}
			benchmarkManager.get().endPluginUpload(handle);
		}
		return new UploadResult(status, errors);
!!!769794.java!!!	pluginInstall(inout request : HttpServletRequest, inout response : HttpServletResponse) : void
	
		HashMap<String, Object> data = new HashMap<String, Object>();
	
		if (params.exists("action")) {
			String action = request.getParameter("action");
			if (action.equals("installed")) {
				infoMessages.addTextMessage("Pluign installed successfully.");
			} else {
				throw new InvalidParamValueException("Parameter \"action\" has invalid value.");
			}
		}
	
		/* Ideally, the presence of the query parameter "upload" should be checked
		 * here - for consistency with other forms. Unfortunately, when the form
		 * data is sent as "multipart/form-data" (necessary to upload files), Tomcat
		 * doesn't understand it and leaves the request unparsed => we can't
		 * directly access the query parameters.
		 * 
		 * Workaround is to check the request type - if POSTing, we're uploading,
		 * if GETting, we're only viewing the form.
		 */ 
		if (params.requestMethodIsPost()) {
			DiskFileUpload upload = new DiskFileUpload();
			
			List fileItems = null;
			try {
				fileItems = upload.parseRequest(request);
			} catch (FileUploadException e) {
				errorMessages.addTextMessage("Error uploading plugin:" + e.getMessage());
			}
			
			FileItem fileItem = null;
			if (errorMessages.isEmpty()) {
				/* Index "0" is the index of the field in the upload form. Needs to be
				 * synchronised with /webinterface/templates/benchmarks-plugin-upload.jsp.
				 */
				fileItem = (FileItem) fileItems.get(0);
				params.checkCondition(!fileItem.getName().equals(""), "Enter the plugin file.");
			}

			if (errorMessages.isEmpty()) {
				InputStream inputStream = fileItem.getInputStream();
				try {
					try {
						UploadResult result = uploadPackage(fileItem.getName(), inputStream);
						switch (result.getStatus()) {
							case REJECTED:
								String message = "<strong>Plugin was "
									+ "rejected by the Benchmark Manager. Reported errors:</strong><br /><br />";
								message += "<ul>";
								for (String errorMessage: result.getErrorMessages()) {
									message += "<li>";
									message += Routines.htmlspecialchars(errorMessage);
									message += "</li>";
								}
								message += "</ul>";
								errorMessages.addHTMLMessage(message);
								break;
							case ERROR:
								errorMessages.addTextMessage("Error uploading plugin: Benchmark Manager reports error.");
								break;
							default:
								/* Just pass... */
						}
					} finally {
						inputStream.close();
					}
				} catch (IOException e) {
					errorMessages.addTextMessage("Error uploading plugin:" + e.getMessage());
				}
			}
	
			if (errorMessages.isEmpty()) {
				HashMap<String, String> actionParams = new HashMap<String, String>();
				actionParams.put("action", "installed");
				page.redirectToAction("plugin-install", actionParams);
				return;
			} else {
				data.put("file", fileItem.getName());
			}
		} else {
			data.put("file", "");
		}
		
		page.setTitle("Install plugin");
		page.setFocusedElement(0, "file");
		page.writeHeader();
		page.writeTemplate("benchmarks-plugin-install", data);
		page.writeFooter();
!!!769922.java!!!	pluginDelete(inout request : HttpServletRequest, inout response : HttpServletResponse) : void
		params.ensureExists("plugin");
		
		benchmarkManager.get().deletePlugin(request.getParameter("plugin"));
		
		HashMap<String, String> actionParams = new HashMap<String, String>();
		actionParams.put("action", "deleted");
		page.redirectToAction("plugin-list", actionParams);
!!!770050.java!!!	rslHelp(inout request : HttpServletRequest, inout response : HttpServletResponse) : void
		params.ensureExists("type");

		Set<String> types = new HashSet<String>();
		types.add(RSL_HELP_TYPE_HOST);
		params.ensureCondition("type", params.isInSet("type", types));

		HashMap<String, Object> data = new HashMap<String, Object>();
		data.put("type", request.getParameter("type"));

		page.setTitle("RSL help (host specific)");
		page.setShowTitle(false);
		page.setLayoutType(LayoutType.SIMPLE);
		page.writeHeader();
		page.writeTemplate("rsl-help", data);
		page.writeFooter();
