class SofaRunApplication
!!!661506.java!!!	SofaRunApplication()

		
		super();
!!!661634.java!!!	checkRequiredProperties() : void


		checkRequiredProperties(new String[] {
				SofaCommon.PROPERTY_BEEN_SOFA_APP_NAME,
				SofaCommon.PROPERTY_BEEN_SOFA_APP_VERSION
		});
!!!661762.java!!!	run() : void

		
		logInfo("Starting SOFA2 Application");
		
		sofaRegistryHost = getTaskProperty(SofaCommon.PROPERTY_BEEN_SOFA_REGISTRY_HOST, "localhost");
		sofaRegistryPort = SofaCommon.validatePortNumberProperty(SofaCommon.PROPERTY_BEEN_SOFA_REGISTRY_PORT, 
				SofaCommon.DEFAULT_SOFA_REGISTRY_PORT);

		sofaRepositoryHost = getTaskProperty(SofaCommon.PROPERTY_BEEN_SOFA_REPOSITORY_HOST, "localhost");
		sofaRepositoryPort = SofaCommon.validatePortNumberProperty(SofaCommon.PROPERTY_BEEN_SOFA_REPOSITORY_PORT, 
				SofaCommon.DEFAULT_SOFA_REPOSITORY_PORT);
		
		sofaConManHost = getTaskProperty(SofaCommon.PROPERTY_BEEN_SOFA_CONMAN_HOST, "localhost");

		sofaAppName = getTaskProperty(SofaCommon.PROPERTY_BEEN_SOFA_APP_NAME);
		sofaAppVersion = getTaskProperty(SofaCommon.PROPERTY_BEEN_SOFA_APP_VERSION);

		System.setProperty("sofa.agent.repository.hostname", sofaRepositoryHost);
		System.setProperty("sofa.agent.repository.port", String.valueOf(sofaRepositoryPort));
		System.setProperty("sofa.agent.repository.context", SofaCommon.DEFAULT_SOFA_REPOSITORY_CONTEXT);
		System.setProperty("connector.gcm.rmihost", sofaConManHost);
		
		setLogLevel(LogLevel.ALL);
		
		logInfo("Application name: " + sofaAppName);
		logInfo("Application version: " + sofaAppVersion);
		logInfo("SOFA2 Dock Registry host: " + sofaRegistryHost);
		logInfo("SOFA2 Dock Registry port: " + sofaRegistryPort);
		logInfo("SOFA2 Repository host: " + sofaRepositoryHost);
		logInfo("SOFA2 Repository port: " + sofaRepositoryPort);
		logInfo("SOFA2 Connection manager host: " + sofaConManHost);
		
		launchApplication(sofaAppName, sofaAppVersion);
!!!661890.java!!!	launchApplication(in appName : String, in appVersion : String) : void


		DeploymentDockRegistry dockRegistry = lookupDDR(sofaRegistryHost, sofaRegistryPort);
		String[] names = null;
		
		try {
			names = dockRegistry.getAllNames();
		} catch (RemoteException e) {
			throw new TaskException("Unable to retrieve dock names", e);
		}
		
		if (names == null || names.length == 0) {
			logError("No deployments docks are running");
			return;
		}
		
		Object dock = null;
		
		try {
			dock = dockRegistry.lookup(names[0]);
		} catch (RemoteException e) {
			throw new TaskException("Dock look-up failed", e);
		} catch (DockNotFoundException e) {
			throw new TaskException("Dock not found", e);
		}
		
		if (dock instanceof DeploymentDock) {
			logDebug("Dock found. Deploying the application");
			
			ComponentHandle appHandle = null;
			
			try {
				appHandle = ((DeploymentDock) dock).launchApplication(appName, appVersion);
			} catch (RemoteException e) {
				throw new TaskException("Unable to retrieve application handle", e);
			} catch (DeploymentErrorException e) {
				throw new TaskException("Application deployment failed", e);
			}
			
			if (appHandle!= null) {
				logDebug("Starting the application");
				try {
					appHandle.start();
				} catch (RemoteException e) {
					throw new TaskException("Application failed to start", e);
				}
				logDebug("Application has started");
				logInfo("Application component ID: " + appHandle.getComponentId());
				
				checkPointReached(CHECKPOINT_APPLICATION_STARTED, appHandle.getComponentId());
			} else {
				logError("Deployment failed");
				return;
			}
		}
!!!662018.java!!!	lookupDDR(in host : String, in port : int) : DeploymentDockRegistry

		
		final String ddrURL = "//" + sofaRegistryHost + ":" + sofaRegistryPort + "/DeploymentDockRegistry";
		DeploymentDockRegistry dockRegistry = null;
		
		logDebug("Searching for DDR on " + ddrURL);
		
		try {
			dockRegistry = (DeploymentDockRegistry) Naming.lookup(ddrURL);
		} catch (RemoteException e) {
			throw new TaskException("Unable to connect to RMI registry", e);
		} catch (NotBoundException e) {
			throw new TaskException("Deployment Dock Registry not found", e); 
		} catch (MalformedURLException e) {
			throw new AssertionError("Malformed URL for Deployment Dock Registry"); 
		}
		
		logDebug("DDR found");
		
		return dockRegistry;
