class XamplerTaskGenerator
!!!213378.java!!!	registerResults(inout roles : StandardRole) : void
		for (StandardRole br : roles) {
			if (XAMPLER_CLIENT.equals(br.getName())) {
				BenchmarkRole client = (BenchmarkRole)br;
				for (int i=0;  i<br.getCount(); i++) {
					addResultsMapping(XAMPLER_CLIENT + i, client.getUserHosts()[i]);
				}
			}
		}
!!!213506.java!!!	generate() : void
		
		validateParameters();
		setup();
		
		if (isRegression()) {
			generateRegression();
		} else {
			generateComparison();
		}
!!!213634.java!!!	setup() : void
		
		// required property for regression experiment
		if (isRegression() && StringUtils.isEmpty(getExperiment().getProperty("cvs.date"))) {
			throw new GeneratorException("Timestamp revision property 'cvs.date' not set");
		}
		
		// recurrency constants
		runCount = getExperiment().getRunCount();
		binaryCount = getExperiment().getBinaryCount();
		sampleCount = getExperiment().getSamplesCount();
		
		// number of clients to create
		clientsCount = getExperiment().getRole(XAMPLER_CLIENT).getCount();
		
		// versions and suite
		setOmniorbVersion(getExperiment().getProperty(SOFTWARE_VERSION,"4.0.5"));
		// by default we will use 4.0 branch
		setOmniorbBranch(getExperiment().getProperty(OMNIORB_BRANCH,"4.0"));
		setXamplerVersion(getExperiment().getProperty(XAMPLER_VERSION,"1.11"));
	
		xamplerSuite = getExperiment().getProperty(XAMPLER_SUITE,"Ping");
		suitePath = xamplerSuite;
		
		Version version = new Version(getOmniorbBranch());
		if (version.compareTo(new Version("4.1.0")) < 0) {
			suitePath = suitePath + "/" + "omniORB_4.0.X_Linux_GCC";
		} else {
			suitePath = suitePath + "/" + "omniORB_4.1.X_Linux_GCC";
		}
		
		// does the suite use a sub-suite?
		if (getExperiment().getProperty(XAMPLER_SUBSUITE) != null) {
			suitePath =  suitePath +  "/" + getExperiment().getProperty(XAMPLER_SUBSUITE);
		}
		
		// runtime parameters - when property is not set, we will pass empty command line
		serverParams = getExperiment().getProperty("xampler.server.params","");
		clientParams = getExperiment().getProperty("xampler.client.params","");
		
		// package matching conditions
		OMNIORB_BASIC_CONDITIONS = new Condition[]{
				new EqualsCondition<String>("name","omniorb"),
				new ContainsCondition<String>("softwarePlatforms", "linux"),
		};
		
		XAMPLER_BASIC_CONDITIONS = new Condition[]{
				new EqualsCondition<String>("name","xampler"),
				new EqualsCondition<Version>("version",new Version(getXamplerVersion())),
				new ContainsCondition<String>("softwarePlatforms", "linux"),
		};
		
!!!213762.java!!!	setupLoadHosts() : void
		// fill-in unique host names for benchmark roles that we will later collect load from while benchmark runs
		for (StandardRole role : getExperiment().getRoles()) {
			if (role.isBenchmarking()) {
				availableLoadHosts.addAll(Arrays.asList(((BenchmarkRole)role).getUserHosts()));
			}
		}
!!!213890.java!!!	omniorbSource() : TaskDescriptor
		setActiveRole(SERVER_COMPILE);
		
		TaskDescriptor checkout = createTaskDescriptor("native-cvs-download");

		// create revision time stamp
		String timestamp = getExperiment().getProperty("cvs.date");
		
		Date timeStampDate = new Date(Long.parseLong(timestamp));
		String checkoutDate = CVS_DATE_FORMAT.format(timeStampDate);

		// checkout sources from repository
		checkout.addTaskProperties("repository", getExperiment()
				.getProperty("cvs.repository"));
		checkout.addTaskProperties("module", "omni");
		checkout.addTaskProperties("revision", getExperiment()
				.getProperty("cvs.branch"));
		checkout.addTaskProperties("date", checkoutDate);
		addTask(checkout);

		// pack them to standard tar.gz format
		TaskDescriptor createPackage = createTaskDescriptor("omniorb-source-package");
		createPackage.setHostRuntimesAsTask(checkout.getTaskTid());
		createPackage.addTaskProperties("omniorb.source.root", pathBuilder.addWorking(checkout.getTaskTid()).clean());
		addAfterLast(createPackage);

		// create metadata
		TaskDescriptor metadata = createTaskDescriptor("create-package-metadata");
		metadata.setHostRuntimesAsTask(checkout.getTaskTid());
		metadata.addTaskProperties("package-name", "omniorb");
		metadata.addTaskProperties("package-human-name","omniORB: High performance linux ORB");
		metadata.addTaskProperties("version", timestamp);
		metadata.addTaskProperties("hardware-platforms", "i386");
		metadata.addTaskProperties("software-platforms", "linux win32");
		metadata.addTaskProperties("type", PackageType.SOURCE.toString());
		addTask(metadata);

		// upload to software repository
		TaskDescriptor upload = createTaskDescriptor("localupload");
		upload.setHostRuntimesAsTask(checkout.getTaskTid());
		upload.addDependencyCheckPoint(success(createPackage.getTaskTid()));
		upload.addDependencyCheckPoint(success(metadata.getTaskTid()));

		upload.addTaskProperties("dir", pathBuilder.addWorking(
				createPackage.getTaskTid()).clean());
		upload.addTaskProperties("metadata.file", pathBuilder
				.addWorking(metadata.getTaskTid()).add("metadata.xml")
				.clean());
		addTask(upload);
		
		return upload;
		
!!!214018.java!!!	omniorbBuild(inout sourceUpload : TaskDescriptor) : TaskDescriptor
			
			/*
			 * Tasks within the method must run all on the same host so all must 
			 * "use the same host runtime as download"
			 */
		
			// compiling server
			setActiveRole(SERVER_COMPILE);

			// omniorb source download
			TaskDescriptor download = createTaskDescriptor("local-download");
			download.addTaskPropertyObject("rsl",omniorbRSL(PackageType.SOURCE));
			
			// dependency on possible source package creation
			if (sourceUpload != null) {
				download.addDependencyCheckPoint(success(sourceUpload.getTaskTid()));
			}
			addTask(download);

			// create metadata
			TaskDescriptor metadata = createTaskDescriptor("create-package-metadata");
			metadata.setHostRuntimesAsTask(download.getTaskTid());
			
			metadata.addTaskProperties("package-name", "omniorb");
			metadata.addTaskProperties("package-human-name", "omniORB: High performance linux ORB");
			metadata.addTaskProperties("version", getOmniorbVersion());
			metadata.addTaskProperties("hardware-platforms", "i386");
			metadata.addTaskProperties("software-platforms", "linux win32");
			metadata.addTaskProperties("type", PackageType.BINARY.toString());
			metadata.addTaskProperties("binary-identifier",getOpenBinary().toString());
			
			
			addTask(metadata);


			// omniorb compile
			TaskDescriptor compile = createTaskDescriptor("omniorb-compile-linux");
			compile.addDependencyCheckPoint(success(download.getTaskTid()));
			compile.setHostRuntimesAsTask(download.getTaskTid());
			
			compile.addTaskProperties("source.dir",
					pathBuilder.addWorking(download.getTaskTid()).clean());
			compile.addTaskProperties("omniorb.root", "omniorb");
			addTask(compile);
			
			// omniorb binary package upload 
			TaskDescriptor upload = createTaskDescriptor("localupload");
			upload.setHostRuntimesAsTask(download.getTaskTid());
			upload.addDependencyCheckPoint(success(compile.getTaskTid()));
			upload.addDependencyCheckPoint(success(metadata.getTaskTid()));
		
			// dependency: metadata creation
			upload.addTaskProperties("dir",
					pathBuilder.addWorking(compile.getTaskTid()).clean());
			upload.addTaskProperties("metadata.file",
					pathBuilder.addWorking(metadata.getTaskTid()).add("metadata.xml").clean());
			
			addTask(upload);
			
			return upload;
!!!214146.java!!!	xamplerBuild(inout omniorbUpload : TaskDescriptor) : TaskDescriptor
			/*
			 * Tasks within the method must run all on the same host so all must 
			 * "use the same host runtime as XAMPLER download"
			 */
		
			setActiveRole(SERVER_COMPILE);

			// xampler source download
			TaskDescriptor xamplerDownload = createTaskDescriptor("local-download");
			xamplerDownload.addTaskPropertyObject("rsl", xamplerRSL(PackageType.SOURCE));
			addTask(xamplerDownload);

			TaskDescriptor omniorbDownload = createTaskDescriptor("local-download");
			omniorbDownload.setHostRuntimesAsTask(xamplerDownload.getTaskTid());
			
			// if we compile omniorb, we must wait for binary to be uploaded
			if (omniorbUpload != null) {
				omniorbDownload.addDependencyCheckPoint(success(omniorbUpload.getTaskTid()));
			}
			
			// when we compiled omniorb, we need to use the same binary
			omniorbDownload.addTaskPropertyObject("rsl", omniorbBinaryRSL());
			
			
			addTask(omniorbDownload);
			
			// create metadata
			TaskDescriptor metadata = createTaskDescriptor("create-package-metadata");
			metadata.setHostRuntimesAsTask(xamplerDownload.getTaskTid());
			
			metadata.addTaskProperties("package-name", "xampler");
			metadata.addTaskProperties("package-human-name", "Xampler C/C++ CORBA benchmark");
			metadata.addTaskProperties("version", getXamplerVersion());
			metadata.addTaskProperties("hardware-platforms", "i386");
			metadata.addTaskProperties("software-platforms", "linux win32");
			metadata.addTaskProperties("type", PackageType.BINARY.toString());
			metadata.addTaskProperties("binary-identifier",getOpenBinary().toString());
			addTask(metadata);

			// compile xampler
			TaskDescriptor compile = createTaskDescriptor("xampler-compile-linux");
			compile.setHostRuntimesAsTask(xamplerDownload.getTaskTid());
			
			// dependency: omniorb binary download
			compile.addDependencyCheckPoint(success(omniorbDownload.getTaskTid()));
			compile.addDependencyCheckPoint(success(xamplerDownload.getTaskTid()));
			addTask(compile);
			
			compile.addTaskProperties("xampler.dir",pathBuilder.addWorking(xamplerDownload.getTaskTid()).clean());
			compile.addTaskProperties("omniorb.version",getOmniorbBranch());
			compile.addTaskProperties("omniorb.root",pathBuilder.addWorking(omniorbDownload.getTaskTid()).clean());
		
			// set benchmark constants
			for (String[] constant : XamplerSuite.getCommonConstants()) {
				compile.addTaskProperties(constant[0],
						getExperiment().getProperty(constant[0],constant[1]));
			}
			

			// xampler binary upload
			TaskDescriptor upload = createTaskDescriptor("localupload");
			upload.setHostRuntimesAsTask(xamplerDownload.getTaskTid());
			
			// dependency: metadata & compilation
			upload.addDependencyCheckPoint(success(compile.getTaskTid()));
			upload.addDependencyCheckPoint(success(metadata.getTaskTid()));

			upload.addTaskProperties("dir",
					pathBuilder.addWorking(compile.getTaskTid()).clean());
			upload.addTaskProperties("metadata.file",
					pathBuilder.addWorking(metadata.getTaskTid()).add("metadata.xml").clean());
			addTask(upload);
			
			return upload;
!!!214274.java!!!	deployOmniORBServer(inout omniorbUpload : TaskDescriptor) : TaskDescriptor
		setActiveRole(XAMPLER_SERVER);

		TaskDescriptor download = createTaskDescriptor("local-download");
		download.addTaskPropertyObject("rsl", omniorbBinaryRSL());
		
		if (omniorbUpload != null) {
			download.addDependencyCheckPoint(success(omniorbUpload.getTaskTid()));
		}
		
		addTask(download);
		
		return download;
!!!214402.java!!!	deployOmniorbClient(inout omniorbUpload : TaskDescriptor, in clientIndex : int) : TaskDescriptor
			setActiveRole(XAMPLER_CLIENT);
			
			TaskDescriptor download = createTaskDescriptor("local-download", clientIndex);
			download.addTaskPropertyObject("rsl", omniorbBinaryRSL());
			
			if (omniorbUpload != null) { 
				download.addDependencyCheckPoint(
					success(omniorbUpload.getTaskTid()));
			}
			addTask(download);
			
			return download;
!!!214530.java!!!	deployXamplerServer(inout xamplerUpload : TaskDescriptor) : TaskDescriptor
		setActiveRole(XAMPLER_SERVER);
		
		TaskDescriptor download = createTaskDescriptor("local-download");
		download.addTaskPropertyObject("rsl", xamplerBinaryRSL());
		
		if (xamplerUpload != null) {
			download.addDependencyCheckPoint(success(xamplerUpload.getTaskTid()));
		}
		
		addTask(download);
		
		return download;
!!!214658.java!!!	deployXamplerClient(inout xamplerUpload : TaskDescriptor, in clientIndex : int) : TaskDescriptor
		setActiveRole(XAMPLER_CLIENT);
		
		TaskDescriptor download = createTaskDescriptor("local-download", clientIndex);
		download.addTaskPropertyObject("rsl", xamplerBinaryRSL());
		
		if (xamplerUpload != null) {
			download.addDependencyCheckPoint(success(xamplerUpload.getTaskTid()));
		}
		
		addTask(download);
		
		return download;
!!!214786.java!!!	generateServerExecute(inout resultUploads : List<TaskDescriptor>, inout omniDeploy : TaskDescriptor, inout xamplerDeploy : TaskDescriptor) : TaskDescriptor

		setActiveRole(XAMPLER_SERVER);

		TaskDescriptor serverExecDesc = createTaskDescriptor("xampler-execute");
		
		serverExecDesc.setRestartMax(3);
		serverExecDesc.setTaskExclusive(TaskExclusivity.CONTEXT_EXCLUSIVE);
		
		/*
		 *  Server should not start until previous results upload is finished
		 *  We are using context-exclusive tasks, so we can't block on
		 *  client/server otherwise log-collectors would be starting
		 *  together with new servers/clients
		 */
		for (TaskDescriptor upload : resultUploads) {
			serverExecDesc.addDependencyCheckPoint(finish(upload.getTaskTid()));
		}
		
		/*
		 * Register for load collection if the host is not occupied by different a task
		 */
		String usedHost = ((BenchmarkRole)getExperiment().getRole(XAMPLER_SERVER)).getUserHosts()[0];
		if (availableLoadHosts.contains(usedHost)) {
	 		serverExecDesc.setDetailedLoad(true);
			serverExecDesc.setDetailedLoadInterval(500);
			availableLoadHosts.remove(usedHost);
		}
		
		serverExecDesc.addTaskProperties("omniorb.root",
				pathBuilder.addWorking(omniDeploy.getTaskTid()).clean());					
		serverExecDesc.addTaskProperties("xampler.root",
				pathBuilder.addWorking(xamplerDeploy.getTaskTid()).clean());
		serverExecDesc.addTaskProperties("xampler.role","server");
		serverExecDesc.addTaskProperties("xampler.suite.path", suitePath);
		serverExecDesc.addTaskProperties("xampler.server.params", serverParams);

		addTask(serverExecDesc);
		
		return serverExecDesc;
		
!!!214914.java!!!	generateClientExecute(in clientIndex : int, inout serverExec : TaskDescriptor, inout omniorbDeploy : TaskDescriptor, inout xamplerDeploy : TaskDescriptor) : TaskDescriptor
			setActiveRole(XAMPLER_CLIENT);
			TaskDescriptor clientExecDesc = createTaskDescriptor("xampler-execute",clientIndex);
			
			clientExecDesc.addDependencyCheckPoint(success(omniorbDeploy.getTaskTid()));
			clientExecDesc.addDependencyCheckPoint(success(xamplerDeploy.getTaskTid()));
			/*
			 *  This prevents clients from the same context starting while their server 
			 *  has not yet started and all synchronisation happens on the server so this must be present
			 */
			clientExecDesc.addDependencyCheckPoint(new Dependency(serverExec.getTaskTid(),"server.started"));
			
			clientExecDesc.setRestartMax(3);
			clientExecDesc.setTaskExclusive(TaskExclusivity.CONTEXT_EXCLUSIVE);
			
			
			/*
			 *  Register for load collection if no other task occupies the machine
			 */
			String usedHost = ((BenchmarkRole)getExperiment().getRole(XAMPLER_CLIENT)).getUserHosts()[clientIndex];
			if (availableLoadHosts.contains(usedHost)) {
				clientExecDesc.setDetailedLoad(true);
				clientExecDesc.setDetailedLoadInterval(DETAILED_LOAD_INTERVAL);
				availableLoadHosts.remove(usedHost);
			}

			clientExecDesc.addTaskProperties("omniorb.root", 
					pathBuilder.addWorking(omniorbDeploy.getTaskTid()).clean());					
			clientExecDesc.addTaskProperties("xampler.root",
					pathBuilder.addWorking(xamplerDeploy.getTaskTid()).clean());
			clientExecDesc.addTaskProperties("xampler.role", "client");
			clientExecDesc.addTaskProperties("xampler.suite.path", suitePath);
			clientExecDesc.addTaskProperties("server.tid", serverExec.getTaskTid());
			clientExecDesc.addTaskProperties("xampler.client.params",clientParams);
			
			addTask(clientExecDesc);
			
			return clientExecDesc;
!!!215042.java!!!	generateComparison() : void
		LinkedList<TaskDescriptor> uploads = new LinkedList<TaskDescriptor>();
		LinkedList<TaskDescriptor> checks = new LinkedList<TaskDescriptor>();
		LinkedList<TaskDescriptor> allDeploys = new LinkedList<TaskDescriptor>();
		LinkedList<TaskDescriptor> clientDeploys = new LinkedList<TaskDescriptor>();
		TaskDescriptor omniSrc = null;
		TaskDescriptor omniBin = null;
		TaskDescriptor xamplerBin = null;
		TaskDescriptor omniServDeploy = null;
		TaskDescriptor xamServDeploy = null;
		TaskDescriptor serverExec = null;
		HashSet<String> usedBinaries = new HashSet<String>();
		
		/* 
		 * We will check at first whether we have a matching pair of binaries
		 * NO: If not, we will start compilations
		 * YES: We will use them
		 */
		
		for (int binaryIdx = 0; binaryIdx < binaryCount; binaryIdx++) {
			globalBinaryIdentifier = searchForBinaryPair(usedBinaries);
			createNewBinary();
			
			// we don't have binary and will create new - tag it as used for the next binary iteration
			if (globalBinaryIdentifier == null) {
				if (!isPackageAvailable(omniorbRSL(PackageType.SOURCE))) {
					String currentVersion = String.valueOf(System.currentTimeMillis());
					setOmniorbVersion(currentVersion);
					getExperiment().setProperty("cvs.date", currentVersion);
					omniSrc = omniorbSource();
				}
				usedBinaries.add(getOpenBinary().toString());
				omniBin = omniorbBuild(omniSrc);
				xamplerBin = xamplerBuild(omniBin);
			} else {
				usedBinaries.add(globalBinaryIdentifier);
			}
			
			
			/*
			 * Clear previous deploys
			 */
			allDeploys.clear();
			clientDeploys.clear();
			
			/*
			 * Deploy server
			 */
			allDeploys.add(omniServDeploy = deployOmniORBServer(omniBin));
			allDeploys.add(xamServDeploy = deployXamplerServer(xamplerBin));
			
			/*
			 * Deploys all clients
			 */
			for (int clientIdx=0; clientIdx < clientsCount; clientIdx++) {
				TaskDescriptor omniDeploy = deployOmniorbClient(omniBin,clientIdx);
				TaskDescriptor xamplerDeploy = deployXamplerClient(xamplerBin,clientIdx);
				clientDeploys.add(omniDeploy);
				clientDeploys.add(xamplerDeploy);
			}
			
			/*
			 * Merge deploys so that server exec can synchronise on them
			 */
			allDeploys.addAll(clientDeploys);
			
			for (int i = 0; i < runCount; i++) {
				createNewRun();
				setupLoadHosts();
				/*
				 * Server exec depends on successful deployment of server & clients
				 * as well as all results uploads to finish
				 * This also causes that the first server executed in binary
				 * synchronised on uploads of the last server executed in the previous binary
				 */
				serverExec = generateServerExecute(uploads,omniServDeploy,xamServDeploy);
				for (TaskDescriptor deploy : allDeploys) {
					serverExec.addDependencyCheckPoint(success(deploy.getTaskTid()));
				}
				/*
				 * Result uploads are not needed anymore
				 */
				uploads.clear();
				
				/*
				 * Client execs - need deployment descriptors (they were stored in a sequence)
				 */
				for (int clientIdx=0; clientIdx < clientsCount; clientIdx++) {
					TaskDescriptor clientExec = 
						generateClientExecute(clientIdx, serverExec, clientDeploys.get(2*clientIdx), clientDeploys.get(2*clientIdx+1));
					uploads.add(generateResultsCollection(clientIdx, clientExec));
				}
				
				/*
				 * Uploads may start only when all checks are finished in current run
				 * 1. Find all checks in current run
				 * 2. Go through uploads and set them dependent on all checks
				 */
				checks.clear();
				for (TaskDescriptor td : getExperiment().getTaskSequence().getTasks(getOpenRun())) {
					if ("check-and-convert-xampler".equals(td.getTaskName())) {
						checks.add(td);
					}
				}
				for (TaskDescriptor upload : uploads) {
					for (TaskDescriptor check : checks) {
						upload.addDependencyCheckPoint(finish(check.getTaskTid()));
					}
				}
				
				/*
				 * End of upload - check dependencies
				 */
				closeRun();
			}
			closeBinary();
		}
!!!215170.java!!!	generateRegression() : void
		LinkedList<TaskDescriptor> uploads = new LinkedList<TaskDescriptor>();
		LinkedList<TaskDescriptor> checks = new LinkedList<TaskDescriptor>();
		LinkedList<TaskDescriptor> allDeploys = new LinkedList<TaskDescriptor>();
		LinkedList<TaskDescriptor> clientDeploys = new LinkedList<TaskDescriptor>();
		TaskDescriptor omniSrc = null;
		TaskDescriptor omniBin = null;
		TaskDescriptor xamplerBin = null;
		TaskDescriptor omniServDeploy = null;
		TaskDescriptor xamServDeploy = null;
		TaskDescriptor serverExec = null;
		
		/* 
		 * Create new binary of Xampler for:
		 * 	1, every new binary of omniorb
		 * 	2, omniorb binary without existing xampler binary
		 */
		omniSrc = omniorbSource();
		for (int binaryIdx = 0; binaryIdx < binaryCount; binaryIdx++) {
			createNewBinary();
			omniBin = omniorbBuild(omniSrc);
			xamplerBin = xamplerBuild(omniBin);
			
			/*
			 * Clear previous deploys
			 */
			allDeploys.clear();
			clientDeploys.clear();
			
			/*
			 * Deploy server
			 */
			allDeploys.add(omniServDeploy = deployOmniORBServer(omniBin));
			allDeploys.add(xamServDeploy = deployXamplerServer(xamplerBin));
			
			/*
			 * Deploys all clients
			 */
			for (int clientIdx=0; clientIdx < clientsCount; clientIdx++) {
				TaskDescriptor omniDeploy = deployOmniorbClient(omniBin,clientIdx);
				TaskDescriptor xamplerDeploy = deployXamplerClient(xamplerBin,clientIdx);
				clientDeploys.add(omniDeploy);
				clientDeploys.add(xamplerDeploy);
			}
			
			/*
			 * Merge deploys so that server exec can synchronise on them
			 */
			allDeploys.addAll(clientDeploys);
			
			for (int i = 0; i < runCount; i++) {
				createNewRun();
				setupLoadHosts();
				/*
				 * Server exec depends on successful deployment of server & clients
				 * as well as all results uploads to finish
				 * This also causes that the first server executed in binary
				 * synchronised on uploads of the last server executed in the previous binary
				 */
				serverExec = generateServerExecute(uploads,omniServDeploy,xamServDeploy);
				for (TaskDescriptor deploy : allDeploys) {
					serverExec.addDependencyCheckPoint(success(deploy.getTaskTid()));
				}
				/*
				 * Result uploads are not needed anymore
				 */
				uploads.clear();
				
				/*
				 * Client execs - need deployment descriptors (they were stored in a sequence)
				 */
				for (int clientIdx=0; clientIdx < clientsCount; clientIdx++) {
					TaskDescriptor clientExec = 
						generateClientExecute(clientIdx, serverExec, clientDeploys.get(2*clientIdx), clientDeploys.get(2*clientIdx+1));
					uploads.add(generateResultsCollection(clientIdx, clientExec));
				}
				
				/*
				 * Uploads may start only when all checks are finished in current run
				 * 1. Find all checks in current run
				 * 2. Go through uploads and set them dependent on all checks
				 */
				checks.clear();
				for (TaskDescriptor td : getExperiment().getTaskSequence().getTasks(getOpenRun())) {
					if ("check-and-convert-xampler".equals(td.getTaskName())) {
						checks.add(td);
					}
				}
				for (TaskDescriptor upload : uploads) {
					for (TaskDescriptor check : checks) {
						upload.addDependencyCheckPoint(finish(check.getTaskTid()));
					}
				}
				
				/*
				 * End of upload - check dependencies
				 */
				closeRun();
			}
			closeBinary();
		}
!!!215298.java!!!	generateResultsCollection(in clientIndex : int, inout clientExec : TaskDescriptor) : TaskDescriptor
		setActiveRole(XAMPLER_CLIENT);

		TaskDescriptor checkAndConvert = createTaskDescriptor("check-and-convert-xampler",clientIndex);

		// dependency: xampler client run
		checkAndConvert.addDependencyCheckPoint(finish(clientExec.getTaskTid()));

		StringBuffer resultEntry = new StringBuffer();
		resultEntry.append(getOpenBinary().toString()).append("\t");
		resultEntry.append(getOpenRun().toString()).append("\t");
		resultEntry.append(pathBuilder.addWorking(clientExec.getTaskTid()).clean()).append("\n");
		
		checkAndConvert.addTaskProperties("suite", xamplerSuite);
		checkAndConvert.addTaskProperties("results.role",XAMPLER_CLIENT + clientIndex);
		checkAndConvert.addTaskProperties("samples.counts",String.valueOf(sampleCount));
		checkAndConvert.addTaskProperties("results.paths",resultEntry.toString());
		// set subsuite property only when exists
		if (StringUtils.isEmpty(getExperiment().getProperty(XAMPLER_SUBSUITE)) == false) {
			checkAndConvert.addTaskProperties("xampler.subsuite", getExperiment().getProperty(XAMPLER_SUBSUITE));
		}
		addTask(checkAndConvert);

		// DEBUG
		/*
		 * try { resultsCheckAndConvertTask.setJavaOptions("-Xdebug
		 * -Xrunjdwp:transport=dt_socket,address=8000,suspend=y,server=y",
		 * true); } catch (Exception e) {
		 *  }
		 */
		// END_DEBUG


		TaskDescriptor uploadTask = createTaskDescriptor("results-collect",clientIndex);
		uploadTask.addDependencyCheckPoint(finish(checkAndConvert.getTaskTid()));

		// DEBUG
		/*
		 * try { uploadTask.setJavaOptions("-Xdebug
		 * -Xrunjdwp:transport=dt_socket,address=8000,suspend=y,server=y",
		 * true); } catch (Exception e) {
		 *  }
		 */
		// END_DEBUG
		// NOTE: in general form, there must be list of all check and
		// convert tasks
		String resultsLocation = pathBuilder.addWorking(checkAndConvert.getTaskTid()).clean();
		uploadTask.addTaskProperties("analysis.id", getExperiment().getAnalysis().toString());
		uploadTask.addTaskProperties("experiment.id", getExperiment().getID().toString());
		uploadTask.addTaskProperties("results.paths", resultsLocation);
		
		addTask(uploadTask);
		
		return uploadTask;
!!!215426.java!!!	validateParameters() : void
		for (String property : new String[]{XAMPLER_VERSION, SOFTWARE_VERSION}) {
			if (StringUtils.isEmpty(getExperiment().getProperty(property))) {
				throw new GeneratorException("Required experiment property '" + property + "' not set");
			}
		}
!!!215554.java!!!	omniorbRSL(inout type : PackageType) : Condition
		Condition[] conditions = new Condition[OMNIORB_BASIC_CONDITIONS.length+1];
		conditions[0] = new EqualsCondition<PackageType>("type",type);
		System.arraycopy(OMNIORB_BASIC_CONDITIONS,0,conditions,1,OMNIORB_BASIC_CONDITIONS.length);
		Condition version = new EqualsCondition<Version>("version",new Version(getOmniorbVersion()));
		return new AndCondition(new Condition[]{ new AndCondition(conditions),version});
		
!!!215682.java!!!	omniorbBinaryRSL() : Condition
		String ident = globalBinaryIdentifier == null ? getOpenBinary().toString() : globalBinaryIdentifier;
		return new AndCondition(new Condition[]{
							new AndCondition(new Condition[]{omniorbRSL(PackageType.BINARY)}),
							new EqualsCondition<String>("binaryIdentifier",ident)
				});
!!!215810.java!!!	xamplerRSL(inout type : PackageType) : Condition
		Condition[] conditions = new Condition[XAMPLER_BASIC_CONDITIONS.length+1];
		conditions[0] = new EqualsCondition<PackageType>("type",type);
		System.arraycopy(XAMPLER_BASIC_CONDITIONS,0,conditions,1,XAMPLER_BASIC_CONDITIONS.length);
		return new AndCondition(conditions);
!!!215938.java!!!	xamplerBinaryRSL() : Condition
		String ident = globalBinaryIdentifier  == null ? getOpenBinary().toString() : globalBinaryIdentifier;
		return new AndCondition(new Condition[]{
							new AndCondition(new Condition[]{xamplerRSL(PackageType.BINARY)}),
							new EqualsCondition<String>("binaryIdentifier",ident)
				});
!!!216066.java!!!	searchForBinaryPair(inout used : Set<String>) : String
		PackageMetadata[] omniorbs = availablePackages(omniorbRSL(PackageType.BINARY));
		PackageMetadata[] xamplers = availablePackages(xamplerRSL(PackageType.BINARY));
		for (PackageMetadata omniorb : omniorbs) {
			for (PackageMetadata xampler : xamplers) {
				if (omniorb.getBinaryIdentifier() != null && 
					omniorb.getBinaryIdentifier().equals(xampler.getBinaryIdentifier()) &&
					!used.contains(omniorb.getBinaryIdentifier())) {
					return omniorb.getBinaryIdentifier();
				}
			}
		}
		
		return null;
!!!216194.java!!!	getOmniorbVersion() : String
		return omniorbVersion;
!!!216322.java!!!	setOmniorbVersion(in omniorbVersion : String) : void
		this.omniorbVersion = omniorbVersion;
!!!216450.java!!!	setXamplerVersion(in xamplerVersion : String) : void
		this.xamplerVersion = xamplerVersion;
!!!216578.java!!!	getXamplerVersion() : String
		return xamplerVersion;
!!!216706.java!!!	setOmniorbBranch(in omniorbBranch : String) : void
		this.omniorbBranch = omniorbBranch;
!!!216834.java!!!	getOmniorbBranch() : String
		return omniorbBranch;
