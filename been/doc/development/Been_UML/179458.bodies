class MiscUtils
!!!443778.java!!!	concatenatePath(in path1 : String, in path2 : String) : String
		
		if (path1.endsWith(File.separator)) {
			if (path2.charAt(0) == File.separatorChar) {
				// xxx\ + \yyy
				return path1 + path2.substring(1);
			} else {
				// xxx\ + yyy
				return path1 + path2;
			}
		} else {
			if (path2.charAt(0) == File.separatorChar) {
				// xxx + \yyy
				return path1 + path2;
			} else {
				// xxx + yyy
				return path1 + File.separator + path2;
			}
		}
!!!443906.java!!!	extractFileName(in fullPath : String) : String
		
		File f = new File(fullPath);
		
		return f.getName();
!!!444034.java!!!	formatDate(inout date : Date, in formatStr : String) : String
		
		try {
			SimpleDateFormat formater = new SimpleDateFormat(formatStr);
		
			return formater.format(date);
		} catch (Exception e) {
			GregorianCalendar cal = new GregorianCalendar();
			
			cal.setTime(date);
			
			return String.valueOf(cal.get(GregorianCalendar.YEAR)) + "/"
			     + String.valueOf(cal.get(GregorianCalendar.MONTH)) + "/"
			     + String.valueOf(cal.get(GregorianCalendar.DAY_OF_MONTH)) + " "
			     + String.valueOf(cal.get(GregorianCalendar.HOUR_OF_DAY)) + ":"
			     + String.valueOf(cal.get(GregorianCalendar.MINUTE)) + "."
			     + String.valueOf(cal.get(GregorianCalendar.SECOND));
		}
!!!444162.java!!!	formatDate(inout date : Date) : String
		
		return formatDate(date, DEFAULT_DATE_FORMAT);
!!!444290.java!!!	openFileForWritingWithEncoding(in fileName : String, in encoding : String) : BufferedWriter
		
		return new BufferedWriter(new OutputStreamWriter(new FileOutputStream(fileName), encoding));
!!!444418.java!!!	openFileForReadingWithEncoding(in fileName : String, in encoding : String) : BufferedReader
		
		return new BufferedReader(new InputStreamReader(new FileInputStream(fileName), encoding));
!!!444546.java!!!	verifyParameterIsNotNull(inout x : Object, in paramName : String) : void
		
		if (x == null) {
			throw new InvalidArgumentException("Parameter " + paramName + " has to be non-null");
		}
!!!444674.java!!!	verifyStringParameterNotEmpty(in s : String, in paramName : String) : void

		if (s.length() == 0) {
			throw new InvalidArgumentException("String " + paramName + " cannot be empty.");
		}
!!!444802.java!!!	verifyStringParameterBoth(in s : String, in paramName : String) : void
		
		verifyParameterIsNotNull(s, paramName);
		verifyStringParameterNotEmpty(s, paramName);
!!!444930.java!!!	verifyIntParameterGEZero(in value : long, in name : String) : void
		
		if (value < 0) {
			throw new InvalidArgumentException("Parameter \"" + name + "\" is negative.");
		}
!!!445058.java!!!	verifyIntParameterGZero(in value : long, in name : String) : void
		
		if (value <= 0) {
			throw new InvalidArgumentException("Parameter \"" + name + "\" is negative or zero.");
		}
!!!445186.java!!!	getCanonicalHostName(in hostName : String) : String

		// Oh boy, this is soo stupid...
		
		String canonicalName = null;
		
		if (hostName.equalsIgnoreCase("localhost")) {
			canonicalName = InetAddress.getLocalHost().getCanonicalHostName();
		} else {
			canonicalName = InetAddress.getByName(hostName).getCanonicalHostName();
		}
		
		if (canonicalName.equalsIgnoreCase("localhost")
			|| canonicalName.equalsIgnoreCase("127.0.0.1")) {
			canonicalName = InetAddress.getLocalHost().getCanonicalHostName();
		}
		
		return canonicalName;
!!!445314.java!!!	getCanonicalLocalhostName() : String
		
		try {
			return InetAddress.getLocalHost().getCanonicalHostName();
		} catch (Exception e) {
			return "localhost";
		}
!!!445442.java!!!	removeFile(in fileName : String) : boolean
		
		File file = new File(fileName);
		
		return file.delete();
