class SoftwareRepositoryTest
!!!869506.java!!!	setUp() : void
		if ((beenHome = System.getenv("BEEN_HOME")) == null) {
			throw new Exception("BEEN_HOME environment variable not defined.");
		}

		softwareRepository = Utils.setUpRepository(beenHome);
!!!869634.java!!!	assertPackageAccepted(in packageName : String) : void
		assertTrue(Utils.uploadPackage(softwareRepository, packageName, beenHome).getStatus()
			== UploadStatus.ACCEPTED);
!!!869762.java!!!	assertPackageRejected(in packageName : String, in errorMessages : String) : void
		UploadResult result = Utils.uploadPackage(softwareRepository, packageName,
			beenHome);
		assertTrue(result.getStatus() == UploadStatus.REJECTED);
		assertTrue(Arrays.equals(result.getErrorMessages(), errorMessages));
!!!869890.java!!!	testGeneralEmptyFile() : void
		assertPackageRejected("general-empty-file.bpk", new String[] {
			"Error reading package file."
		});
!!!870018.java!!!	testGeneralEmptyZipFile() : void
		assertPackageRejected("general-empty-zip-file.bpk", new String[] {
			"Error reading package file."
		});
!!!870146.java!!!	testGeneralNoFiles() : void
		assertPackageRejected("general-no-files.bpk", new String[] {
			"Missing \"" + SoftwareRepositoryImplementation.PACKAGE_FILES_DIR
				+ "\" directory.",
		}); 
!!!870274.java!!!	testGeneralFilesNotDir() : void
		assertPackageRejected("general-files-not-dir.bpk", new String [] {
			"Missing \"" + SoftwareRepositoryImplementation.PACKAGE_FILES_DIR
				+ "\" directory.",
		});
!!!870402.java!!!	testGeneralNoMetadata() : void
		assertPackageRejected("general-no-metadata.bpk", new String[] {
			"Missing \"" + SoftwareRepositoryImplementation.PACKAGE_METADATA_FILE
				+ "\" file."
		});
!!!870530.java!!!	testGeneralMetadataNotXML() : void
		assertPackageRejected("general-metadata-not-xml.bpk", new String[] {
			SoftwareRepositoryImplementation.PACKAGE_METADATA_FILE 
				+ ": Not valid XML file." 
		}); 
!!!870658.java!!!	testMetadataNoPackageElement() : void
		assertPackageRejected("metadata-no-package-element.bpk", new String[] {
				SoftwareRepositoryImplementation.PACKAGE_METADATA_FILE
					+ ": Root element must be <package>." 
		});
!!!870786.java!!!	testMetadataEmptyPackageElement() : void
		assertPackageRejected("metadata-empty-package-element.bpk", new String[] {
			SoftwareRepositoryImplementation.PACKAGE_METADATA_FILE 
				+ ": Missing <type> element or invalid value of element <type>." 
		}); 	
!!!870914.java!!!	testMetadataPackageElementWithUnrecognizedSubelement() : void
		assertPackageRejected("metadata-package-element-with-unrecognized-subelement.bpk", new String[] {
			SoftwareRepositoryImplementation.PACKAGE_METADATA_FILE 
				+ ": Missing <type> element or invalid value of element <type>." 
		});
!!!871042.java!!!	testMetadataNoType() : void
		assertPackageRejected("metadata-no-type.bpk", new String[] {
			SoftwareRepositoryImplementation.PACKAGE_METADATA_FILE
				+ ": Missing <type> element or invalid value of element <type>." 
		});
!!!871170.java!!!	testMetadataInvalidType() : void
		assertPackageRejected("metadata-invalid-type.bpk", new String[] {
			SoftwareRepositoryImplementation.PACKAGE_METADATA_FILE 
				+ ": Missing <type> element or invalid value of element <type>." 
		}); 
!!!871298.java!!!	testMetadataSourceMinimal() : void
		assertPackageAccepted("metadata-source-minimal.bpk");
!!!871426.java!!!	testMetadataSourceMoreHardwarePlatforms() : void
		assertPackageAccepted("metadata-source-more-hardware-platforms.bpk"); 	
!!!871554.java!!!	testMetadataSourceMoreSoftwarePlatforms() : void
		assertPackageAccepted("metadata-source-more-software-platforms.bpk"); 	
!!!871682.java!!!	testMetadataSourceAllOptionalElements() : void
		assertPackageAccepted("metadata-source-all-optional-elements.bpk"); 	
!!!871810.java!!!	testMetadataSourceNoName() : void
		assertPackageRejected("metadata-source-no-name.bpk", new String[] {
			SoftwareRepositoryImplementation.PACKAGE_METADATA_FILE 
				+ ": Missing <name> element."
		}); 	
!!!871938.java!!!	testMetadataSourceEmptyName() : void
		assertPackageRejected("metadata-source-empty-name.bpk", new String[] {
			SoftwareRepositoryImplementation.PACKAGE_METADATA_FILE 
				+ ": Invalid value of element <name>."
		});
!!!872066.java!!!	testMetadataSourceInvalidName() : void
		assertPackageRejected("metadata-source-invalid-name.bpk", new String[] {
			SoftwareRepositoryImplementation.PACKAGE_METADATA_FILE
				+ ": Invalid value of element <name>."
		}); 	
!!!872194.java!!!	testMetadataSourceNoVersion() : void
		assertPackageRejected("metadata-source-no-version.bpk", new String[] {
			SoftwareRepositoryImplementation.PACKAGE_METADATA_FILE 
				+ ": Missing <version> element."
		}); 	
!!!872322.java!!!	testMetadataSourceNoHumanName() : void
		assertPackageRejected("metadata-source-no-human-name.bpk", new String[] {
			SoftwareRepositoryImplementation.PACKAGE_METADATA_FILE 
				+ ": Missing <humanName> element."
		}); 	
!!!872450.java!!!	testMetadataBinaryMinimal() : void
		assertPackageAccepted("metadata-binary-minimal.bpk");
!!!872578.java!!!	testMetadataBinaryMorehardwarePlatforms() : void
		assertPackageAccepted("metadata-binary-more-hardware-platforms.bpk");
!!!872706.java!!!	testMetadataBinaryMoreSoftwarePlatforms() : void
		assertPackageAccepted("metadata-binary-more-software-platforms.bpk");
!!!872834.java!!!	testMetadataBinaryAllOptionalElements() : void
		assertPackageAccepted("metadata-binary-all-optional-elements.bpk");
!!!872962.java!!!	testMetadataBinaryNoName() : void
		assertPackageRejected("metadata-binary-no-name.bpk", new String[] {
			SoftwareRepositoryImplementation.PACKAGE_METADATA_FILE 
				+ ": Missing <name> element."
		});
!!!873090.java!!!	testMetadataBinaryEmptyName() : void
		assertPackageRejected("metadata-binary-empty-name.bpk", new String[] {
			SoftwareRepositoryImplementation.PACKAGE_METADATA_FILE 
				+ ": Invalid value of element <name>."
		});
!!!873218.java!!!	testMetadataBinaryInvalidName() : void
		assertPackageRejected("metadata-binary-invalid-name.bpk", new String[] {
			SoftwareRepositoryImplementation.PACKAGE_METADATA_FILE 
				+ ": Invalid value of element <name>."
		});
!!!873346.java!!!	testMetadataBinaryNoVersion() : void
		assertPackageRejected("metadata-binary-no-version.bpk", new String[] {
			SoftwareRepositoryImplementation.PACKAGE_METADATA_FILE 
				+ ": Missing <version> element."
		});
!!!873474.java!!!	testMetadataBinaryNoHumanName() : void
		assertPackageRejected("metadata-binary-no-human-name.bpk", new String[] {
			SoftwareRepositoryImplementation.PACKAGE_METADATA_FILE 
				+ ": Missing <humanName> element."
		});
!!!873602.java!!!	testMetadataTaskMinimal() : void
		assertPackageAccepted("metadata-task-minimal.bpk");
!!!873730.java!!!	testMetadataTaskMoreHardwarePlatforms() : void
		assertPackageAccepted("metadata-task-more-hardware-platforms.bpk");
!!!873858.java!!!	testMetadataTaskMoreSoftwarePlatforms() : void
		assertPackageAccepted("metadata-task-more-software-platforms.bpk");
!!!873986.java!!!	testMetadataTaskAllOptionalElements() : void
		assertPackageAccepted("metadata-task-all-optional-elements.bpk");
!!!874114.java!!!	testMetadataTaskNoName() : void
		assertPackageRejected("metadata-task-no-name.bpk", new String[] {
			SoftwareRepositoryImplementation.PACKAGE_METADATA_FILE 
				+ ": Missing <name> element."
		});
!!!874242.java!!!	testMetadataTaskEmptyName() : void
		assertPackageRejected("metadata-task-empty-name.bpk", new String[] {
			SoftwareRepositoryImplementation.PACKAGE_METADATA_FILE 
				+ ": Invalid value of element <name>."
		});
!!!874370.java!!!	testMetadataTaskInvalidTaskName() : void
		assertPackageRejected("metadata-task-invalid-name.bpk", new String[] {
			SoftwareRepositoryImplementation.PACKAGE_METADATA_FILE 
				+ ": Invalid value of element <name>."
		});
!!!874498.java!!!	testMetadataTaskNoVersion() : void
		assertPackageRejected("metadata-task-no-version.bpk", new String[] {
			SoftwareRepositoryImplementation.PACKAGE_METADATA_FILE 
				+ ": Missing <version> element."
		});
!!!874626.java!!!	testMetadataTaskNoHumanName() : void
		assertPackageRejected("metadata-task-no-human-name.bpk", new String[] {
			SoftwareRepositoryImplementation.PACKAGE_METADATA_FILE 
				+ ": Missing <humanName> element."
		});
!!!874754.java!!!	testMetadataDataMinimal() : void
		assertPackageAccepted("metadata-data-minimal.bpk");
!!!874882.java!!!	testMetadataDataMoreHardwarePlatforms() : void
		assertPackageAccepted("metadata-data-more-hardware-platforms.bpk");
!!!875010.java!!!	testMetadataDataMoreSoftwarePlatforms() : void
		assertPackageAccepted("metadata-data-more-software-platforms.bpk");
!!!875138.java!!!	testMetadataDataAlloptionalElements() : void
		assertPackageAccepted("metadata-data-all-optional-elements.bpk");
!!!875266.java!!!	testMetadataDataNoName() : void
		assertPackageRejected("metadata-data-no-name.bpk", new String[] {
			SoftwareRepositoryImplementation.PACKAGE_METADATA_FILE 
				+ ": Missing <name> element."
		});
!!!875394.java!!!	testMetadataDataEmptyName() : void
		assertPackageRejected("metadata-data-empty-name.bpk", new String[] {
			SoftwareRepositoryImplementation.PACKAGE_METADATA_FILE 
				+ ": Invalid value of element <name>."
		});
!!!875522.java!!!	testMetadataDataInvalidName() : void
		assertPackageRejected("metadata-data-invalid-name.bpk", new String[] {
			SoftwareRepositoryImplementation.PACKAGE_METADATA_FILE 
				+ ": Invalid value of element <name>."
		});
!!!875650.java!!!	testMetadataDataNoVersion() : void
		assertPackageRejected("metadata-data-no-version.bpk", new String[] {
			SoftwareRepositoryImplementation.PACKAGE_METADATA_FILE
				+ ": Missing <version> element."
		});
!!!875778.java!!!	testMetadataDataNoHumanName() : void
		assertPackageRejected("metadata-data-no-human-name.bpk", new String[] {
			SoftwareRepositoryImplementation.PACKAGE_METADATA_FILE 
				+ ": Missing <humanName> element."
		}); 
!!!875906.java!!!	testConfigTaskNoConfig() : void
		assertPackageRejected("config-task-no-config.bpk", new String[] {
			"Missing \"" + SoftwareRepositoryImplementation.PACKAGE_CONFIG_FILE 
				+ "\" file."
		});
!!!876034.java!!!	testConfigTaskConfigNotXML() : void
		assertPackageRejected("config-task-config-not-xml.bpk", new String[] {
			SoftwareRepositoryImplementation.PACKAGE_CONFIG_FILE 
				+ ": Not valid XML file." 
		});  
!!!876162.java!!!	testConfigTaskNoPackageConfigurationElement() : void
		assertPackageRejected("config-task-no-package-configuration-element.bpk", new String[] {
			SoftwareRepositoryImplementation.PACKAGE_CONFIG_FILE 
				+ ": Root element must be <packageConfiguration>." 
		});  
!!!876290.java!!!	testConfigTaskEmptyPackageConfigurationElement() : void
		assertPackageRejected("config-task-empty-package-configuration-element.bpk", new String[] {
			SoftwareRepositoryImplementation.PACKAGE_CONFIG_FILE 
				+ ": There must be one <java> element present." 
		});  
!!!876418.java!!!	testConfigTaskNoJavaElement() : void
		assertPackageRejected("config-task-no-java-element.bpk", new String[] {
			SoftwareRepositoryImplementation.PACKAGE_CONFIG_FILE 
				+ ": There must be one <java> element present." 
		});  
!!!876546.java!!!	testConfigTaskNoClassPathAttribute() : void
		assertPackageRejected("config-task-no-class-path-attribute.bpk", new String[] {
			SoftwareRepositoryImplementation.PACKAGE_CONFIG_FILE 
				+ ": Missing \"classPath\" attribute of the <java> element." 
		});  
!!!876674.java!!!	testConfigTaskNoMainClassAttribute() : void
		assertPackageRejected("config-task-no-main-class-attribute.bpk", new String[] {
			SoftwareRepositoryImplementation.PACKAGE_CONFIG_FILE 
				+ ": Missing \"mainClass\" attribute of the <java> element." 
		});  
