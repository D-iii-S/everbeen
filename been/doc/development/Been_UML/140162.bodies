class TaskSequence
!!!190082.java!!!	TaskSequence(inout experimentID : EID)
		openItem(new SequenceItem(experimentID));
!!!190210.java!!!	openBinary(inout binaryID : BID) : void
		// opening currently open binary -> nothing to do
		if (getOpenItem().getID().equals(binaryID)) {
			return;
		}
		
		// close possibly open previous binary
		closeBinary();
		
		// check whether we are reopening an existing binary
		SequenceItem binary = getOpenItem().findByID(binaryID);
		
		// not found -> create new binary
		if (binary == null) {
			binary = new SequenceItem(binaryID);
			getOpenItem().addChild(binary);
		}
		
		openItem(binary);
!!!190338.java!!!	openRun(inout runID : RID) : void
		// trying to open current run
		if (getOpenItem().getID().equals(runID)) {
			return;
		}
		
		// close possible previous run -> last open binary will be on top
		closeRun();

		// check whether the last open item is an binary
		if (getOpenItem().getID() instanceof BID == false) {
			throw new IllegalStateException("The last open item is not a binary");
		}
		
		// check whether we are reopening an existing run within this binary
		SequenceItem run = getOpenItem().findByID(runID);
		
		// not found -> create new run
		if (run == null) {
			run = new SequenceItem(runID);
			getOpenItem().addChild(run);
		}
		
		openItem(run);
!!!190466.java!!!	closeRun() : void
		// last item open is not a run
		if ( getOpenItem().getID() instanceof RID == false) {
			return;
		}

		closeTopItem();
!!!190594.java!!!	closeBinary() : void
		// close previous run if open
		closeRun();
		
		// last item open is not a binary
		if (getOpenItem().getID() instanceof BID == false) {
			return;
		}
		
		closeTopItem();
!!!190722.java!!!	getOpenBinary() : BID
		// only binary is open
		if (getOpenItem().getID() instanceof BID) {
			return (BID)getOpenItem().getID();
		} 
		
		// run is open -> binary is behind it
		if (getOpenItem().getID() instanceof RID) {
			return (BID)stack.get(1).getID();
		}
		
		// no binary is open ...
		throw new IllegalStateException("No binary is open");
!!!190850.java!!!	getOpenRun() : RID
		if (getOpenItem().getID() instanceof RID) {
			return (RID)getOpenItem().getID();
		}
		
		throw new IllegalStateException("No run is open");
!!!190978.java!!!	addTask(inout task : TaskDescriptor) : void
		TaskItem item = getOpenItem().addTask(task);
		tasks.put(task.getTaskTid(),item);
!!!191106.java!!!	getAllTasks() : TaskDescriptor
		List<TaskDescriptor> result = new LinkedList<TaskDescriptor>();
		for(TaskItem item : tasks.values()) {
			result.add(item.getDescriptor());
		}
		
		return result.toArray(new TaskDescriptor[result.size()]);
!!!191234.java!!!	getAllTasks(inout id : OID) : TaskDescriptor
		return getExperiment().getAllTasks(id);
!!!191362.java!!!	getTasks(inout id : OID) : TaskDescriptor
		return getExperiment().getTasks(id);
!!!191490.java!!!	getBinaries() : BID
		OID[] children = getExperiment().getChildrenIds();
		BID[] binaries = new BID[children.length];
		System.arraycopy(children,0,binaries,0,binaries.length);
		return binaries;
!!!191618.java!!!	getRuns(inout id : BID) : RID
		SequenceItem item = getExperiment().findByID(id);
		if (item == null) {
			return new RID[0];
		}
		OID[] ids = item.getChildrenIds();
		RID[] result = new RID[ids.length];
		System.arraycopy(ids,0,result,0,result.length);
		return result;
!!!191746.java!!!	getRuns() : RID
		LinkedList<RID> result = new LinkedList<RID>();
		for (OID id : getBinaries()) {
			result.addAll(Arrays.asList(getRuns((BID)id)));
		}
		
		return result.toArray(new RID[result.size()]);
!!!191874.java!!!	toString() : String
		return getExperiment().toString();
!!!192002.java!!!	merge(inout otherSequence : TaskSequence) : void
		getExperiment().mergeWith(otherSequence.getExperiment());
!!!192130.java!!!	contains(inout id : OID) : boolean
		return getExperiment().findByID(id) != null;
!!!192258.java!!!	getStatus(inout id : OID) : EntityStatus
		SequenceItem item = getExperiment().findByID(id);
		assert item != null  : "Entity with given id does not exist";
		
		return item.getStatus();
!!!192386.java!!!	setTaskStatus(in tid : String, inout status : EntityStatus) : void
		tasks.get(tid).setStatus(status);
!!!192514.java!!!	setGlobalStatus(inout status : EntityStatus) : void
		getExperiment().setStatus(status);
!!!192642.java!!!	openItem(inout item : SequenceItem) : void
		stack.addFirst(item);
!!!192770.java!!!	getOpenItem() : SequenceItem
		return stack.getFirst();
!!!192898.java!!!	closeTopItem() : void
		stack.removeFirst();
!!!193026.java!!!	getExperiment() : SequenceItem
		return stack.getLast();
