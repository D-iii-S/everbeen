class JonasConfigure
!!!638082.java!!!	JonasConfigure()
		super();
!!!638210.java!!!	run() : void
		jonasRoot = getTaskProperty(JONAS_ROOT);
		logInfo("Jonas root: " + jonasRoot);

		if (getTaskProperty(JRMP_PORT) != null) {
			jrmpPort = Integer.valueOf(getTaskProperty(JRMP_PORT));
			logInfo("JRMP port: " + jrmpPort);
		}

		/*
		 * Delete webapps/autoload/ctxroot.war , which causes that Jonas doesn't
		 * start
		 */
		try {
			Delete.deleteFile(jonasRoot + File.separator + "webapps"
					+ File.separator + "autoload" + File.separator
					+ "ctxroot.war");
		} catch (AntTaskException e) {
			throw new TaskException("Couldn't delete the " + jonasRoot 
					+ "webapps/autoload/ctxroot.war file", e);
		}

		logInfo("webapps/autoload/ctxroot.war file deleted");

		/*
		 * Copy the jdbc connector.
		 */

		try {
			String srcFile = getTaskDirectory() + File.separator + "mysql-connector.jar";
			String destDir = jonasRoot + File.separator + "lib" + File.separator + "ext";
			Copy.copyToDir(srcFile, destDir);
		} catch (AntTaskException e) {
			throw new TaskException("Couldn't copy the jdbc connector to the lib/ext directory", e);
		}

		logInfo("Jdbc connector copied to lib/ext directory");

		/*
		 * Edit configuration property files.
		 */

		Properties jonasProperties = new Properties();

		// load the jonas.properties file
		String path = jonasRoot + File.separator + "conf" + File.separator
		+ "jonas.properties";
		File jonasPropertiesFile = new File(path);
		try {
			FileInputStream is = new FileInputStream(jonasPropertiesFile);
			jonasProperties.load(is);
		} catch (FileNotFoundException e) {
			throw new TaskException("File not found: " + path, e);
		} catch (IOException e) {
			throw new TaskException("Error occured while reading file: " + path, e);
		}

		// set the properties
		jonasProperties.setProperty(DATASOURCES_PROPERTY, "MySQL");

		// save to the jonas.properties file
		try {
			FileOutputStream os = new FileOutputStream(jonasPropertiesFile);
			jonasProperties.store(os, "This file is generated by BEEN");
		} catch (FileNotFoundException e) {
			throw new TaskException("File not found: " + path, e);
		} catch (IOException e) {
			throw new TaskException("Error occured while writing to file: " + path, e);
		}

		logInfo("Datasource set to MySQL in file: " + path);

		Properties carolProperties = new Properties();

		// load the carol.properties file
		path = jonasRoot + File.separator + "conf" + File.separator
		+ "carol.properties";
		File carolPropertiesFile = new File(path);
		try {
			FileInputStream is = new FileInputStream(carolPropertiesFile);
			carolProperties.load(is);
		} catch (FileNotFoundException e) {
			throw new TaskException("File not found: " + path, e);
		} catch (IOException e) {
			throw new TaskException("Error occured while reading file: " + path, e);
		}

		// set the properties
		carolProperties.setProperty(JRMP_URL_PROPERTY, "rmi://localhost:" + jrmpPort);

		String domainPath = jonasRoot + File.separator + "conf" + File.separator
		+ "domain.xml";
		try {
			RegexSubstitute.substitute(domainPath, "1099", String.valueOf(jrmpPort));
		} catch (Exception e) {
			throw new TaskException("Cannot edit the file: " + domainPath, e);
		} 

		// save to the carol.properties file
		try {
			FileOutputStream os = new FileOutputStream(carolPropertiesFile);
			carolProperties.store(os, "This file is generated by BEEN");
		} catch (FileNotFoundException e) {
			throw new TaskException("File not found: " + path, e);
		} catch (IOException e) {
			throw new TaskException("Error occured while writing to file: " + path, e);
		}

		logInfo("JRMP port: " + jrmpPort);

		Properties mysqlProperties = new Properties();

		// load the MySQL.properties file
		path = jonasRoot + File.separator + "conf" + File.separator + "MySQL.properties";
		File mysqlPropertiesFile = new File(path);
		try {
			FileInputStream is = new FileInputStream(mysqlPropertiesFile);
			mysqlProperties.load(is);
		} catch (FileNotFoundException e) {
			throw new TaskException("File not found: " + path, e);
		} catch (IOException e) {
			throw new TaskException("Error occured while reading file: " + path, e);
		}

		// set the properties
		String datasourceName = getTaskProperty(MYSQL_DATASOURCE_NAME);
		if (datasourceName != null) {
			logInfo("MySQL datasource name: " + datasourceName);
			mysqlProperties.setProperty(DATASOURCE_NAME_PROPERTY, datasourceName);
		}
		String datasourceUrl = getTaskProperty(MYSQL_DATASOURCE_URL);
		if (datasourceUrl != null) {
			logInfo("MySQL datasource URL: " + datasourceUrl);
			mysqlProperties.setProperty(DATASOURCE_URL_PROPERTY, datasourceUrl);
		}
		String datasourceUsername = getTaskProperty(MYSQL_DATASOURCE_USER);
		if (datasourceUsername != null) {
			logInfo("MySQL datasource user name: " + datasourceUsername);
			mysqlProperties.setProperty(DATASOURCE_USERNAME_PROPERTY, datasourceUsername);
		}
		String maxConnPool = getTaskProperty(MYSQL_MAX_CONNECTION_POOL);
		if (maxConnPool != null) {
			logInfo("MySQL maximum connection pool size: " + maxConnPool);
			mysqlProperties.setProperty(MAX_CONNPOOL_PROPERTY, maxConnPool);
		}
		String minConnPool = getTaskProperty(MYSQL_MIN_CONNECTION_POOL);
		if (minConnPool != null) {
			logInfo("MySQL minimum connection pool size: " + minConnPool);
			mysqlProperties.setProperty(MIN_CONNPOOL_PROPERTY, minConnPool);
		}
		String maxWaitTime = getTaskProperty(MYSQL_MAX_WAITTIME);
		if (maxWaitTime != null) {
			logInfo("MySQL maximum connection wait time: " + maxWaitTime);
			mysqlProperties.setProperty(MAX_CONN_WAIT_TIME, maxWaitTime);
		}

		// save to the MySQL.properties file
		try {
			FileOutputStream os = new FileOutputStream(mysqlPropertiesFile);
			mysqlProperties.store(os, "This file is generated by BEEN");
		} catch (FileNotFoundException e) {
			throw new TaskException("File not found: " + path, e);
		} catch (IOException e) {
			throw new TaskException("Error occured while writing to file: " + path, e);
		}

		logInfo("conf/MySQL.properties file modified");
		
		String httpPort = getTaskProperty(HTTP_PORT);
		if (httpPort != null) {
			logInfo("HTTP port: " + httpPort);
			String configPath = jonasRoot + File.separator + "conf" + File.separator
			+ "server.xml";
			try {
				RegexSubstitute.substitute(configPath, 
						"<Connector port=\"9000\"", 
						"<Connector port=\"" + httpPort + "\"");
			} catch (Exception e) {
				throw new TaskException("Cannot set the HTTP port in the file: " + configPath, e);
			}
		}
!!!638338.java!!!	checkRequiredProperties() : void
		checkRequiredProperty(JONAS_ROOT);
