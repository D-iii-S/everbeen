class Params
!!!743298.java!!!	Params()
		super();
!!!743426.java!!!	getInstance() : Params
		if (instance == null) {
			instance = new Params();
		}
		return instance;
!!!743554.java!!!	requestMethodIsGet() : boolean
		return page.getRequest().getMethod().equals("GET");   
!!!743682.java!!!	requestMethodIsPost() : boolean
		return page.getRequest().getMethod().equals("POST");   
!!!743810.java!!!	exists(in param : String) : boolean
		return page.getRequest().getParameter(param) != null;
!!!743938.java!!!	existsIndexed(in param : String) : boolean
		
		for (Enumeration e = page.getRequest().getParameterNames(); e.hasMoreElements(); ) {
			String paramName = (String) e.nextElement(); 
			if (paramName.startsWith(param + "[") && paramName.endsWith("]")) {
				return true;
			}
		}
		return false;
!!!744066.java!!!	makeIndexed(in param : String, inout index : T) : String
		return param + "[" + index.toString() + "]";
!!!744194.java!!!	existsOneOf(inout  : String...params) : boolean
		for (int i = 0; i < params.length; i++) {
			if (exists(params[i])) {
				return true;
			}
		}
		return false;
!!!744322.java!!!	isEmpty(in param : String) : boolean
		return page.getRequest().getParameter(param).equals("");
!!!744450.java!!!	notEmpty(in param : String) : boolean
		return !page.getRequest().getParameter(param).equals("");
!!!744578.java!!!	isBetween(in param : String, in min : int, in max : int) : boolean
		int value;
		try {
			value = Integer.parseInt(page.getRequest().getParameter(param));
		} catch (NumberFormatException e) {
			return false;
		}
		return value >= min && value <= max;
!!!744706.java!!!	isInSet(in param : String, inout set : Set) : boolean
		return set.contains(page.getRequest().getParameter(param));
!!!744834.java!!!	notInSet(in param : String, inout set : Set) : boolean
		return !set.contains(page.getRequest().getParameter(param));
!!!744962.java!!!	isInteger(in param : String) : boolean
		return Routines.isInteger(page.getRequest().getParameter(param));
!!!745090.java!!!	isLong(in param : String) : boolean
		return Routines.isLong(page.getRequest().getParameter(param));
!!!745218.java!!!	isFloat(in param : String) : boolean
		try {
			Float.parseFloat(page.getRequest().getParameter(param));
			return true;
		} catch (NumberFormatException e) {
			return false;
		}
!!!745346.java!!!	isDouble(in param : String) : boolean
		try {
			Double.parseDouble(page.getRequest().getParameter(param));
			return true;
		} catch (NumberFormatException e) {
			return false;
		}
!!!745474.java!!!	isRegexp(in param : String) : boolean
		try {
			Pattern.compile(page.getRequest().getParameter(param));
			return true;
		} catch (PatternSyntaxException e) {
			return false;
		}
!!!745602.java!!!	isDay(in param : String) : boolean
		return isInteger(param) && isBetween(param, DAY_MIN, DAY_MAX);
!!!745730.java!!!	isMonth(in param : String) : boolean
		return isInteger(param) && isBetween(param, MONTH_MIN, MONTH_MAX);
!!!745858.java!!!	isYear(in param : String) : boolean
		return isInteger(param);
!!!745986.java!!!	isHour(in param : String) : boolean
		return isInteger(param) && isBetween(param, HOUR_MIN, HOUR_MAX);
!!!746114.java!!!	isMinute(in param : String) : boolean
		return isInteger(param) && isBetween(param, MINUTE_MIN, MINUTE_MAX);
!!!746242.java!!!	isSecond(in param : String) : boolean
		return isInteger(param) && isBetween(param, SECOND_MIN, SECOND_MAX);
!!!746370.java!!!	isBoolean(in param : String) : boolean
		return page.getRequest().getParameter(param).equals("true")
			|| page.getRequest().getParameter(param).equals("false");
!!!746498.java!!!	isCheckboxBool(in param : String) : boolean
		return page.getRequest().getParameter(param).equals("on");
!!!746626.java!!!	ensureExists(in param : String) : void
		if (!exists(param)) {
			throw new MissingParamException("Parameter \"" 
					+ param + "\" is missing.");   
		}
!!!746754.java!!!	ensureExist(inout  : String...params) : void
		for (int i = 0; i < params.length; i++) {
			if (!exists(params[i])) {
				throw new MissingParamException("Parameter \"" 
						+ params[i] + "\" is missing.");   
			}
		}
!!!746882.java!!!	ensureExistsOneOf(inout  : String...params) : void
		for (int i = 0; i < params.length; i++) {
			if (exists(params[i])) {
				return;   
			}
		}
		throw new MissingParamException("One of parameters \"" 
				+ Routines.join(", ", params) + "\" is missing.");
!!!747010.java!!!	checkCondition(inout condition : boolean, in message : String) : void
		if (!condition) {
			page.getErrorMessages().addTextMessage(message);
		}
!!!747138.java!!!	ensureCondition(in param : String, inout condition : boolean) : void
		if (!condition) {
			throw new InvalidParamValueException("Parameter \"" 
					+ param + "\" has invalid value.");
		}
!!!747266.java!!!	ensureRequestMethodIsGet() : void
		if (!requestMethodIsGet()) {
			throw new InvalidRequestMethodException("Invalid request method(\""
					+ page.getRequest().getMethod() + "\").");
		}
!!!747394.java!!!	ensureRequestMethodIsPost() : void
		if (!requestMethodIsPost()) {
			throw new InvalidRequestMethodException("Invalid request method(\""
					+ page.getRequest().getMethod() + "\").");
		}
!!!747522.java!!!	getIndex(in param : String) : String
		for (Enumeration e = page.getRequest().getParameterNames(); e.hasMoreElements(); ) {
			String paramName = (String) e.nextElement(); 
			if (paramName.startsWith(param + "[") && paramName.endsWith("]")) {
				return paramName.substring(paramName.indexOf('[') + 1, paramName.indexOf(']'));
			}
		}
		throw new IllegalArgumentException("Parameter \"" + param
			+ "\" doesn't exist or isn't indexed.");
