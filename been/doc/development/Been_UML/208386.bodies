class Rescue
!!!719106.java!!!	Rescue(inout rootDir : File)
		/* Check input parameter. */
		if (rootDir == null) {
			throw new NullPointerException("rootDir is null");
		}
		
		/* Test root directory. */
		if (rootDir.exists()) {
			throw new IllegalArgumentException("File or directory with name"
					+ rootDir.getPath() + "already exists");
		}
		
		/* Create root directory for rescue. */
		this.rootDir = rootDir;
		rootDir.mkdir();
		
		/* Create subdirectories for rescue. */
		this.contextsDir = new File(rootDir, CONTEXTS_DIR_NAME);
		this.contextsDir.mkdir();
		this.tasksDir = new File(rootDir, TASKS_DIR_NAME);
		this.tasksDir.mkdir();
		this.checkPointsDir = new File(rootDir, CHECKPOINTS_DIR_NAME);
		this.checkPointsDir.mkdir();
		this.hostRuntimesDir = new File(rootDir, HOSTRUNTIMES_DIR_NAME);
		this.hostRuntimesDir.mkdir();
!!!719234.java!!!	getRootDir() : File
		return this.rootDir;
!!!719362.java!!!	storeObjectToFile(inout serializableObject : Serializable, inout file : File) : void
		/* Check input parameters. */
		if (serializableObject == null) {
			return;  // nothing to do
		}
		if (file == null) {
			throw new NullPointerException("file is null");
		}
		
		FileOutputStream fileOutputStream;
		try {
			fileOutputStream
				= new FileOutputStream(file);
		} catch (FileNotFoundException e) {
			throw new RuntimeException("Could not create new FileOutputStream "
					+ "for object (file \"" + file.getAbsolutePath() + "\")",
					e);
		}
		
		ObjectOutputStream objectOutputStream;
		try {
			objectOutputStream = new ObjectOutputStream(fileOutputStream);
		} catch (IOException e) {
			throw new RuntimeException("Could not create new "
					+ "ObjectOutputStream for object", e);
		}
		
		try {
			objectOutputStream.writeObject(serializableObject);
		} catch (IOException e) {
			throw new RuntimeException("Could not write object to file \""
					+ file.getAbsolutePath() + "\"", e);
		}
		
		try {
			objectOutputStream.close();
		} catch (IOException e) {
			throw new RuntimeException("Could not close ObjectOutputStream", e);
		}
!!!719490.java!!!	loadObjectFromFile(inout file : File) : Serializable
		/* Check input parameters. */
		if (file == null) {
			throw new NullPointerException("file is null");
		}
		
		/* Test if file exists. */
		if (!file.exists()) {
			return null;
		}
		
		FileInputStream fileInputStream;
		try {
			fileInputStream = new FileInputStream(file);
		} catch (FileNotFoundException e) {
			throw new RuntimeException("Could not create new FileInputStream "
					+ "for object (file \"" + file.getAbsolutePath() + "\")",
					e);
		}
		
		ObjectInputStream objectInputStream;
		try {
			objectInputStream = new ObjectInputStream(fileInputStream);
		} catch (IOException e) {
			throw new RuntimeException("Could not create new ObjectInputStream "
					+ "for object", e);
		}
		
		Serializable serializableObject;
		try {
			serializableObject = (Serializable) objectInputStream.readObject();
		} catch (IOException e) {
			throw new RuntimeException("Could not read object from file \""
					+ file.getAbsolutePath() + "\"", e);
		} catch (ClassNotFoundException e) {
			throw new RuntimeException("Unrecoverable error when reading "
					+ "object from file \"" + file.getAbsolutePath() + "\"", e);
		}
		
		try {
			objectInputStream.close();
		} catch (IOException e) {
			throw new RuntimeException("Could not close ObjectInputStream", e);
		}
		
		return serializableObject;
!!!719618.java!!!	parseCDATA(inout elementWithCDATA : Element) : String
		/* Check input parameters. */
		if (elementWithCDATA == null) {
			throw new NullPointerException("elementWithCDATA is null");
		}
		
		/* Find element containing CDATA (if founded then return it). */
		NodeList childNodes = elementWithCDATA.getChildNodes();
		
		for (int i = 0; i < childNodes.getLength(); i++) {
			Node childNode = childNodes.item(i);
			
			if (childNode.getNodeName().equals("#cdata-section")) {
				return childNode.getNodeValue();
			}
		}
		
		/* If not found then return null. */
		return null;
!!!719746.java!!!	rescueContext(inout contextDir : File) : ContextEntry
		/* Check input parameters. */
		if (contextDir == null) {
			throw new NullPointerException("contextDir is null");
		}
		
		/* Find contextEntryFile. */
		File contextEntryFile = null;
		File[] items = contextDir.listFiles();
		for (File item : items) {
			if (item.getName().equals("contextEntry.xml")) {
				contextEntryFile = item;
				break;
			}
		}
		if (contextEntryFile == null) {
			throw new IllegalArgumentException("File named \"contextEntry\" "
					+ "not found in specified directory \""
					+ contextDir.getAbsolutePath() + "\"");
		}
		
		/* Build ContextEntry object from XML file... */
		
		/* Prepare DOM and obtain Document. */
		DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
		factory.setValidating(false);
		
		Document document;
		try {
			document = factory.newDocumentBuilder().parse(contextEntryFile);
		} catch (SAXException e) {
			throw new RuntimeException("Parse error occured.", e);
		} catch (IOException e) {
			throw new RuntimeException(e);
		} catch (ParserConfigurationException e) {
			throw new RuntimeException("DocumentBuilder can not be "
					+ "created", e);
		}
		
		/* Process the root element. */
		Element rootElement = document.getDocumentElement();
		if (!rootElement.getTagName().equals("contextEntry")) {
			throw new IllegalArgumentException("Root element of XML file \""
					+ contextEntryFile.getAbsolutePath() + "\" sould be "
					+ "\"contextEntry\" (not \"" + rootElement.getTagName()
					+ "\")");
		}
		
		/* Process attribute open. */
		String openAttribute = rootElement.getAttribute("open");
		boolean open = (openAttribute.equals("true")) ? true : false;
		
		/* Process element contextId. */
		Element contextIdElement
			= (Element) rootElement.getElementsByTagName("contextId").item(0);
		String contextId = parseCDATA(contextIdElement);
		
		/* Process element contextName. */
		Element contextNameElement
			= (Element) rootElement.getElementsByTagName("contextName").item(0);
		String contextName = parseCDATA(contextNameElement);
		
		/* Process element contextDescription. */
		Element contextDescriptionElement
			= (Element) rootElement.getElementsByTagName("contextDescription")
			.item(0);
		String contextDescription = parseCDATA(contextDescriptionElement);
		
		/* Load MagicObject from file. */
		Serializable magicObject
			= loadObjectFromFile(new File(contextDir, "magicObject"));
		
		/* Create (initialize) and return new entry. */
		ContextEntry contextEntry
			= new ContextEntry(contextId, contextName, contextDescription,
					magicObject);
		if (!open) {
			contextEntry.close();
		}
		return contextEntry;
!!!719874.java!!!	rescueTask(inout taskDir : File) : TaskEntry
		/* Check input parameters. */
		if (taskDir == null) {
			throw new NullPointerException("taskDir is null");
		}
		
		/* Find taskEntryFile. */
		File taskEntryFile = null;
		File[] items = taskDir.listFiles();
		for (File item : items) {
			if (item.getName().equals("taskEntry.xml")) {
				taskEntryFile = item;
				break;
			}
		}
		if (taskEntryFile == null) {
			throw new IllegalArgumentException("File named \"taskEntry\" not "
					+ "found in specified directory \""
					+ taskDir.getAbsolutePath() + "\"");
		}
		
		/* Build TaskEntry object from XML file... */
		
		/* Prepare DOM and obtain Document. */
		DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
		factory.setValidating(false);
		
		Document document;
		try {
			document = factory.newDocumentBuilder().parse(taskEntryFile);
		} catch (SAXException e) {
			throw new RuntimeException("Parse error occured.", e);
		} catch (IOException e) {
			throw new RuntimeException(e);
		} catch (ParserConfigurationException e) {
			throw new RuntimeException("DocumentBuilder can not be "
					+ "created", e);
		}
		
		/* Process the root element. */
		Element rootElement = document.getDocumentElement();
		if (!rootElement.getTagName().equals("taskEntry")) {
			throw new IllegalArgumentException("Root element of XML file \""
					+ taskEntryFile.getAbsolutePath() + "\" sould be "
					+ "\"taskEntry\" (not \"" + rootElement.getTagName()
					+ "\")");
		}
		
		/* Process attribute exclusivity. */
		String exclusivityAttribute = rootElement.getAttribute("exclusivity");
		TaskExclusivity exclusivity
			= TaskExclusivity.fromString(exclusivityAttribute);
		
		/* Process attribute serviceFlag. */
		String serviceFlagAttribute = rootElement.getAttribute("serviceFlag");
		boolean serviceFlag
			= (serviceFlagAttribute.equals("true")) ? true : false;
		
		/* Process attribute state. */
		String stateAttribute = rootElement.getAttribute("state");
		TaskState state
			= TaskState.fromString(stateAttribute);
		
		/* Process element taskId. */
		Element taskIdElement
			= (Element) rootElement.getElementsByTagName("taskId").item(0);
		String taskId = parseCDATA(taskIdElement);
		
		/* Process element contextId. */
		Element contextIdElement
			= (Element) rootElement.getElementsByTagName("contextId").item(0);
		String contextId = parseCDATA(contextIdElement);
		
		/* Process element packageName. */
		Element packageNameElement
			= (Element) rootElement.getElementsByTagName("packageName").item(0);
		String packageName = parseCDATA(packageNameElement);
		
		/* Process element taskName. */
		Element taskNameElement
			= (Element) rootElement.getElementsByTagName("taskName").item(0);
		String taskName = parseCDATA(taskNameElement);
		
		/* Process element taskDescription. */
		Element taskDescriptionElement
			= (Element) rootElement.getElementsByTagName("taskDescription")
			.item(0);
		String taskDescription = parseCDATA(taskDescriptionElement);
		
		/* Process element hostName. */
		Element hostNameElement
			= (Element) rootElement.getElementsByTagName("hostName").item(0);
		String hostName = parseCDATA(hostNameElement);
		
		/* Process element directoryPathTask. */
		Element directoryPathTaskElement
			= (Element) rootElement.getElementsByTagName("directoryPathTask")
			.item(0);
		String directoryPathTask = parseCDATA(directoryPathTaskElement);
		
		/* Process element directoryPathWorking. */
		Element directoryPathWorkingElement
			= (Element) rootElement.getElementsByTagName("directoryPathWorking")
			.item(0);
		String directoryPathWorking = parseCDATA(directoryPathWorkingElement);
		
		/* Process element directoryPathTemporary. */
		Element directoryPathTemporaryElement
			= (Element) rootElement
			.getElementsByTagName("directoryPathTemporary").item(0);
		String directoryPathTemporary
			= parseCDATA(directoryPathTemporaryElement);
		
		/* Process element taskProperties. */
		Element taskPropertiesElement
			= (Element) rootElement.getElementsByTagName("taskProperties")
			.item(0);
		/* Process elements taskProperty (sub-elements of taskProperties
		 * element). */
		NodeList taskPropertyElementList
			= taskPropertiesElement.getElementsByTagName("taskProperty");
		Properties taskProperties = new Properties();
		for (int i = 0; i < taskPropertyElementList.getLength(); i++) {
			Element taskPropertyElement
				= (Element) taskPropertyElementList.item(i);
			String key = taskPropertyElement.getAttribute("key");
			String value = taskPropertyElement.getAttribute("value");
			taskProperties.setProperty(key, value);
		}
		
		/* Process element timeSubmitted. */
		Element timeSubmittedElement
			= (Element) rootElement.getElementsByTagName("timeSubmitted")
			.item(0);
		long timeSubmitted = Long.parseLong(parseCDATA(timeSubmittedElement));
		
		/* Process element timeScheduled. */
		Element timeScheduledElement
			= (Element) rootElement.getElementsByTagName("timeScheduled")
			.item(0);
		long timeScheduled = Long.parseLong(parseCDATA(timeScheduledElement));
		
		/* Process element timeStarted. */
		Element timeStartedElement
			= (Element) rootElement.getElementsByTagName("timeStarted").item(0);
		long timeStarted = Long.parseLong(parseCDATA(timeStartedElement));
		
		/* Process element timeFinished. */
		Element timeFinishedElement
			= (Element) rootElement.getElementsByTagName("timeFinished")
			.item(0);
		long timeFinished = Long.parseLong(parseCDATA(timeFinishedElement));
		
		/* Process element restartCount. */
		Element restartCountElement
			= (Element) rootElement.getElementsByTagName("restartCount")
			.item(0);
		int restartCount = Integer.parseInt(parseCDATA(restartCountElement));
		
		/* Process element restartMax. */
		Element restartMaxElement
			= (Element) rootElement.getElementsByTagName("restartMax").item(0);
		int restartMax = Integer.parseInt(parseCDATA(restartMaxElement));
		
		/* Process element timeoutRun. */
		Element timeoutRunElement
			= (Element) rootElement.getElementsByTagName("timeoutRun").item(0);
		long timeoutRun = Long.parseLong(parseCDATA(timeoutRunElement));
		
		/* Create (initialize) and return new entry. */
		TaskEntry taskEntry = new TaskEntry(taskId, contextId,
				packageName, taskName, taskDescription, hostName,
				directoryPathTask, directoryPathWorking, directoryPathTemporary,
				taskProperties, exclusivity, serviceFlag,
				restartMax, timeoutRun);
		taskEntry.setState(state);
		taskEntry.setTimeSubmitted(timeSubmitted);
		taskEntry.setTimeScheduled(timeScheduled);
		taskEntry.setTimeStarted(timeStarted);
		taskEntry.setTimeFinished(timeFinished);
		taskEntry.setRestartCount(restartCount);
		return taskEntry;
!!!720002.java!!!	rescueCheckPoint(inout checkPointDir : File) : CheckPointEntry
		/* Check input parameters. */
		if (checkPointDir == null) {
			throw new NullPointerException("checkPointDir is null");
		}
		
		/* Find checkPointEntryFile. */
		File checkPointEntryFile = null;
		File[] items = checkPointDir.listFiles();
		for (File item : items) {
			if (item.getName().equals("checkPointEntry.xml")) {
				checkPointEntryFile = item;
				break;
			}
		}
		if (checkPointEntryFile == null) {
			throw new IllegalArgumentException("File named \"checkPointEntry\" "
					+ "not found in specified directory \""
					+ checkPointDir.getAbsolutePath() + "\"");
		}
		
		/* Build CheckPointEntry object from XML file... */
		
		/* Prepare DOM and obtain Document. */
		DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
		factory.setValidating(false);
		
		Document document;
		try {
			document = factory.newDocumentBuilder().parse(checkPointEntryFile);
		} catch (SAXException e) {
			throw new RuntimeException("Parse error occured.", e);
		} catch (IOException e) {
			throw new RuntimeException(e);
		} catch (ParserConfigurationException e) {
			throw new RuntimeException("DocumentBuilder can not be "
					+ "created", e);
		}
		
		/* Process the root element. */
		Element rootElement = document.getDocumentElement();
		if (!rootElement.getTagName().equals("checkPointEntry")) {
			throw new IllegalArgumentException("Root element of XML file \""
					+ checkPointEntryFile.getAbsolutePath() + "\" sould be "
					+ "\"checkPointEntry\" (not \"" + rootElement.getTagName()
					+ "\")");
		}
		
		/* Process element name. */
		Element nameElement
			= (Element) rootElement.getElementsByTagName("name").item(0);
		String name = parseCDATA(nameElement);
		
		/* Process element taskId. */
		Element taskIdElement
			= (Element) rootElement.getElementsByTagName("taskId").item(0);
		String taskId = parseCDATA(taskIdElement);
		
		/* Process element contextId. */
		Element contextIdElement
			= (Element) rootElement.getElementsByTagName("contextId").item(0);
		String contextId = parseCDATA(contextIdElement);
		
		/* Process element hostName. */
		Element hostNameElement
			= (Element) rootElement.getElementsByTagName("hostName").item(0);
		String hostName = parseCDATA(hostNameElement);
		
		/* Load MagicObject from file. */
		Serializable magicObject
			= loadObjectFromFile(new File(checkPointDir, "magicObject"));
		
		/* Create (initialize) and return new entry. */
		CheckPointEntry checkPointEntry
			= new CheckPointEntry(name, taskId, contextId, hostName,
					magicObject);
		return checkPointEntry;
!!!720130.java!!!	rescueHostRuntime(inout hostRuntimeDir : File) : HostRuntimeEntry
		/* Check input parameters. */
		if (hostRuntimeDir == null) {
			throw new NullPointerException("hostRuntimeDir is null");
		}
		
		/* Find hostRuntimeEntryFile. */
		File hostRuntimeEntryFile = null;
		File[] items = hostRuntimeDir.listFiles();
		for (File item : items) {
			if (item.getName().equals("hostRuntimeEntry.xml")) {
				hostRuntimeEntryFile = item;
				break;
			}
		}
		if (hostRuntimeEntryFile == null) {
			throw new IllegalArgumentException("File named "
					+ "\"hostRuntimeEntry\" not found in specified directory \""
					+ hostRuntimeDir.getAbsolutePath() + "\"");
		}
		
		/* Build HostRuntimeEntry object from XML file... */
		
		/* Prepare DOM and obtain Document. */
		DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
		factory.setValidating(false);
		
		Document document;
		try {
			document = factory.newDocumentBuilder().parse(hostRuntimeEntryFile);
		} catch (SAXException e) {
			throw new RuntimeException("Parse error occured.", e);
		} catch (IOException e) {
			throw new RuntimeException(e);
		} catch (ParserConfigurationException e) {
			throw new RuntimeException("DocumentBuilder can not be "
					+ "created", e);
		}
		
		/* Process the root element. */
		Element rootElement = document.getDocumentElement();
		if (!rootElement.getTagName().equals("hostRuntimeEntry")) {
			throw new IllegalArgumentException("Root element of XML file \""
					+ hostRuntimeEntryFile.getAbsolutePath() + "\" sould be "
					+ "\"hostRuntimeEntry\" (not \"" + rootElement.getTagName()
					+ "\")");
		}
		
		/* Process element hostName. */
		Element hostNameElement
			= (Element) rootElement.getElementsByTagName("hostName").item(0);
		String hostName = parseCDATA(hostNameElement);
		
		/* Process element reservation. */
		Element reservationElement
			= (Element) rootElement.getElementsByTagName("reservation").item(0);
		String reservation = parseCDATA(reservationElement);
		
		/* Create (initialize) and return new entry. */
		HostRuntimeEntry hostRuntimeEntry = new HostRuntimeEntry(hostName);
		hostRuntimeEntry.setReservation(reservation);
		return hostRuntimeEntry;
!!!720258.java!!!	rescueData(inout newRootDir : File, inout oldRootDir : File) : Data
		/* Check input parameters. */
		if (newRootDir == null) {
			throw new NullPointerException("newRootDir is null");
		}
		if (oldRootDir == null) {
			throw new NullPointerException("oldRootDir is null");
		}
		
		/* Test if oldRootDir directory exists. */
		if (!oldRootDir.exists() || !oldRootDir.isDirectory()) {
			throw new IllegalArgumentException("oldRootDir \"" 
					+ oldRootDir.getAbsolutePath() + "does not exist or it is "
					+ "not directory");
		}
		
		/* Create new data object. */
		Data data = new Data(newRootDir);
		
		/* Prepare directories. */
		File contextsDir = new File(oldRootDir, CONTEXTS_DIR_NAME);
		File tasksDir = new File(oldRootDir, TASKS_DIR_NAME);
		File checkPointsDir = new File(oldRootDir, CHECKPOINTS_DIR_NAME);
		File hostRuntimesDir = new File(oldRootDir, HOSTRUNTIMES_DIR_NAME);
		
		/* Rescue hostRuntimes. */
		File[] hostRuntimes = hostRuntimesDir.listFiles();
		for (File hostRuntime : hostRuntimes) {
			HostRuntimeEntry hostRuntimeEntry = rescueHostRuntime(hostRuntime);
			data.addHostRuntime(hostRuntimeEntry);
		}
		
		/* Rescue contexts. */
		File[] contexts = contextsDir.listFiles();
		for (File context : contexts) {
			ContextEntry contextEntry = rescueContext(context);
			data.newContext(contextEntry);
		}
		
		/* Rescue tasks. */
		File[] tasksContexts = tasksDir.listFiles();
		for (File tasksContext : tasksContexts) {
			File[] tasks = tasksContext.listFiles();
			for (File task : tasks) {
				TaskEntry taskEntry = rescueTask(task);
				TaskDescriptor taskDescriptor
					= (TaskDescriptor) loadObjectFromFile(
						new File(task, "taskDescriptor"));
				TaskData taskData = new TaskData(taskDescriptor);
				data.newTask(taskEntry, taskData);
			}
		}
		
		/* Rescue checkPoints. */
		File[] checkPointsTasksContexts = checkPointsDir.listFiles();
		for (File checkPointsTasksContext : checkPointsTasksContexts) {
			File[] checkPointsTasks = checkPointsTasksContext.listFiles();
			for (File checkPointsTask : checkPointsTasks) {
				File[] checkPoints = checkPointsTask.listFiles();
				for (File checkPoint : checkPoints) {
					CheckPointEntry checkPointEntry
						= rescueCheckPoint(checkPoint);
					data.newCheckPoint(checkPointEntry);
				}
			}
		}
		
		return data;
!!!720386.java!!!	deleteRecursive(inout file : File) : void
		/* Check input parameters. */
		if (file == null) {
			throw new NullPointerException("directory is null");
		}
		
		/* Delete (recursively). */
		if (file.isFile()) {
			file.delete();
		} else if (file.isDirectory()) {
			File[] items = file.listFiles();
			for (File item : items) {
				deleteRecursive(item);
			}
			file.delete();
		}
!!!720514.java!!!	writeXmlFile(inout document : Document, inout xmlFile : File) : void
		/* Check input parameters. */
		if (document == null) {
			throw new NullPointerException("document is null");
		}
		if (xmlFile == null) {
			throw new NullPointerException("xmlFile is null");
		}
		
		/* Prepare transformer and do transformation. */
		Transformer transformer;
		try {
			transformer = TransformerFactory.newInstance()
				.newTransformer();
		} catch (TransformerConfigurationException e) {
			throw new RuntimeException("Could not create Transformer for XML. "
					+ "This should not occur.", e);
		}
		transformer.setOutputProperty(OutputKeys.INDENT, "yes");
		try {
			transformer.transform(new DOMSource(document),
					new StreamResult(xmlFile));
		} catch (TransformerException e) {
			throw new RuntimeException("Unexpected failure", e);
		}
!!!720642.java!!!	addContext(inout context : ContextEntry) : void
		/* Check input parameters. */
		if (context == null) {
			throw new NullPointerException("context is null");
		}
		
		/* Prepare directories. */
		File contextsSubDir
			= new File(this.contextsDir, context.getContextId());
		File tasksSubDir = new File(this.tasksDir, context.getContextId());
		File checkPointsSubDir
			= new File(this.checkPointsDir, context.getContextId());
		/* Make directories. */
		contextsSubDir.mkdir();
		tasksSubDir.mkdir();
		checkPointsSubDir.mkdir();
		
		/* Store informations about context... */
		
		/* Prepare new document. */
		Document document;
		try {
			document = DocumentBuilderFactory.newInstance()
				.newDocumentBuilder().newDocument();
		} catch (ParserConfigurationException e) {
			throw new RuntimeException("Could not create new DOM Document. "
					+ "This should not occur.", e);
		}
		
		/* Add root element. */
		Element rootElement = document.createElement("contextEntry");
		document.appendChild(rootElement);
		/* Set attributes. */
		rootElement.setAttribute(
				"open", (context.isOpen()) ? "true" : "false");
		
		/* Add contextId element. */
		Element contextIdElement = document.createElement("contextId");
		rootElement.appendChild(contextIdElement);
		CDATASection contextIdData
			= document.createCDATASection(context.getContextId());
		contextIdElement.appendChild(contextIdData);
		
		/* Add contextName element. */
		Element contextNameElement = document.createElement("contextName");
		rootElement.appendChild(contextNameElement);
		CDATASection contextNameData
			= document.createCDATASection(context.getContextName());
		contextNameElement.appendChild(contextNameData);
		
		/* Add contextDescription element. */
		Element contextDescriptionElement
			= document.createElement("contextDescription");
		rootElement.appendChild(contextDescriptionElement);
		CDATASection contextDescriptionData
			= document.createCDATASection(context.getContextDescription());
		contextDescriptionElement.appendChild(contextDescriptionData);
		
		/* Write to XML file. */
		writeXmlFile(document, new File(contextsSubDir, "contextEntry.xml"));
		
		/* Store MagicObject to file. */
		storeObjectToFile(context.getMagicObject(),
				new File(contextsSubDir, "magicObject"));
!!!720770.java!!!	remContext(in contextId : String) : void
		/* Check input parameters. */
		if (contextId == null) {
			throw new NullPointerException("contextId is null");
		}
		
		/* Prepare directories. */
		File contextsSubDir = new File(this.contextsDir, contextId);
		File tasksSubDir = new File(this.tasksDir, contextId);
		File checkPointsSubDir = new File(this.checkPointsDir, contextId);
		/* Delete directories. */
		deleteRecursive(contextsSubDir);
		deleteRecursive(tasksSubDir);
		deleteRecursive(checkPointsSubDir);
!!!720898.java!!!	changeContext(inout context : ContextEntry) : void
		/* Check input parameters. */
		if (context == null) {
			throw new NullPointerException("context is null");
		}
		
		/* Prepare directories. */
		File contextsSubDir
			= new File(this.contextsDir, context.getContextId());
		/* Remove directories. */
		deleteRecursive(contextsSubDir);
		
		addContext(context);
!!!721026.java!!!	addTask(inout task : TaskEntry, inout taskData : TaskData) : void
		/* Check input parameters. */
		if (task == null) {
			throw new NullPointerException("task is null");
		}
		
		/* Prepare directories. */
		File tasksSubDir
			= new File(new File(this.tasksDir, task.getContextId()),
					task.getTaskId());
		File checkPointsSubDir
			= new File(new File(this.checkPointsDir, task.getContextId()),
					task.getTaskId());
		/* Make directories. */
		tasksSubDir.mkdir();
		checkPointsSubDir.mkdir();
		
		/* Store informations about task... */
		
		/* Prepare new document. */
		Document document;
		try {
			document = DocumentBuilderFactory.newInstance()
				.newDocumentBuilder().newDocument();
		} catch (ParserConfigurationException e) {
			throw new RuntimeException("Could not create new DOM Document. "
					+ "This should not occur.", e);
		}
		
		/* Add root element. */
		Element rootElement = document.createElement("taskEntry");
		document.appendChild(rootElement);
		/* Set attributes. */
		rootElement.setAttribute(
				"exclusivity", task.getExclusivity().toString());
		rootElement.setAttribute(
				"serviceFlag", (task.getServiceFlag()) ? "true" : "false");
		rootElement.setAttribute("state", task.getState().toString());
		
		/* Add taskId element. */
		Element taskIdElement = document.createElement("taskId");
		rootElement.appendChild(taskIdElement);
		CDATASection taskIdData
			= document.createCDATASection(task.getTaskId());
		taskIdElement.appendChild(taskIdData);
		
		/* Add contextId element. */
		Element contextIdElement = document.createElement("contextId");
		rootElement.appendChild(contextIdElement);
		CDATASection contextIdData
			= document.createCDATASection(task.getContextId());
		contextIdElement.appendChild(contextIdData);
		
		/* Add packageName element. */
		Element packageNameElement = document.createElement("packageName");
		rootElement.appendChild(packageNameElement);
		CDATASection packageNameData
			= document.createCDATASection(task.getPackageName());
		packageNameElement.appendChild(packageNameData);

		/* Add taskName element. */
		Element taskNameElement = document.createElement("taskName");
		rootElement.appendChild(taskNameElement);
		CDATASection taskNameData
			= document.createCDATASection(task.getTaskName());
		taskNameElement.appendChild(taskNameData);
		
		/* Add taskDescription element. */
		Element taskDescriptionElement
			= document.createElement("taskDescription");
		rootElement.appendChild(taskDescriptionElement);
		CDATASection taskDescriptionData
			= document.createCDATASection(task.getTaskDescription());
		taskDescriptionElement.appendChild(taskDescriptionData);
		
		/* Add hostName element. */
		Element hostNameElement
			= document.createElement("hostName");
		rootElement.appendChild(hostNameElement);
		if (task.getHostName() != null) {
			CDATASection hostNameData
				= document.createCDATASection(task.getHostName());
			hostNameElement.appendChild(hostNameData);
		}
		
		/* Add directoryPathTask element. */
		Element directoryPathTaskElement
			= document.createElement("directoryPathTask");
		rootElement.appendChild(directoryPathTaskElement);
		CDATASection directoryPathTaskData
			= document.createCDATASection(task.getDirectoryPathTask());
		directoryPathTaskElement.appendChild(directoryPathTaskData);
		
		/* Add directoryPathWorking element. */
		Element directoryPathWorkingElement
			= document.createElement("directoryPathWorking");
		rootElement.appendChild(directoryPathWorkingElement);
		CDATASection directoryPathWorkingData
			= document.createCDATASection(task.getDirectoryPathWorking());
		directoryPathWorkingElement.appendChild(directoryPathWorkingData);
		
		/* Add directoryPathTemporary element. */
		Element directoryPathTemporaryElement
			= document.createElement("directoryPathTemporary");
		rootElement.appendChild(directoryPathTemporaryElement);
		CDATASection directoryPathTemporaryData
			= document.createCDATASection(task.getDirectoryPathTemporary());
		directoryPathTemporaryElement.appendChild(directoryPathTemporaryData);
		
		/* Add taskProperties element. */
		Element taskPropertiesElement
			= document.createElement("taskProperties");
		rootElement.appendChild(taskPropertiesElement);
		/* Add taskProperty elements (sub-elements of taskProperties element).
		 */
		Properties taskProperties = task.getTaskProperties();
		Enumeration taskPropertiesEnumeration = taskProperties.propertyNames();
		while (taskPropertiesEnumeration.hasMoreElements()) {
			String key = (String) taskPropertiesEnumeration.nextElement();
			String value = (String) taskProperties.get(key);
			Element taskPropertyElement
				= document.createElement("taskProperty");
			taskPropertiesElement.appendChild(taskPropertyElement);
			taskPropertyElement.setAttribute("key", key);
			taskPropertyElement.setAttribute("value", value);
		}
		
		/* Add timeSubmitted element. */
		Element timeSubmittedElement
			= document.createElement("timeSubmitted");
		rootElement.appendChild(timeSubmittedElement);
		CDATASection timeSubmittedData
			= document.createCDATASection(
					String.valueOf(task.getTimeSubmitted()));
		timeSubmittedElement.appendChild(timeSubmittedData);
		
		/* Add timeScheduled element. */
		Element timeScheduledElement
			= document.createElement("timeScheduled");
		rootElement.appendChild(timeScheduledElement);
		CDATASection timeScheduledData
			= document.createCDATASection(
					String.valueOf(task.getTimeScheduled()));
		timeScheduledElement.appendChild(timeScheduledData);
		
		/* Add timeStarted element. */
		Element timeStartedElement
			= document.createElement("timeStarted");
		rootElement.appendChild(timeStartedElement);
		CDATASection timeStartedData
			= document.createCDATASection(
					String.valueOf(task.getTimeStarted()));
		timeStartedElement.appendChild(timeStartedData);
		
		/* Add timeFinished element. */
		Element timeFinishedElement
			= document.createElement("timeFinished");
		rootElement.appendChild(timeFinishedElement);
		CDATASection timeFinishedData
			= document.createCDATASection(
					String.valueOf(task.getTimeFinished()));
		timeFinishedElement.appendChild(timeFinishedData);
		
		/* Add restartCount element. */
		Element restartCountElement
			= document.createElement("restartCount");
		rootElement.appendChild(restartCountElement);
		CDATASection restartCountData
			= document.createCDATASection(
					String.valueOf(task.getRestartCount()));
		restartCountElement.appendChild(restartCountData);
		
		/* Add restartMax element. */
		Element restartMaxElement
			= document.createElement("restartMax");
		rootElement.appendChild(restartMaxElement);
		CDATASection restartMaxData
			= document.createCDATASection(
					String.valueOf(task.getRestartMax()));
		restartMaxElement.appendChild(restartMaxData);
		
		/* Add timeoutRun element. */
		Element timeoutRunElement
			= document.createElement("timeoutRun");
		rootElement.appendChild(timeoutRunElement);
		CDATASection timeoutRunData
			= document.createCDATASection(
					String.valueOf(task.getTimeoutRun()));
		timeoutRunElement.appendChild(timeoutRunData);
		
		/* Write to XML file. */
		writeXmlFile(document, new File(tasksSubDir, "taskEntry.xml"));
		
		/* Store taskDescriptor to file. */
		if (taskData.getTaskDescriptor() != null) {
			storeObjectToFile(taskData.getTaskDescriptor(),
					new File(tasksSubDir, "taskDescriptor"));
		}
!!!721154.java!!!	remTask(in taskId : String, in contextId : String) : void
		/* Check input parameters. */
		if (taskId == null) {
			throw new NullPointerException("taskId is null");
		}
		if (contextId == null) {
			throw new NullPointerException("contextId is null");
		}
		
		/* Prepare directories. */
		File tasksSubDir = new File(new File(this.tasksDir, contextId), taskId);
		File checkPointsSubDir
			= new File(new File(this.checkPointsDir, contextId), taskId);
		/* Delete directories. */
		deleteRecursive(tasksSubDir);
		deleteRecursive(checkPointsSubDir);
!!!721282.java!!!	changeTask(inout task : TaskEntry, inout taskData : TaskData) : void
		/* Check input parameters. */
		if (task == null) {
			throw new NullPointerException("task is null");
		}
		
		/* Prepare directories. */
		File tasksSubDir = new File(
				new File(this.tasksDir, task.getContextId()), task.getTaskId());
		/* Remove directories. */
		deleteRecursive(tasksSubDir);
		
		this.addTask(task, taskData);
!!!721410.java!!!	addCheckPoint(inout checkPoint : CheckPointEntry) : void
		/* Check input parameters. */
		if (checkPoint == null) {
			throw new NullPointerException("checkPoint is null");
		}
		
		/* Prepare directories. */
		File checkPointsSubSubDir
			= new File(new File(
					new File(this.checkPointsDir, checkPoint.getContextId()),
					checkPoint.getTaskId()), checkPoint.getName());
		/* Make directories. */
		checkPointsSubSubDir.mkdir();
		
		/* Store informations about checkPoint... */
		
		/* Prepare new document. */
		Document document;
		try {
			document = DocumentBuilderFactory.newInstance()
				.newDocumentBuilder().newDocument();
		} catch (ParserConfigurationException e) {
			throw new RuntimeException("Could not create new DOM Document. "
					+ "This should not occur.", e);
		}
		
		/* Add root element. */
		Element rootElement = document.createElement("checkPointEntry");
		document.appendChild(rootElement);
		/* Set attributes. */
			// ... no attributes
		
		/* Add name element. */
		Element nameElement = document.createElement("name");
		rootElement.appendChild(nameElement);
		CDATASection nameData
			= document.createCDATASection(checkPoint.getName());
		nameElement.appendChild(nameData);
		
		/* Add taskId element. */
		Element taskIdElement = document.createElement("taskId");
		rootElement.appendChild(taskIdElement);
		CDATASection taskIdData
			= document.createCDATASection(checkPoint.getTaskId());
		taskIdElement.appendChild(taskIdData);
		
		/* Add contextId element. */
		Element contextIdElement = document.createElement("contextId");
		rootElement.appendChild(contextIdElement);
		CDATASection contextIdData
			= document.createCDATASection(checkPoint.getContextId());
		contextIdElement.appendChild(contextIdData);
		
		/* Add hostName element. */
		Element hostNameElement = document.createElement("hostName");
		rootElement.appendChild(hostNameElement);
		CDATASection hostNameData
			= document.createCDATASection(checkPoint.getHostName());
		hostNameElement.appendChild(hostNameData);
		
		/* Write to XML file. */
		writeXmlFile(document,
				new File(checkPointsSubSubDir, "checkPointEntry.xml"));
		
		/* Store MagicObject to file. */
		storeObjectToFile(checkPoint.getMagicObject(),
				new File(checkPointsSubSubDir, "magicObject"));
!!!721538.java!!!	remCheckPoint(in name : String, in taskId : String, in contextId : String) : void
		/* Check input parameters. */
		if (name == null) {
			throw new NullPointerException("name is null");
		}
		if (taskId == null) {
			throw new NullPointerException("taskId is null");
		}
		if (contextId == null) {
			throw new NullPointerException("contextId is null");
		}
		
		/* Prepare directories. */
		File checkPointsSubSubDir
			= new File(new File(
					new File(this.checkPointsDir, contextId), taskId), name);
		/* Delete directories. */
		deleteRecursive(checkPointsSubSubDir);
!!!721666.java!!!	addHostRuntime(inout hostRuntime : HostRuntimeEntry) : void
		/* Check input parameters. */
		if (hostRuntime == null) {
			throw new NullPointerException("hostRuntime is null");
		}
		
		/* Prepare directories. */
		File hostRuntimesSubDir
			= new File(this.hostRuntimesDir, hostRuntime.getHostName());
		/* Make directories. */
		hostRuntimesSubDir.mkdir();
		
		/* Store informations about hostRuntime... */
		
		/* Prepare new document. */
		Document document;
		try {
			document = DocumentBuilderFactory.newInstance()
				.newDocumentBuilder().newDocument();
		} catch (ParserConfigurationException e) {
			throw new RuntimeException("Could not create new DOM Document. "
					+ "This should not occur.", e);
		}
		
		/* Add root element. */
		Element rootElement = document.createElement("hostRuntimeEntry");
		document.appendChild(rootElement);
		/* Set attributes. */
			// ... no attributes
		
		/* Add hostName element. */
		Element hostNameElement = document.createElement("hostName");
		rootElement.appendChild(hostNameElement);
		CDATASection hostNameData
			= document.createCDATASection(hostRuntime.getHostName());
		hostNameElement.appendChild(hostNameData);
		
		/* Add reservation element. */
		Element reservationElement = document.createElement("reservation");
		rootElement.appendChild(reservationElement);
		if (hostRuntime.getReservation() != null) {
			CDATASection reservationData
				= document.createCDATASection(hostRuntime.getReservation());
			reservationElement.appendChild(reservationData);
		}
		
		/* Write to XML file. */
		writeXmlFile(document,
				new File(hostRuntimesSubDir, "hostRuntimeEntry.xml"));
!!!721794.java!!!	remHostRuntime(in hostName : String) : void
		/* Check input parameters. */
		if (hostName == null) {
			throw new NullPointerException("hostName is null");
		}
		
		/* Prepare directories. */
		File hostRuntimesSubDir = new File(this.hostRuntimesDir, hostName);
		/* Delete directories. */
		deleteRecursive(hostRuntimesSubDir);
!!!721922.java!!!	changeHostRuntime(inout hostRuntime : HostRuntimeEntry) : void
		/* Check input parameters. */
		if (hostRuntime == null) {
			throw new NullPointerException("hostRuntime is null");
		}
		
		/* Prepare directories. */
		File hostRuntimesSubDir
			= new File(this.hostRuntimesDir, hostRuntime.getHostName());
		/* Remove directories. */
		deleteRecursive(hostRuntimesSubDir);
		
		addHostRuntime(hostRuntime);
