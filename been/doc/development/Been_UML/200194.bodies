class JonasBuild
!!!637698.java!!!	JonasBuild()
		super();
!!!637826.java!!!	run() : void
		jonasDir = getTaskProperty(JONAS_DIR);
		logInfo("Jonas directory: " + jonasDir);
		
		tomcatDir = getTaskProperty(TOMCAT_DIR);
		logInfo("Tomcat directory: " + tomcatDir);

		// create the command to launch Ant
		ArrayList<String> params = new ArrayList<String>();
		
		if (isRunningInWindows()) {
			params.add("cmd");
			params.add("/C");
			params.add("call");
		}

		params.add("ant");
		
		// add the task directory to Ant's library search path so that
		// bcel.jar is added to the classpath for Jonas compilation
		params.add("-lib");
		params.add(getTaskDirectory());
		
		params.add("-Dcatalina.home\"=\"" + tomcatDir);
		params.add("-Djonas.tag\"=\"jonas");
		String[] cmdArray = params.toArray(new String[params.size()]);
		
		try {
			logInfo("Starting Ant");
			logDebug("Executing: " + ArrayUtils.join(" ", cmdArray));
			
			ProcessBuilder builder = new ProcessBuilder(cmdArray);
			Map<String, String> env = builder.environment();
			builder.directory(new File(jonasDir));
			Process p = builder.start();
			p.getOutputStream().close();
			
			/* Read in the output from the subprocess */
			OutputReader stdoutReader = 
				new OutputReader(p.getInputStream(), OutputType.STDOUT);
			OutputReader stderrReader = 
				new OutputReader(p.getErrorStream(), OutputType.STDERR);
			stdoutReader.start();
			stderrReader.start();
			// wait untill the script finishes
			if (p.waitFor() != 0) {
				throw new TaskException("Build failed");
			}

		} catch (TaskException e) {
			throw e;
		} catch (Exception e) {
			throw new TaskException("Cannot launch Ant", e);
		}
		
		logInfo("Build succesfull");
!!!637954.java!!!	checkRequiredProperties() : void
		checkRequiredProperties(new String[]{JONAS_DIR,TOMCAT_DIR});
