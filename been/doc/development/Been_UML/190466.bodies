class ExperimentImplementation
!!!534786.java!!!	ExperimentImplementation(inout aid : AID)
		
		super();
		
		AnalysisEntityManager.getInstance().ensureValidAid(aid);
		
		this.aid = aid;
		
		experimentEntityManager = database.getExperimentEntityManager();
!!!534914.java!!!	getEntity(inout id : EID) : Entity
		return experimentEntityManager.getExperiment(aid, id); 
!!!535042.java!!!	setEntityComment(inout id : EID, in comment : String) : void
		experimentEntityManager.setExperimentComment(aid, id, comment);		
!!!535170.java!!!	getEntities() : Entity
		return experimentEntityManager.getExperimentsInAnalysis(aid);
!!!535298.java!!!	getSubentityInterface(inout id : EID) : EntityInterface
		return new BinaryImplementation(aid, id);
!!!535426.java!!!	getExportFormats() : DataFormat
		return exporter.getExperimentExportFormats();
!!!535554.java!!!	beginExport(inout ids : EID, in formatId : String, inout ip : InetAddress, in port : int) : DownloadHandle
		return exporter.beginExperimentsExport(aid, ids, formatId, ip, port);
!!!535682.java!!!	getImportFormats() : DataFormat
		return importer.getExperimentImportFormats();
!!!535810.java!!!	beginImport(in formatId : String, inout ip : InetAddress, in port : int) : UploadHandle
		
		return importer.beginExperimentsImport(formatId, ip, port);
!!!535938.java!!!	deleteEntity(inout id : EID) : void
	
		experimentEntityManager.eraseExperiment(aid, id);
!!!536066.java!!!	graphCount(inout graphType : GraphType, inout id : EID) : int

  		if (graphType == GraphType.LOAD) {
  			throw new UnsupportedOperationException(LOAD_FOR_RUNS_ONLY);
  		}
		
  		return experimentEntityManager.getExperimentGraphCount(graphType, aid, id);
!!!536194.java!!!	getGraphInfo(inout graphType : GraphType, inout id : EID, in index : int) : GraphInfo
		
  		if (graphType == GraphType.LOAD) {
  			throw new UnsupportedOperationException(LOAD_FOR_RUNS_ONLY);
  		}

  		try {
			return experimentEntityManager.getExperimentGraphInfo(graphType, aid, id, index);
		} catch (IOException e) {
			Logger.logError("I/O error reading graph info for " 
					+ Database.getExperimentReferenceString(aid, id) + ".");
			return null;
		}
!!!536322.java!!!	beginGraphDownload(inout graphType : GraphType, inout id : EID, inout ip : InetAddress, in port : int, in index : int) : DownloadHandle

  		if (graphType == GraphType.LOAD) {
  			throw new UnsupportedOperationException(LOAD_FOR_RUNS_ONLY);
  		}
		
		if (graphCount(graphType, id) == 0) {
			throw new IllegalArgumentException("Graph doesn't exist.");
		} else {
			try {		
				return experimentEntityManager.downloadExperimentFile(aid, id,  
						experimentEntityManager.getExperimentGraphPath(graphType, aid, id, index),
							ip.getCanonicalHostName(), port, false);
			} catch (IOException e) {
				Logger.logError("I/O error reading graph for " 
						+ Database.getExperimentReferenceString(aid, id) + ".");
				return null;
			}
		}
!!!536450.java!!!	beginRawDataDownload(inout id : EID, inout ip : InetAddress, in port : int) : DownloadHandle
		throw new UnsupportedOperationException(RAW_DATA_FOR_RUNS_ONLY);
!!!536578.java!!!	endRawDataDownload(inout handle : DownloadHandle) : void
		throw new UnsupportedOperationException(RAW_DATA_FOR_RUNS_ONLY);
!!!536706.java!!!	getRawDataDownloadStatus(inout handle : DownloadHandle) : DownloadStatus
		throw new UnsupportedOperationException(RAW_DATA_FOR_RUNS_ONLY);
!!!536834.java!!!	getContext(inout id : EID) : String
		return experimentEntityManager.getExperimentContext(aid, id);
!!!536962.java!!!	getTasks(inout id : EID) : String
		
		TaskListManager taskListManagerInstance = TaskListManager.getInstance();
		
		synchronized (LockManager.taskListLock) {
			taskListManagerInstance.loadExperimentTaskList(aid, id);
			return taskListManagerInstance.getExperimentTaskList();
		}
!!!537090.java!!!	getLogsForTask(inout id : EID, in taskID : String) : LogRecord
	    
	    String contextId = experimentEntityManager.getExperimentContext(aid, id);
	    
	    if (!database.getLogStorage().isTaskRegistered(contextId, taskID)) {
		return new LogRecord[] {};
	    }
	    
	    return database.getLogStorage().getLogsForTask(contextId, taskID);
