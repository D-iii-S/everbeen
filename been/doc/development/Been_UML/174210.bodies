class ListProperties
!!!393218.java!!!	writePropertyTree(inout o : PropertyTreeReadInterface, in depth : int) : void
		
		indent(depth);
		System.out.println(o.getName(true));
		
		for (Iterator< NameValuePair > it1 = o.getPropertyIterator(); it1.hasNext(); ) {

			NameValuePair current = it1.next();
			
			indent(depth + 1);
			
			if (current.getSecond() instanceof ValueBasicInterface) {
				String unit = ((ValueBasicInterface) current.getSecond()).getUnit();
				System.out.println(current + (unit == null ? "" : " " + unit));
			} else {
				System.out.println(current);
			}
		}
		
		for (Iterator< PropertyTreeReadInterface > it = o.getObjectIterator(); it.hasNext(); ) {

			PropertyTreeReadInterface current = it.next();
			
			writePropertyTree(current, depth + 1);
		}		
!!!393346.java!!!	main(in args : String) : void

		String managerURL = MANAGER_URL_DEFAULT;
		
		/* set path to the manager from the command line.
		 */
		if (args.length > 0) {
			managerURL = args[0];
		}
		
		/* Connect to the Host Manager
		 */
		HostManagerInterface manager = null;
		
		try {
			manager = (HostManagerInterface) Naming.lookup("rmi://" + managerURL + HostManagerInterface.URL);
		} catch (Exception e) {
			System.err.println("Error connecting to the Host Manager.");
			System.err.println("Error message: " + e.getMessage());
			return;
		}

		/* Get data about the first host.
		 */
		HostInfoInterface hi = null;
		
		try {
			hi = manager.getHostInfo(manager.getHostNames()[0]);
		} catch (Exception e) {
			System.err.println("Error querying host data.");
			System.err.println("Error message: " + e.getMessage());
			return;
		}

		writePropertyTree(hi, 0);
!!!393474.java!!!	indent(in d : int) : void

		for (int i = 0; i < d; ++i) {
			System.out.print("  ");
		}
