class TaskDescriptor
!!!675714.java!!!	validate() : boolean
		boolean valid = true;

		if (this.taskId == null) {
			this.validateLog = this.validateLog.concat("taskId is not set\n");
			valid = false;
		}

		if (this.contextId == null) {
			this.validateLog = this.validateLog.concat("contextId is not "
					+ "set\n");
			valid = false;
		}

		if ((this.packageName == null) && (this.packageRsl == null)) {
			this.validateLog = this.validateLog.concat("neither packageName "
					+ "and packageRsl is not set\n");
			valid = false;
		}

		if ((this.hostRuntimesAsTask == null)
				&& (this.hostRuntimesName == null)
				&& (this.hostRuntimesRsl == null)) {
			this.validateLog = this.validateLog.concat("neither "
					+ "hostRuntimesName and hostRuntimesRsl is not set\n");
			valid = false;
		}
		
		/* Check values set in checkPoints. */
		for (Dependency dependencyCheckPoint : this.dependencyCheckPoints) {
			if ((dependencyCheckPoint.getTaskId() == null)
					|| (dependencyCheckPoint.getType() == null)) {
				this.validateLog = this.validateLog.concat(
						"DependencyCheckpoint with entered values (taskId \""
						+ dependencyCheckPoint.getTaskId() + "\", type \""
						+ dependencyCheckPoint.getType() + "\") is not "
						+ "allowed");
				valid = false;
			}
		}

		return valid;
!!!675842.java!!!	validateGetLog() : String
		return this.validateLog;
!!!675970.java!!!	setTaskId(in taskId : String) : void
		if (taskId == null) {
			throw new NullPointerException("taskId is null");
		}

		this.taskId = taskId;
!!!676098.java!!!	setTaskName(in name : String) : void
		if (name == null) {
			throw new NullPointerException("name is null");
		}

		this.taskName = name;
!!!676226.java!!!	setTaskDescription(in description : String) : void
		if (description == null) {
			throw new NullPointerException("description is null");
		}

		this.taskDescription = description;
!!!676354.java!!!	setContextId(in contextId : String) : void
		if (contextId == null) {
			throw new NullPointerException("contextId is null");
		}

		this.contextId = contextId;
!!!676482.java!!!	addArguments(in argument : String) : void
		ArrayList<String> currentArguments;
		
		currentArguments = new ArrayList<String>(
				Arrays.asList(this.taskArguments));
		currentArguments.add(argument);
		
		this.taskArguments = (String[]) currentArguments.toArray(
				new String[currentArguments.size()]);
!!!676610.java!!!	setArguments(in arguments : String, inout append : boolean) : void
		if (!append) {  /* delete current arguments */
			this.taskArguments = new String[0];
		}

		int beginPosition = 0; /* Begin of the processed argument */
		int endPosition = 0; /* End of the processed argument */

		if (arguments == null) {
			return;
		}
		
		for (;; ) {
			endPosition = arguments.indexOf(' ', beginPosition);
			if (endPosition == beginPosition) {
				/* Character on beginPosition is a space */
				// do nothing
			} else if (endPosition == -1) {
			/* Only one argument remains in arguments string */
				this.addArguments(arguments.substring(
						beginPosition));
				
				break;  // end of string reached
			} else {
				this.addArguments(arguments.substring(
						beginPosition, endPosition));
			}
			
			beginPosition = endPosition + 1;
		}
!!!676738.java!!!	addJavaOption(in option : String) : void
		ArrayList<String> currentJavaOptions;

		currentJavaOptions = new ArrayList<String>(Arrays
				.asList(this.javaOptions));
		currentJavaOptions.add(option);

		this.javaOptions = (String[]) currentJavaOptions
				.toArray(new String[currentJavaOptions.size()]);
!!!676866.java!!!	setJavaOptions(in options : String, inout append : boolean) : void
		if (!append) { /* delete current options */
			this.javaOptions = new String[0];
		}

		int beginPosition = 0; /* Begin of the processed option */
		int endPosition = 0; /* End of the processed option */

		if (options == null) {
			return;
		}

		for (;; ) {
			endPosition = options.indexOf(' ', beginPosition);
			if (endPosition == beginPosition) {
			/* Character on beginPosition is a space */
				// do nothing
			} else if (endPosition == -1) {
			/* Only one option remains in options string */
				this.addJavaOption(options.substring(
						beginPosition));
				
				break;  // end of string reached
			} else {
				this.addJavaOption(options.substring(
						beginPosition, endPosition));
			}
			
			beginPosition = endPosition + 1;
		}
!!!676994.java!!!	setTaskExclusive(inout exclusivity : TaskExclusivity) : void
		this.taskExclusivity = exclusivity;
!!!677122.java!!!	addTaskProperties(in key : String, in value : String) : void
		this.taskProperties.setProperty(key, value);
!!!677250.java!!!	setTaskProperties(inout properties : Properties) : void
		this.taskProperties = properties;
!!!677378.java!!!	addTaskPropertyObject(in key : String, inout value : Serializable) : void
		TaskPropertyObject property = new TaskPropertyObject(key, value);

		this.taskPropertyObjectList.add(property);
!!!677506.java!!!	setPackageName(in name : String) : void
		if (name == null) {
			throw new NullPointerException("name is null");
		} else if (name.length() == 0) {
			throw new IllegalArgumentException("name is empty string");
		}

		this.packageName = name;
!!!677634.java!!!	setPackageRsl(inout rsl : Condition) : void
		if (rsl == null) {
			throw new NullPointerException("rsl is null");
		}

		this.packageRsl = rsl;
!!!677762.java!!!	addHostRuntimesName(in name : String) : void
		ArrayList<String> currentHostRuntimesName;

		if (this.hostRuntimesName == null) {
			currentHostRuntimesName = new ArrayList<String>();
		} else {
			currentHostRuntimesName = new ArrayList<String>(
					Arrays.asList(this.hostRuntimesName));
		}
		
		currentHostRuntimesName.add(name);

		this.hostRuntimesName = (String[]) currentHostRuntimesName
				.toArray(new String[currentHostRuntimesName.size()]);
!!!677890.java!!!	setHostRuntimesAsTask(in taskId : String) : void
		addDependencyCheckPoint(new Dependency(taskId,Task.CHECKPOINT_NAME_STARTED));
		this.hostRuntimesAsTask = taskId;
!!!678018.java!!!	setHostRuntimesName(in names : String) : void
		this.hostRuntimesName = names;
!!!678146.java!!!	setHostRuntimesRsl(inout rsl : Condition) : void
		if (rsl == null) {
			throw new NullPointerException("rsl is null");
		}

		this.hostRuntimesRsl = rsl;
!!!678274.java!!!	addDependencyCheckPoint(inout dependencyCheckPoint : Dependency) : void
		ArrayList<Dependency> currentDependencyCheckPoint;

		currentDependencyCheckPoint = new ArrayList<Dependency>(Arrays
				.asList(this.dependencyCheckPoints));

		Dependency newDependencyCheckPoint = 
			new Dependency(dependencyCheckPoint.getTaskId(),
					dependencyCheckPoint.getType(),
					dependencyCheckPoint.getValue());

		currentDependencyCheckPoint.add(newDependencyCheckPoint);

		this.dependencyCheckPoints = (Dependency[]) currentDependencyCheckPoint
				.toArray(new Dependency[currentDependencyCheckPoint.size()]);
!!!678402.java!!!	setDependencyCheckPoints(inout dependencyCheckPoints : Dependency) : void
		if (dependencyCheckPoints == null) {
			/* Delete current list of DependencyCheckPoints. */
			this.dependencyCheckPoints = new Dependency[0];
		} else {
			this.dependencyCheckPoints = dependencyCheckPoints;
		}
!!!678530.java!!!	getTaskTid() : String
		return this.taskId;
!!!678658.java!!!	getTaskName() : String
		return this.taskName;
!!!678786.java!!!	getTaskDescription() : String
		return this.taskDescription;
!!!678914.java!!!	getContextId() : String
		return this.contextId;
!!!679042.java!!!	getTaskArguments() : String
		return this.taskArguments;
!!!679170.java!!!	getJavaOptions() : String
		return this.javaOptions;
!!!679298.java!!!	getTaskExclusive() : TaskExclusivity
		return this.taskExclusivity;
!!!679426.java!!!	getTaskProperties() : Properties
		return (Properties) this.taskProperties.clone();
!!!679554.java!!!	getTaskPropertyObjects() : TaskPropertyObject
		return (TaskPropertyObject[]) taskPropertyObjectList.toArray(new TaskPropertyObject[taskPropertyObjectList.size()]);
!!!679682.java!!!	getPackageName() : String
		return this.packageName;
!!!679810.java!!!	getPackageRsl() : Condition
		return this.packageRsl;
!!!679938.java!!!	getHostRuntimesAsTask() : String
		return this.hostRuntimesAsTask;
!!!680066.java!!!	getHostRuntimesName() : String
		return this.hostRuntimesName;
!!!680194.java!!!	getHostRuntimesRsl() : Condition
		return this.hostRuntimesRsl;
!!!680322.java!!!	getDependencyCheckPoints() : Dependency
		Dependency[] dependencyCheckPoints = new Dependency[this.dependencyCheckPoints.length];

		for (int i = 0; i < this.dependencyCheckPoints.length; i++) {
			dependencyCheckPoints[i] = (Dependency) this.dependencyCheckPoints[i]
					.clone();
		}

		return dependencyCheckPoints;
!!!680450.java!!!	getRestartMax() : int
		return restartMax;
!!!680578.java!!!	setRestartMax(in restartMax : int) : void
		this.restartMax = restartMax;
!!!680706.java!!!	getTimeoutRun() : long
		return timeoutRun;
!!!680834.java!!!	setTimeoutRun(in timeoutRun : long) : void
		this.timeoutRun = timeoutRun;
!!!680962.java!!!	getDetailedLoad() : boolean
		return detailedLoad;
!!!681090.java!!!	setDetailedLoad(inout detailedLoad : boolean) : void
		this.detailedLoad = detailedLoad;
!!!681218.java!!!	getDetailedLoadInterval() : long
		return this.detailedLoadInterval;
!!!681346.java!!!	setDetailedLoadInterval(in detailedLoadInterval : long) : void
		this.detailedLoadInterval = detailedLoadInterval;
!!!681474.java!!!	TaskDescriptor()

!!!681602.java!!!	TaskDescriptor(in taskId : String, in contextId : String, inout packageRsl : Condition, inout hostRuntimesRsl : Condition)
		setTaskId(taskId);
		setContextId(contextId);
		setPackageRsl(packageRsl);
		setHostRuntimesRsl(hostRuntimesRsl);
!!!681730.java!!!	TaskDescriptor(in taskId : String, in contextId : String, inout packageRsl : Condition, in hostTaskId : String)
		setTaskId(taskId);
		setContextId(contextId);
		setPackageRsl(packageRsl);
		setHostRuntimesAsTask(hostTaskId);
!!!681858.java!!!	TaskDescriptor(inout beenService : BootTask, in host : String)
		setTaskId(beenService.getName() + "-tid");
		setTaskName(beenService.getName());
		setContextId(TaskManagerInterface.SYSTEM_CONTEXT_ID);

		// must be set, otherwise package name resolution would be done with
		// SoftwareRepository
		// but when SoftwareRepository is being started, there is no one to
		// resolve package name ;)
		setPackageName(beenService.getName() + ".bpk");

		// must be set, otherwise host name resolution would be done with
		// HostManager
		// but when HostManager is being sarted, there is no one to resolve host
		// name
		setHostRuntimesName(new String[] { host });
!!!681986.java!!!	toString() : String
		return "(" + contextId + ","  + taskId + "," + taskName + ")";
!!!682114.java!!!	createBootTask(in bootTask : String, in host : String) : TaskDescriptor
		for (BootTask service : BootTask.values()) {
			if (bootTask.equals(service.getName())) {
				return new TaskDescriptor(service, host);
			}
		}

		throw new IllegalArgumentException("Not a boot task: '"	+ bootTask + "' ");

!!!682242.java!!!	createDetector(in name : String, in host : String) : TaskDescriptor
		final TaskDescriptor desc = 
			createBootTask(BootTask.DETECTOR_TASK.getName(), host);
		desc.setTaskId(name);
		return desc;
!!!682370.java!!!	createTask(in taskID : String, in taskName : String, in context : String, inout hostRSL : Condition) : TaskDescriptor
		
		AndCondition packageCondition = new AndCondition(
				new Condition[] {
						new EqualsCondition<PackageType>("type", PackageType.TASK),
						new EqualsCondition<String>("name", taskName) });

		TaskDescriptor desc = new TaskDescriptor(taskID.toString(), context,
				packageCondition, hostRSL);

		desc.setTaskName(taskName);

		return desc;
