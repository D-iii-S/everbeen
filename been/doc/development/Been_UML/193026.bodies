class RHelpManager
!!!571778.java!!!	getInstance() : RHelpManager
		if (rhMInstance == null) {
			rhMInstance = new RHelpManager();
		}
		return rhMInstance;
!!!571906.java!!!	initialize() : void
		
!!!572034.java!!!	getRFunctionsHelp() : RFunctionHelp
	    return functionsHelp;
!!!572162.java!!!	reloadRFunctionsHelp() : void

	    ArrayList<RFunctionHelp> functionsHelp = new ArrayList<RFunctionHelp>();
			
	    File[] directoryList;
        
            File path = new File(Database.getInstance().getDatabasePath() + File.separator + "rscripts");
            
            directoryList = path.listFiles();
            
            for (int i = 0; i < directoryList.length; i++) {
            	Logger.logTrace("R load help: Checking package: " 
            			+ directoryList[i].getName() + ".");
            	if (directoryList[i].isDirectory()) {
            		
            		File packagePath = directoryList[i];
            		
            		FilenameFilter fileFilter = new FilenameFilter() {
            		        public boolean accept(File dir, String filename) {
            		            return dir.isDirectory() && (filename.matches(".*\\.hlp"));
            		        }
            		    };
            		
            		File[] helpFileList = packagePath.listFiles(fileFilter);
            	
            		Logger.logDebug("R load help: " + helpFileList.length 
            				+ " R files found, loading.");
            		
            		for (int j = 0; j < helpFileList.length; j++) {
            			Logger.logTrace("R load help: Getting help: " 
            					+ helpFileList[j].getAbsolutePath() + ".");

            			try {
            			    BufferedReader inf = new BufferedReader(new FileReader(helpFileList[j]));
            			    String helpText = "";
            			    String functionHeader;
            			    String name = helpFileList[j].getName().replaceAll("\\.hlp", "");            			    
            			    String helpLine;
            			    functionHeader = inf.readLine();
            			    if (functionHeader == null) {
            				throw new IOException("Unexpected end of file with help.");
            			    }
            			    while ((helpLine = inf.readLine()) != null) {
            				helpText += helpLine + "\n";
            			    }
            			    inf.close();
            			    functionsHelp.add(new RFunctionHelp(name, functionHeader, helpText));
            			
            			} catch (FileNotFoundException e) {
            			    Logger.logError("Error reading analysis R scripts settings : " 
            				    + e.getMessage());	
            			} catch (IOException e) {
            			    Logger.logError("Error reading analysis R scripts settings : " 
            				    + e.getMessage());
            			}
            		}            		
            	}
            }

            this.functionsHelp = functionsHelp.toArray(new RFunctionHelp[] {});	    
