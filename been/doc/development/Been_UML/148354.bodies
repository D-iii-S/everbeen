class TestManager
!!!237314.java!!!	TestManager()

		
		super();
		
		task = Task.getTaskHandle();
		
		logInfo("Initializing Test Manager");
		
		try {
			loadConfiguration();
		} catch (IOException e) {
			logFatal("Unable to load boot configuration file: " + e.getMessage());
			throw new TestManagerException("Error loading configuration.", e);
		}

		File restoreDirectory = new File(task.getWorkingDirectory(), RESTORE_DIRECOTRY_NAME);
		
		if (!restoreDirectory.exists() && !restoreDirectory.mkdirs()) {
			throw new TestManagerException("Unable to create restore directory: " + restoreDirectory.getPath());
		}

		// Initialise ID manager
		try {
			idManager = PersistentIDManager.createInstance(restoreDirectory);
		} catch (Exception e) {
			logFatal("Unable to create IDManager: " + e.getMessage());
			throw new TestManagerException("Unable to create IDManager.", e);
		}
		
		String defaultPluginsDir = task.getTaskDirectory() + File.separator + "plugins";
		
		// Now initialise plug-in framework and load all plug-ins from appropriate directories
		try {
			pluginManager = new TestPluginManager(this, configuration, defaultPluginsDir, task.getWorkingDirectory(), restoreDirectory);
		} catch (ComponentInitializationException e) {
			logFatal("Unable to initialize plug-in framework for Test Manager: " + e.getMessage());
			throw new TestManagerException("Unable to initialize plug-in framework for Test Manager.", e);
		}

		// TODO
/*		this.analysisManager = AnalysisManager.createInstance(this,restoreRootDir);
		this.configManager = new PluginConfiguratorManager(this);*/
!!!237442.java!!!	loadConfiguration() : void


		String taskDir = task.getTaskDirectory();
		File bootPropsFile = new File(taskDir, BOOT_PROPERTIES_FILE);
		
		if (!bootPropsFile.exists()) {
			throw new FileNotFoundException("Unable to find boot configuration file " + BOOT_PROPERTIES_FILE);
		}

		configuration = new ExtendedProperties(System.getProperties());

		// Load configuration from boot file
		FileInputStream stream = new FileInputStream(bootPropsFile);
		configuration.load(stream);
		stream.close();
		
		// Set log level in system properties
		if (System.getProperty(LOG4J_LOG_LEVEL_PROPERTY_KEY) == null) {
			File loggerConfigFile = new File(taskDir, LOG4J_PROPERTIES_FILE);
			
			System.setProperty(LOG4J_LOG_LEVEL_PROPERTY_KEY, loggerConfigFile.toURI().toURL().toExternalForm());
		}
		
		// Now set log level for our current logger. If no level specified, we will use INFO.
		String logLevelName = configuration.getProperty(LOG4J_LOG_LEVEL_PROPERTY_KEY, "INFO");
		Level logLevel = Level.toLevel(logLevelName.trim());
		task.setLogLevel(LogLevel.getInstance(logLevel));
!!!237570.java!!!	beginPluginUpload(inout ip : InetAddress, in port : int) : UploadHandle

		// TODO Auto-generated method stub
		return null;
!!!237698.java!!!	deletePlugin(in name : String) : boolean

		// TODO Auto-generated method stub
		return false;
!!!237826.java!!!	endPluginUpload(inout handle : UploadHandle) : void

		// TODO Auto-generated method stub
		
!!!237954.java!!!	getAvailablePlugins() : BeenPluginDescriptor

		
		return pluginManager.getAvailablePlugins();
!!!238082.java!!!	getFirstConfiguratorScreen(inout sessionId : BRID, inout analysisID : AID, in name : String, in description : String, inout pluginID : PEID) : Screen

		// TODO Auto-generated method stub
		return null;
!!!238210.java!!!	getNextConfiguratorScreen(inout sessionId : BRID, inout currentScreen : Screen) : Screen

		// TODO Auto-generated method stub
		return null;
!!!238338.java!!!	getPluginsIntegrityReport() : PluginsIntegrityReport

		// TODO Auto-generated method stub
		return null;
!!!238466.java!!!	getPluginUploadStatus(inout handle : UploadHandle) : UploadStatus

		// TODO Auto-generated method stub
		return null;
!!!238594.java!!!	getPreviousConfiguratorScreen(inout sessionId : BRID, inout currentScreen : Screen) : Screen

		// TODO Auto-generated method stub
		return null;
!!!238722.java!!!	getRejectedPluginUploadErrorMessages(inout handle : UploadHandle) : String

		// TODO Auto-generated method stub
		return null;
!!!238850.java!!!	getLogLevel() : LogLevel

		
		return task.getLogLevel();
!!!238978.java!!!	logDebug(in debugMessage : String) : void

		
		task.logDebug(debugMessage);
!!!239106.java!!!	logError(in errorMessage : String) : void


		task.logError(errorMessage);
!!!239234.java!!!	logFatal(in errorMessage : String) : void

		
		task.logFatal(errorMessage);
!!!239362.java!!!	logInfo(in infoMessage : String) : void

		
		task.logInfo(infoMessage);
!!!239490.java!!!	logTrace(in errorMessage : String) : void

		
		task.logTrace(errorMessage);
!!!239618.java!!!	logWarning(in warningMessage : String) : void

		
		task.logWarning(warningMessage);
!!!239746.java!!!	getIDManager() : IDManagerInterface

		
		return idManager;
!!!239874.java!!!	getPluginLoader() : TestPluginManager

		
		return pluginManager;
!!!240002.java!!!	getTaskStatus(in taskId : String, in contextId : String) : TaskState

		
		try {
			return task.getTasksPort().getTaskById(taskId, contextId).getState();
		} catch (RemoteException e) {
			throw new TestManagerException("Unable query status of the task", e);
		} catch (IllegalArgumentException e) {
			throw new TestManagerException("Invalid task ID or context ID", e);
		}
!!!240130.java!!!	lookup(in serviceName : String) : Remote

		
		try {
			Remote result = task.getTasksPort().serviceFind(serviceName, Service.RMI_MAIN_IFACE);
			if (result == null) {
				logError("Requested service '" + serviceName + "' is not available");
				throw new TestManagerException("Service '" + serviceName + "' is not available");
			}
			return result;
		} catch (RemoteException e) {
			logError("Service lookup failed due to RMI error: " + e.getMessage());
			throw new TestManagerException("RMI error occurred during service look-up", e);
		}
