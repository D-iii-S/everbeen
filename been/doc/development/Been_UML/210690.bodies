class Routines
!!!747650.java!!!	htmlspecialchars(in s : String) : String
		if (s != null) {
			s = s.replaceAll("&", "&amp;");
			s = s.replaceAll("\"", "&quot;");
			s = s.replaceAll("'", "&#039;");
			s = s.replaceAll("<", "&lt;");
			s = s.replaceAll(">", "&gt;");
		}
		return s;
!!!747778.java!!!	ucfirst(in s : String) : String
		if (s != null && s.length() > 0) {
			return Character.toUpperCase(s.charAt(0)) + s.substring(1);
		} else {
			return s;
		}
!!!747906.java!!!	join(in glue : String, inout pieces : T) : String
		String result = "";
		for (int i = 0; i < pieces.length; i++) {
			if (i != 0) {
				result += glue;
			}
			result += pieces[i].toString();
		}
		return result;
!!!748034.java!!!	join(in glue : String, in pieces : int) : String
		String result = "";
		for (int i = 0; i < pieces.length; i++) {
			if (i != 0) {
				result += glue;
			}
			result += pieces[i];
		}
		return result;
!!!748162.java!!!	addLeadingZero(in n : int) : String
		return n < SMALLEST_TWO_CIPHER_NUMBER ? "0" + n : Integer.toString(n);
!!!748290.java!!!	addLeadingZero(in n : long) : String
		return n < SMALLEST_TWO_CIPHER_NUMBER ? "0" + n : Long.toString(n);
!!!748418.java!!!	addLeadingZeroes(in n : int, in length : int) : String
		String result = Integer.toString(n);
		while (result.length() < length) {
			result = "0" + result;
		}
		return result;
!!!748546.java!!!	browserIsMSIE(inout request : HttpServletRequest) : boolean
		return request.getHeader("User-Agent").indexOf("MSIE") >= 0;
!!!748674.java!!!	javaScriptEscape(in s : String) : String
		if (s != null) {
			for (char ch = 0; ch < ' '; ch++) {
				s = s.replaceAll(Character.toString(ch), "\\\\x"
					+ Character.forDigit(ch / HEX_BASE, HEX_BASE)
					+ Character.forDigit(ch % HEX_BASE, HEX_BASE));
			}
			s = s.replaceAll("'", "\\\\'");
			s = s.replaceAll("\"", "\\\\\"");
		}
		return s;
!!!748802.java!!!	isInteger(in s : String) : boolean
		try {
			Integer.parseInt(s);
			return true;
		} catch (NumberFormatException e) {
			return false;
		}
!!!748930.java!!!	isLong(in s : String) : boolean
		try {
			Long.parseLong(s);
			return true;
		} catch (NumberFormatException e) {
			return false;
		}
!!!749058.java!!!	split2(in regex : String, in s : String) : String
		return !s.equals("") ? s.split(regex) : new String[] {};
!!!749186.java!!!	formatNumberWithPrefixedUnit(in number : long, in unit : String, inout locale : Locale) : String
		if (unit == null) {
			throw new NullPointerException("Parameter \"unit\" cannot be null.");
		}
		if (locale == null) {
			throw new NullPointerException("Parameter \"locale\" cannot be null.");
		}
		
		NumberFormat numberFormat = NumberFormat.getInstance(Locale.ENGLISH);
		numberFormat.setMaximumFractionDigits(1);
		
		for (int i = UNIT_PREFIX_CHARS.length() - 1; i >= 0; i--) {
			long unitSize = (1L << (i + 1) * DEC_BASE);
			if (number >= unitSize) {
				return numberFormat.format((double) number / (double) unitSize)
					+ " "
					+ Character.toString(UNIT_PREFIX_CHARS.charAt(i))
					+ unit; 
			}
		}
		
		/* If no suitable unit was found, or the number is zero, return the number
		 * in the basic unit.
		 */
		return numberFormat.format(number)
			+ (unit.equals("") ? "" : " ")
			+ unit;
!!!749314.java!!!	formatNumberWithPrefixedUnit(in number : long, in unit : String) : String
		return formatNumberWithPrefixedUnit(number, unit, Locale.ENGLISH);
!!!749442.java!!!	formatMillisAsHMS(in millis : long) : String
		long seconds = millis / MILISECONDS_IN_SECOND;
		
		String result = ":" + Routines.addLeadingZero(seconds % SECONDS_IN_MINUTE);
		long minutes = seconds / SECONDS_IN_MINUTE;
		if (minutes < MINUTES_IN_HOUR) {
			return Long.toString(minutes) + result;
		} else {
			return Long.toString(minutes / MINUTES_IN_HOUR) + ":"
				+ Routines.addLeadingZero(minutes % MINUTES_IN_HOUR) + result;
		}
!!!749570.java!!!	nl2br(in s : String) : String
		if (s != null) {
			String result = "";
			boolean afterCR = false;
			for (int i = 0; i < s.length(); i++) {
				switch (s.charAt(i)) {
					case '\r':
						afterCR = true;
						break;
					case '\n':
						if (afterCR) {
							result += "<br />\r\n";
							afterCR = false;
						} else {
							result += "<br />\n";
						}
						break;
					default:
						if (afterCR) {
							result += "<br />\r" + s.charAt(i);
							afterCR = false;
						} else {
							result += s.charAt(i);
						}
				}
			}
			if (afterCR) {
				result += "<br />\r";
			}
			return result;
		} else {
			return null;
		}
!!!749698.java!!!	trim(in s : String) : String
		if (s == null) {
			throw new NullPointerException("Parameter \"s\" cannot be null.");
		}
		if (s.equals("")) {
			return "";
		}
		
		int begin = 0;
		int end = s.length() - 1;
		
		char ch;
		
		ch = s.charAt(begin);
		while (Character.isWhitespace(ch)) {
			begin++;
			if (begin > s.length() - 1) {
				break;
			}
			ch = s.charAt(begin);
		}
		
		ch = s.charAt(end);
		while (Character.isWhitespace(ch)) {
			end--;
			if (end < 0) {
				break;
			}
			ch = s.charAt(end);
		}
		
		if (begin <= end) {
			return s.substring(begin, end + 1);
		} else {
			return "";
		}
!!!749826.java!!!	bounded(inout value : T, inout min : T, inout max : T) : T
		if (value == null || min == null || max == null) {
			throw new NullPointerException("All parameters must be non-null.");
		}
		if (min.compareTo(max) > 0) {
			throw new IllegalArgumentException("Minimum can not be greater than maximum.");
		}
		
		return value.compareTo(min) < 0
			? min
			: (value.compareTo(max) > 0 ? max : value);
!!!749954.java!!!	stringOrNone(in s : String) : String
		if (s == null) {
			throw new NullPointerException("Parameter \"s\" cannot be null.");
		}
		
		return !s.equals("") ? s : "(none)";
!!!750082.java!!!	getCookieByName(inout request : HttpServletRequest, in name : String) : String
		Cookie[] cookies = request.getCookies();
		if (cookies == null) {
			return null;
		}
		
		for (Cookie cookie: cookies) {
			if (cookie.getName().equals(name)) {
				return cookie.getValue();
			}
		}
		
		return null;
