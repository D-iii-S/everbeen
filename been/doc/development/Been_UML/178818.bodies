class LoadMonitorImplementation
!!!428162.java!!!	LoadMonitorImplementation(in libraryDir : String, in workingDir : String)
		
		super();

		defaultDetailedInterval = HostManagerOptionsInterface.Option.DEFAULT_DETAILED_MODE_INTERVAL.getDefaultValue();
		currentDetailedInterval = defaultDetailedInterval;
		briefInterval = HostManagerOptionsInterface.Option.BRIEF_MODE_INTERVAL.getDefaultValue();
		briefModeMark = briefInterval / defaultDetailedInterval;
		
		eventQueue = new EventQueue();
		
		try {
			hostName = MiscUtils.getCanonicalHostName("localhost");
		} catch (UnknownHostException e) {
			throw new LoadMonitorException("Unable to resolve localhost.", e);
		}

		logInfo("Creating Load Monitor. Computer name is \"" + hostName + "\".");
		
		workingDirectory = workingDir;
		libraryDirectory = libraryDir;
		
		logInfo("Load Monitor working directory: " + workingDirectory);
		
		File wdf = new File(workingDirectory);
		
		if (!wdf.exists()) {
			logInfo("Working directory dies not exist. Creating...");
			if (!wdf.mkdirs()) {
				logError("Unable to create working directory.");
				throw new LoadMonitorException("Unable to create working directory \""
						+ workingDirectory + "\".");
			}
		} else {
			if (!wdf.isDirectory()) {
				logError("Working directory path does not point to the directory.");
				throw new LoadMonitorException("Working directory path does not point to the directory.");
			}
		}
		
		loadEntries = new ConcurrentHashMap< Pair< String, String >, LoadDatabaseEntry >();
		
		try {
			loadDatabaseIndex();
		} catch (HostManagerException e) {
			throw new LoadMonitorException("Error loading index file.", e);
		}
		
		logInfo("Binding Load Monitor's RMI interface.");
		// Bind us to the RMI
		try {
			Naming.rebind(LoadMonitorInterface.RMI_NAME, this);
		} catch (Exception e) {
			logError("Unable to register RMI interface.");
			
			throw new LoadMonitorException("Unable to register RMI interface.", e);
		}

		try {
			monitor = new LoadMonitorNative(!libraryDirectory.endsWith(File.separator)
					? libraryDirectory + File.separator : libraryDirectory);
			
			nativeLibrary = true;
			
		} catch (Exception e) {
			logError("Unable to initialize native library. Message: " + e.getMessage());
			nativeLibrary = false;
		}

		if (nativeLibrary) {
			nativeLibrary = monitor.initialize();
		}
		
		eventDispatcher = new EventDispatcher(eventQueue);
		
		logInfo("Load Monitor created successfully.");
!!!428290.java!!!	getBriefInterval() : long
		
		return briefInterval;
!!!428418.java!!!	getDefaultDetailedInterval() : long
		
		return defaultDetailedInterval;
!!!428546.java!!!	getMode() : LoadMonitorMode
		
		return mode;
!!!428674.java!!!	setBriefInterval(in interval : long) : void

		if (interval <= 0) {
			throw new InvalidArgumentException("Invalid brief mode interval.");
		}
		
		logInfo("New brief mode interval: " + interval);
		
		briefInterval = interval;
		briefModeMark = briefInterval / currentDetailedInterval;
		
		if (mode == LoadMonitorMode.MODE_BRIEF) {
			try {
				stopBriefMode();
				startBriefMode();
			} catch (IllegalOperationException e) {
				assert false : "Weeell, this is strange. This should never happen."; 
			}
		}
!!!428802.java!!!	setDefaultDetailedInterval(in interval : long) : void

		if (interval <= 0) {
			throw new InvalidArgumentException("Invalid detailed mode interval.");
		}
		
		logInfo("New default detailed mode interval: " + interval);
		
		defaultDetailedInterval = interval;
!!!428930.java!!!	startBriefMode() : void

		if (mode != LoadMonitorMode.MODE_NONE) {
			throw new IllegalOperationException("Monitor is already in brief or detailed mode.");
		}
		
		timer = new Timer(true);
		try {
			timer.scheduleAtFixedRate(new MonitorThread(), 0, briefInterval);
		} catch (IllegalStateException e) {
			mode = LoadMonitorMode.MODE_NONE;
			throw new LoadMonitorException("Unable to schedule brief mode thread.", e);
		}
		
		mode = LoadMonitorMode.MODE_BRIEF;
		
		processEvent(new LoadMonitorEvent(LoadMonitorEvent.EventType.MONITOR_START, hostName));
!!!429058.java!!!	stopBriefMode() : void

		if (mode != LoadMonitorMode.MODE_BRIEF) {
			throw new IllegalOperationException("Monitor is not in brief mode.");
		}
		
		if (timer != null) {
			timer.cancel();
		}
		
		timer = null;
		
		mode = LoadMonitorMode.MODE_NONE;
		
		processEvent(new LoadMonitorEvent(LoadMonitorEvent.EventType.MONITOR_STOP, hostName));
!!!429186.java!!!	initialize(in lsHostName : String, inout loadServer : LoadServerInterface, in defaultDetailedModeInterval : long, in briefModeInterval : long) : void

		logInfo("Initializing Load Monitor.");
	
		this.loadServerHostname = lsHostName;
		this.loadServer = loadServer;
		
		logInfo("Registered with Load Server on \"" + loadServerHostname + "\".");
				
		eventDispatcher = new EventDispatcher(eventQueue, this.loadServer);

		mode = LoadMonitorMode.MODE_NONE;
		
		logInfo("Load Monitor initialized successfully.");
		
		processEvent(new LoadMonitorEvent(LoadMonitorEvent.EventType.MONITOR_START_UP, hostName));
		
		if (nativeLibrary) {
			HardwareDescription description = monitor.getHardwareDescription();
			processEvent(new LoadMonitorEvent(description, hostName));
		} else {
			processEvent(new LoadMonitorEvent(new HardwareDescription(), hostName));
		}

		init = true;
		
		this.defaultDetailedInterval = defaultDetailedModeInterval;
		this.currentDetailedInterval = this.defaultDetailedInterval;
		this.briefInterval = briefModeInterval;
		
		// Now start taking samples in brief mode
		try {
			startBriefMode();
		} catch (IllegalOperationException e) {
			throw new LoadMonitorException("Unable to start brief mode.");
		}
!!!429314.java!!!	terminate() : void
		
		logInfo("Terminating Load Monitor.");

		if (!init) {
			return;
		}
		
		if (mode == LoadMonitorMode.MODE_BRIEF) {
			try {
				stopBriefMode();
			} catch (IllegalOperationException e) {
				// whis should never happen
				assert false : "Unable to stop brief mode - illegal op.";
			}
		} else if (mode == LoadMonitorMode.MODE_DETAILED) {
			// set this, so brief mode is not enabled again
			reenableBriefMode = false;
			
			try {
				stopDetailedMode();
			} catch (IllegalOperationException e) {
				// this should never happen
				assert false : "Unable to stop detailed mode - illegal op.";
			} catch (LoadMonitorException e) {
				// same goes for this
				assert false : "Unable to stop detailed mode - LME.";
			}
		}
		
		processEvent(new LoadMonitorEvent(LoadMonitorEvent.EventType.MONITOR_SHUT_DOWN, hostName));

		if (nativeLibrary) {
			monitor.terminate();
		}
		
		eventDispatcher.stop();
		
		init = false;
!!!429442.java!!!	clearDetailedModeData() : void

		if (mode == LoadMonitorMode.MODE_DETAILED) {
			throw new IllegalOperationException("Load monitor is currently in detailed mode.");
		}
	
		synchronized (loadEntries) {
			if (!loadEntries.isEmpty()) {
				for (LoadDatabaseEntry entry: loadEntries.values()) {
					String fileName = getFullFileName(entry.getFileName());
					
					File file = new File(fileName);
					
					try {
						if (!file.delete()) {
							// Failed for some reason, delete when VM exits.
							file.deleteOnExit();
						}
					} catch (SecurityException e) {
						logError("Unable to delete data file \"" + fileName
								+ "\". Message: " + e.getMessage());
						// Do nothing, the file will just sit there...
					}
				}
				
				loadEntries.clear();
				
				try {
					saveDatabaseIndex();
				} catch (OutputWriteException e) {
					logError("Unable to save index after removing all db entries."
							+ " Message: " + e.getMessage());
				}
			}
		}
!!!429570.java!!!	clearDetailedModeData(in contextId : String, in taskId : String) : void

		if (mode == LoadMonitorMode.MODE_DETAILED) {
			throw new IllegalOperationException("Load monitor is currently in detailed mode.");
		}
		
		MiscUtils.verifyStringParameterBoth(contextId, "contextId");
		MiscUtils.verifyStringParameterBoth(taskId, "taskId");

		synchronized (loadEntries) {
		
			Pair< String, String > key = new Pair< String, String >(contextId, taskId);
			LoadDatabaseEntry entry = loadEntries.get(key);
			
			if (entry == null) {
				throw new ValueNotFoundException("Unable to find database entry for " + key);
			}
			
			String fileName = getFullFileName(entry.getFileName());
			
			File file = new File(fileName);
			
			try {
				if (!file.delete()) {
					// Failed for some reason, delete when VM exits.
					file.deleteOnExit();
				}
			} catch (SecurityException e) {
				logError("Unable to delete data file \"" + fileName + "\". Message: " + e.getMessage());
				// Do nothing, the file will just sit there...
			}
			
			loadEntries.remove(key);
			
			try {
				saveDatabaseIndex();
			} catch (OutputWriteException e) {
				logError("Unable to save index after removing entry for " + key + ". Message: " + e.getMessage());
			}
		}
!!!429698.java!!!	clearDetailedModeData(in contextId : String) : void
		
		if (mode == LoadMonitorMode.MODE_DETAILED) {
			throw new IllegalOperationException("Load monitor is currently in detailed mode.");
		}
		
		MiscUtils.verifyStringParameterBoth(contextId, "contextId");
		
		boolean r = false;
		
		synchronized (loadEntries) {
			
			for (Iterator< Pair< String, String > > it = loadEntries.keySet().iterator(); it.hasNext(); ) {
				Pair< String, String > current = it.next();
				
				if (current.getFirst().equals(contextId)) {
					clearDetailedModeData(current.getFirst(), current.getSecond());
					r = true;
				}
			}
		}
		
		if (!r) {
			throw new ValueNotFoundException("No data for context \"" + contextId + "\" found.");
		}
!!!429826.java!!!	startDetailedMode(in contextId : String, in taskId : String) : void

		startDetailedMode(contextId, taskId, defaultDetailedInterval);
!!!429954.java!!!	startDetailedMode(in contextId : String, in taskId : String, in interval : long) : void

		MiscUtils.verifyStringParameterBoth(contextId, "contextId");
		MiscUtils.verifyStringParameterBoth(taskId, "taskId");
		
		if (interval < 1) {
			throw new InvalidArgumentException("Detailed mode interval has to be greater than"
					+ " or equal to 1 ms."); 
		}
		
		logInfo("Starting detailed mode on request by [" + contextId + ":" + taskId + "]."
				+ " Interval is: " + interval);
		
		reenableBriefMode = false;
		
		if (mode == LoadMonitorMode.MODE_BRIEF) {
			stopBriefMode();
			reenableBriefMode = true;
		} else if (mode == LoadMonitorMode.MODE_DETAILED) {
			throw new IllegalOperationException("Monitor is already in detailed mode.");
		}
		
		// Generate new file name and entry for the database
		String fileName = null;
		
		// If such entry already exists, remove old file
		if (loadEntries.containsKey(new Pair< String, String >(contextId, taskId))) {
			fileName = loadEntries.get(new Pair< String, String >(contextId, taskId)).getFileName();
			
			// :(
			boolean del = false;
			
			try {
				File file = new File(getFullFileName(fileName));
				
				del = file.delete();
			} catch (Exception e) {
				del = false;
			}
			
			if (!del) {
				// Unable to delete old file -> generate new name
				fileName = generateFileName(contextId, taskId);
			}
		} else {
			fileName = generateFileName(contextId, taskId);
		}
		
		LoadDatabaseEntry loadDbEntry = new LoadDatabaseEntry(contextId, taskId, fileName);
		
		//Now create new data file
		LoadFileWritable loadFile = getLoadFile(loadDbEntry);
		
		try {
			detailedModeWriter = LoadFileWritable.createSampleWriter(loadFile);
		} catch (Exception e) {
			logError("Unable to create new data writer: " + e.getMessage());
			throw new LoadMonitorException("Unable to create new data writer.", e);
		}
		
		currentDetailedInterval = interval;
		briefModeMark = briefInterval / currentDetailedInterval;
		
		// Start measuring
		timer = new Timer(true);
		try {
			timer.scheduleAtFixedRate(new MonitorThread(), 0, currentDetailedInterval);
		} catch (Exception e) {
			mode = LoadMonitorMode.MODE_NONE;
			throw new LoadMonitorException("Unable to schedule detailed mode thread.");
		}
		
		mode = LoadMonitorMode.MODE_DETAILED;
		
		processEvent(new LoadMonitorEvent(LoadMonitorEvent.EventType.MONITOR_START_DETAILED, hostName));
		
		// And store entry in the database and save it (in case we crash)
		loadEntries.put(new Pair< String, String >(contextId, taskId), loadDbEntry);
		try {
			saveDatabaseIndex();
		} catch (OutputWriteException e) {
			logError("Unable to save index when switching to detailed mode: " + e.getMessage());
			stopDetailedMode();
			throw new LoadMonitorException("Unable to save new database index.");
		}
!!!430082.java!!!	stopDetailedMode() : void

		if (mode != LoadMonitorMode.MODE_DETAILED) {
			throw new IllegalOperationException("Monitor is not in detailed mode.");
		}
		
		logInfo("Stopping detailed mode.");
		
		timer.cancel();

		processEvent(new LoadMonitorEvent(LoadMonitorEvent.EventType.MONITOR_STOP_DETAILED, hostName));
		
		mode = LoadMonitorMode.MODE_NONE;
		
		try {
			detailedModeWriter.close();
		} catch (IOException e) {
			logError("Unable to close detailed mode data writer: " + e.getMessage());
		}

		detailedModeWriter = null;
		
		if (reenableBriefMode) {
			startBriefMode();
		}
!!!430210.java!!!	getDetailedModeLoadData(in contextId : String, in taskId : String) : LoadFile

		MiscUtils.verifyStringParameterBoth(contextId, "contextId");
		MiscUtils.verifyStringParameterBoth(taskId, "taskId");

		LoadDatabaseEntry entry = loadEntries.get(new Pair< String, String >(contextId, taskId));
		
		if (entry == null) {
			throw new ValueNotFoundException("No load data found for ["
					+ contextId + ":" + taskId + "].");
		}
		
		LoadFile loadFile = getLoadFile(entry);
		
		return loadFile;
!!!430338.java!!!	hasDetailedModeData(in contextId : String, in taskId : String) : boolean
		
		MiscUtils.verifyStringParameterBoth(contextId, "contextId");
		MiscUtils.verifyStringParameterBoth(taskId, "taskId");

		LoadDatabaseEntry entry = loadEntries.get(new Pair< String, String >(contextId, taskId));

		return (entry != null);
!!!430466.java!!!	hasNativeSupport() : boolean
		
		return nativeLibrary;
!!!430594.java!!!	ping() : long
		
		return TimeUtils.now();
!!!430722.java!!!	getHardwareDescription() : HardwareDescription
		
		return monitor.getHardwareDescription();
!!!430850.java!!!	logError(in message : String) : void

		if ("true".equalsIgnoreCase(System.getenv("BEEN_HOSTRUNTIME_DEBUG"))) {
			System.out.println(TimeUtils.nowFormated() + " ERROR " + message);
		}
!!!430978.java!!!	logInfo(in message : String) : void
		
		if ("true".equalsIgnoreCase(System.getenv("BEEN_HOSTRUNTIME_DEBUG"))) {
			System.out.println(TimeUtils.nowFormated() + " INFO " + message);
		}
!!!431106.java!!!	processEvent(inout event : LoadMonitorEvent) : void
		
		if (mode == LoadMonitorMode.MODE_DETAILED) {
			
			if (event.getSample() != null) {
				
				eventCount += 1;
				
				try {
					detailedModeWriter.append(event.getSample());
				} catch (Exception e) {
					// Error writing data.
					logError("Error writing sample data: " + e.getMessage());
				}
			}
			
			if ((eventCount >= briefModeMark)
				|| (event.getType() != LoadMonitorEvent.EventType.MONITOR_SAMPLE)) {
				
				if (eventDispatcher.isRunning()) {
					eventQueue.add(event);
				}
			}
			
			if (eventCount >= briefModeMark) {
				eventCount = 0;
			}
		} else {
			eventCount = 0;
			if (eventDispatcher.isRunning()) {
				eventQueue.add(event);
			}
		}
!!!431234.java!!!	loadDatabaseIndex() : void
		
		logInfo("Loading index file.");
		
		File indexFile = new File(getFullFileName(LOAD_DATABASE_INDEX_FILE));
		
		if (indexFile.isDirectory()) {
			logError("Unable to open index file. It is directory.");
			throw new LoadMonitorException("Unable to open index file. It is directory.");
		}
		
		if (!indexFile.isFile()) {
			logInfo("Load database index not found. New one will be created when needed.");
			return;
		}
		
		DocumentBuilder builder = null;
		
		try {
			builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();
		} catch (ParserConfigurationException e) {
			logError("Unable to create document builder: " + e.getMessage());
			throw new InputParseException("Unable to create document builder.", e);
		}
		
		Document document = null;
		
		try {
			document = builder.parse(indexFile);
		} catch (Exception e) {
			logError("Unable to parse index file: " + e.getMessage());
			throw new InputParseException("Unable to parse index file.", e);
		}
		
		Node indexNode = XMLHelper.getSubNodeByName(INDEX_FILE_NODE_NAME, document);
		
		ArrayList< Node > entryNodes = 
			XMLHelper.getChildNodesByName(LoadDatabaseEntry.XML_NODE_NAME, indexNode);
		
		for (Node node: entryNodes) {
			LoadDatabaseEntry entry = new LoadDatabaseEntry(node);
			
			loadEntries.put(new Pair< String, String >(entry.getContextId(), entry.getTaskId()), 
					entry);
		}
		
		logInfo("Index file loaded successfully. " + loadEntries.size() + " entr"
				+ (loadEntries.size() == 1 ? "y" : "ies") + " parsed successfully.");
!!!431362.java!!!	saveDatabaseIndex() : void
		
		DocumentBuilder builder = null;
		
		try {
			builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();
		} catch (ParserConfigurationException e) {
			throw new OutputWriteException("Unable to create document builder.", e);
		}
		
		Document document = builder.newDocument();
		
		Element indexNode = document.createElement(INDEX_FILE_NODE_NAME);
		
		document.appendChild(indexNode);
		
		for (LoadDatabaseEntry entry: loadEntries.values()) {
			indexNode.appendChild(entry.exportAsElement(document));
		}
		
		try {
			XMLHelper.saveDocument(document, getFullFileName(LOAD_DATABASE_INDEX_FILE));
		} catch (Exception e) {
			throw new OutputWriteException("Unable to save load monitor index.", e);
		}
!!!431490.java!!!	getLoadFile(inout entry : LoadDatabaseEntry) : LoadFileWritable
		
		return new LoadFileWritable(entry.contextId, entry.taskId, getFullFileName(entry.fileName));
!!!431618.java!!!	generateFileName(in contextId : String, in taskId : String) : String
		
		String nameNoExt = makeFSFriendly(contextId) + "-" + makeFSFriendly(taskId);
		String pathNoExt = MiscUtils.concatenatePath(workingDirectory, nameNoExt);
		
		String index = "";
		int i = 0;
		
		for ( ; i < 1000; ++i) {
			File file = new File(pathNoExt + index + SAMPLE_FILE_EXTENSION);
			
			if (!file.isFile()) {
				break;
			}
			
			index = String.valueOf(i);
		}
		
		if (i == 1000) {
			// too many files, first one is the oldest, so overwrite it
			// This is pretty horrible way of solving this, but whoever has 1000 files in
			// one directory (and those files are all generated by LM) is probably asking for
			// trouble anyway :)
			index = "";
			File file = new File(pathNoExt + index + SAMPLE_FILE_EXTENSION);
			
			try {
				file.delete();
			} catch (Exception e) {
				// OK, we were unable to delete file, but we will use it anyway...
			}
		}
		
		return nameNoExt + index + SAMPLE_FILE_EXTENSION;
!!!431746.java!!!	makeFSFriendly(in s : String) : String

		return s.replaceAll("[^a-zA-Z0-9]", "_");
!!!431874.java!!!	getFullFileName(in name : String) : String
		
		return MiscUtils.concatenatePath(workingDirectory, name);
