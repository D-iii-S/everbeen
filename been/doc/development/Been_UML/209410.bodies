class LogUtils
!!!734210.java!!!	aggregateLogs(inout logRecordsList : List<LogRecord[]>) : LogRecord
		/* The algorithm for generating the aggregate logs is simple: put all logs
		 * in one array and sort that array by timestamp. If performance will be
		 * a problem, merge-based approach could be used instead in the future.
		 */ 
		
		/* Get the size of result array. */
		int resultSize = 0;
		for (LogRecord[] logRecords: logRecordsList) {
			resultSize += logRecords.length;
		}
		
		/* Put the records in one array. */
		LogRecord[] result = new LogRecord[resultSize];
		int index = 0;
		for (LogRecord[] logRecords: logRecordsList) {
			for (LogRecord logRecord: logRecords) {
				result[index++] = logRecord;
			}
		}
		
		/* Sort the resulting array by timestamp. */
		Arrays.sort(result, new Comparator<LogRecord>() {
			public int compare(LogRecord a, LogRecord b) {
				return a.getTimestamp().compareTo(b.getTimestamp());
			}
		});
		
		return result;
!!!734338.java!!!	getLogRecordsForTasks(inout taskManager : TaskManagerInterface, inout tasks : TaskEntry) : LogRecord
		List<LogRecord[]> logRecordsList = new LinkedList<LogRecord[]>();
		for (TaskEntry task: tasks) {
			logRecordsList.add(taskManager.getLogsForTask(
					task.getContextId(),
					task.getTaskId()
			));
		}
		
		return aggregateLogs(logRecordsList);
