class CheckAndConvertXamplerTask
!!!651138.java!!!	CheckAndConvertXamplerTask()
		super();
!!!651266.java!!!	checkAndConvertOneRun(inout bid : BID, inout rid : RID, in sourceName : String, in destinatioName : String, in resultsRole : String, in suiteName : String, in samples : long) : boolean
		
		int counter;
//		int value;
		File file = new File(sourceName);
		String line;
		String[] lineTokens;
		String[] suiteColumns = null;
	
		for (XamplerSuite candidate : XamplerSuite.values()) {
			if (candidate.getName().equalsIgnoreCase(suiteName)) {
				
				break;
			}
		}
		
		for (XamplerSuite candidate : XamplerSuite.values()) {
			try {
				if (candidate.getName().equals(suiteName.substring(0, candidate.getName().length()))) {				
					suiteColumns = candidate.getColumnNames();
				}
			} catch (StringIndexOutOfBoundsException e) {
				//note: empty catch -> if that string is larger, nothing matters, they just don't fit
			}
		}
		
		if (suiteColumns == null) {
			
			logError("Suite not identified!");
			notifyTableCreation(0, 1, bid, rid, false);
			return false;
			
		}
		
		BufferedReader inputReader = new BufferedReader(new FileReader(file + File.separator 
				+ RESULTS_FILENAME));
		PrintWriter outputWriter;
		PrintWriter resultsWriter;
				
		resultsWriter = new PrintWriter(new BufferedWriter(new FileWriter(destinatioName + "-0")));
		
		int columnCount = suiteColumns.length;
		
		if (file.exists()) {
			try {										
				counter = 0;			
				while ((line = inputReader.readLine()) != null) {
					counter++;
					lineTokens = line.split(ASCII_TAB);					
						try {

							if (lineTokens.length < columnCount) {
								if (counter == 1) {
									columnCount = lineTokens.length;
								} else {
									logError("results converting error - invalid column count for given suite");
									notifyTableCreation(0, 1, bid, rid, false);
									return false;
								}
							}
							
							for (int i = 0; i < columnCount; i++) {				
								try {
									resultsWriter.print(Long.valueOf(lineTokens[i]));
								} catch (NumberFormatException e) {							
									resultsWriter.print(INVALID_VALUE);
								}
								
								if (i < columnCount) { 
									resultsWriter.print("\t");
								}
							}
							
							resultsWriter.println("");
						
						} catch (NullPointerException e) {
							logError("results checking: null pointer exception when trying to read sample" + counter);
							notifyTableCreation(0, 1, bid, rid, false);
							return false; // Run is corrupted
						} catch (ArrayIndexOutOfBoundsException e) {							
							logInfo("invalid item format - sample " + counter);
							notifyTableCreation(0, 1, bid, rid, false);
							return false; // Run is corrupted
						}
				}
				
			} catch (IOException e) {
				e.printStackTrace();
				logError("io error converting " + sourceName);
				notifyTableCreation(0, 1, bid, rid, false);
				return false; // Run is corrupted
			} finally {
				inputReader.close();
				resultsWriter.close();
			}
			
			outputWriter = new PrintWriter(new BufferedWriter(new FileWriter(destinatioName + "-0.meta")));
			outputWriter.println(suiteName);
			
			for (int i = 0; i < columnCount; i++) {
				outputWriter.println(suiteColumns[i]);
			}
			
			outputWriter.close();
			
			logInfo(counter + " samples from " + samples + " were read when converting.");
			
			if (counter != samples) {
				notifyTableCreation(0, 1, bid, rid, false);
				return false;
			}
			
			notifyTableCreation(0, 1, bid, rid, true);
			return true;
			
		} else { // file doesn't exist
			notifyTableCreation(0, 1, bid, rid, false);
			return false;
		}		
!!!651394.java!!!	getCrashList(in srcName : String) : List<String>
		return Arrays.asList(new String[] { srcName + File.separator + "client.out", 
				srcName + File.separator + "client.err"});		
