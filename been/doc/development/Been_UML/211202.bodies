class WebInterfaceServlet
!!!751746.java!!!	init() : void
		super.init();
		page.clearModules(); /* List needs to be cleared so reinitialisation is possible. */
		page.addModule(PackagesModule.getInstance());
		page.addModule(HostsModule.getInstance());
		page.addModule(TasksModule.getInstance());
		page.addModule(BenchmarksModule.getInstance());
		page.addModule(ResultsModule.getInstance());
		page.addModule(ConfigurationModule.getInstance());
		page.addModule(ServicesModule.getInstance());
!!!751874.java!!!	destroy() : void
		super.destroy();
		page.clearModules(); // Allow GC of the modules.
!!!752002.java!!!	disableCaching(inout response : HttpServletResponse) : void
		/* Date in the past. */ 
		response.addHeader("Expires", "Mon, 26 Jul 1997 05:00:00 GMT"); 

		/* Always modified. */ 
		response.addDateHeader("Last-Modified", (new Date()).getTime()); 

		/* HTTP/1.1 */ 
		response.addHeader("Cache-Control", "no-store, no-cache, must-revalidate"); 
		response.addHeader("Cache-Control", "post-check=0, pre-check=0"); 

		/* HTTP/1.0 */ 
		response.addHeader("Pragma", "no-cache");
!!!752130.java!!!	writeWelcomePage(inout request : HttpServletRequest, inout response : HttpServletResponse) : void
		page.setRequest(request);
		page.setResponse(response);
		page.setContext(getServletContext());
		page.setRootPath("./");
		page.setShowTitle(true);
		page.setLayoutType(LayoutType.NORMAL);
		page.setActiveModule("");
		page.setActiveAction("");
		
		page.setTitle("");
		page.writeHeader();
		page.writeTemplate("welcome");
		page.writeFooter();
!!!752258.java!!!	writeRedirectToAction(inout request : HttpServletRequest, inout response : HttpServletResponse, in moduleID : String, in action : String, in rootPath : String) : void
		page.setRequest(request);
		page.setResponse(response);
		page.setContext(getServletContext());
		page.setRootPath(rootPath);
		page.setActiveModule(moduleID);
		page.setActiveAction("");
		page.redirectToAction(action);
!!!752386.java!!!	writeUserFriendlyExceptionMessage(inout cause : Throwable) : void
		page.getErrorMessages().addHTMLMessage(cause.getMessage());
		page.writeHeader();
		page.writeErrorMessages();
		page.writeFooter();
!!!752514.java!!!	writeModuleActionPage(inout request : HttpServletRequest, inout response : HttpServletResponse, inout module : Module, in action : String) : void
		/* Set up the Page object. */
		page.setRequest(request);
		page.setResponse(response);
		page.setContext(getServletContext());
		page.setRootPath("../../");
		page.setShowTitle(true);
		page.setLayoutType(LayoutType.NORMAL);
		page.setActiveModule(module.getId());
		page.setActiveAction(action);
		
		/* Delegate the action to the module. */
		try {
			module.invokeMethodForAction(request, response, action);
		} catch (InvocationTargetException e) {
			Throwable cause = e.getCause();
			if (cause instanceof MissingParamException
					|| cause instanceof InvalidParamValueException
					|| cause instanceof InvalidRequestMethodException
					|| cause instanceof IllegalWizardScreenSequenceException
					|| cause instanceof ComponentInitializationException
					|| cause instanceof ConnectException
					|| cause instanceof RemoteException
			) {
				writeUserFriendlyExceptionMessage(cause);
			} else {
				throw new ServletException("Method invocation failed.", e.getCause());
			}
		}
!!!752642.java!!!	processRequest(inout request : HttpServletRequest, inout response : HttpServletResponse) : void
		/* Make sure the request is parsed in UTF-8 (this encoding is used in the
		 * whole application). This statement helps only in POST requests - to parse
		 * the GET requests correctly, user needs to set attribute
		 * 
		 *   URIEncoding="UTF-8"
		 *   
		 * in the connector definition (<Connector> element in
		 * $TOMCAT_HOME/conf/server.xml file).
		 */ 
		request.setCharacterEncoding("UTF-8");

		disableCaching(response);
		page.setFocusedElement(null);
		page.getInfoMessages().clear();
		page.getWarningMessages().clear();
		page.getErrorMessages().clear();

		String[] parts = request.getRequestURI().split("/");
		switch (parts.length) {
			case 2:
				writeWelcomePage(request, response);
				break;
			case 3:
			case 4:
				String moduleID = parts[2];
				Module module = page.getModuleById(moduleID);
				if (module == null) {
					response.sendError(HttpServletResponse.SC_NOT_FOUND,
							"Invalid URL: Module \"" + moduleID + "\" not found.");
					return;
				}
				if (parts.length == 4) {
					String action = parts[3];
					if (request.getRequestURI().endsWith("/")) {
						writeModuleActionPage(request, response, module, action);
					} else {
						writeRedirectToAction(request, response, moduleID, action, "../");
					}
				} else {
					String rootPath = request.getRequestURI().endsWith("/") ? "../" : "./";
					writeRedirectToAction(request, response, moduleID,
						module.getDefaultAction(), rootPath);
				}
				break;
			default:		
				response.sendError(HttpServletResponse.SC_NOT_FOUND,
						"Invalid URL: Part count doesn't match.");
				return;
		}
!!!752770.java!!!	doGet(inout request : HttpServletRequest, inout response : HttpServletResponse) : void
		/* We process GET and POST request same way... */
		processRequest(request, response);
!!!752898.java!!!	doPost(inout request : HttpServletRequest, inout response : HttpServletResponse) : void
		/* We process GET and POST request same way... */
		processRequest(request, response);
