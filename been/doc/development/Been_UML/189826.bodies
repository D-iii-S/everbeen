class LockManager
!!!547586.java!!!	getInstance() : LockManager
		if (lockManagerInstance == null) {
			return new LockManager();
		} else {
			return lockManagerInstance;
		}
!!!547714.java!!!	initialize(inout database : Database) : void
	    LockManager.databasePath = database.getDatabasePath();
	    eraseLock = new Object();
	    taskListLock = new Object();
	    validityMapLock = new Object();
	    columnsLock = new Object();
!!!547842.java!!!	ensureDirExists(in lockDirPath : String) : void
		
		String dirPath = databasePath + File.separator + lockDirPath;
		File lockDir = new File(dirPath);
		
	    if (!lockDir.exists()) {
	    	lockDir.mkdir();
	    }
	    
!!!547970.java!!!	getLock(in localPath : String, in lockName : String) : boolean

		Logger.logTrace("setting lock - " + localPath + "/" + lockName);
		
	    synchronized (this) {
	    	try {
	    		
	    		String lockPath = databasePath + File.separator + localPath;
	    		ensureDirExists(localPath);
	    		
	    		File lockFile = new File(lockPath + File.separator + lockName);
	    		
	    		return lockFile.createNewFile();
	    		
	    	} catch (IOException e) {
	    		
	    		Logger.logWarning("I/O error accessing lock: " 
	    				+ localPath + File.separator + lockName);
	    		
	    		return false;	        
	    	}
	    }
!!!548098.java!!!	clearLock(in localPath : String) : boolean
		
		Logger.logTrace("clearing lock - " + localPath);
		
		String lockPath = databasePath + File.separator + localPath;		
	    File lockFile = new File(lockPath);
	    
	    synchronized (this) {
	    	return lockFile.delete();
	    }
	 	    
!!!548226.java!!!	isLocked(in localPath : String) : boolean
		
		Logger.logTrace("checking lock - " + localPath);
		
	    String lockPath = databasePath + File.separator + localPath;
	    File lockFile = new File(lockPath);
	    
	    synchronized (this) {
		return lockFile.exists() && lockFile.isFile()
			&& lockFile.canRead();
	    }
!!!548354.java!!!	getLock(inout aid : AID, in name : String) : boolean
	    return getLock(aid + File.separator + File.separator 
		    + LOCK_DIR + File.separator, name);
!!!548482.java!!!	getLock(inout aid : AID, inout eid : EID, in name : String) : boolean
	    return getLock(aid + File.separator + LOCK_DIR + File.separator, name);
!!!548610.java!!!	getLock(inout aid : AID, inout eid : EID, inout bid : BID, in name : String) : boolean
	    return getLock(aid + File.separator + eid + File.separator + bid 
		    + File.separator + LOCK_DIR, name);
!!!548738.java!!!	isLocked(inout aid : AID, in name : String) : boolean
	    
	    String lockDirPath = aid + File.separator + LOCK_DIR;
	    ensureDirExists(lockDirPath);
	    
	    return isLocked(lockDirPath + File.separator + name);	    
!!!548866.java!!!	isLocked(inout aid : AID, inout eid : EID, in name : String) : boolean
	    
	    String lockDirPath = aid + File.separator + eid + File.separator + LOCK_DIR;
	    ensureDirExists(lockDirPath);
	    
	    return isLocked(lockDirPath + File.separator + name);	    
!!!548994.java!!!	isLocked(inout aid : AID, inout eid : EID, inout bid : BID, in name : String) : boolean
	    
	    String lockDirPath = aid + File.separator + eid 
	    	+ File.separator + bid + File.separator + LOCK_DIR;
	    
	    ensureDirExists(lockDirPath);
	    
	    return isLocked(lockDirPath + File.separator + name);	    
!!!549122.java!!!	isAnyLock(inout aid : AID, inout eid : EID, inout bid : BID, in name : String) : boolean
		
		Logger.logTrace("checking locks: " + name + "* in " 
				+ Database.getBinaryReferenceString(aid, eid, bid));
		
	    synchronized (this) {
	    	
	    	String lockDirPath = aid + File.separator + eid 
	    		+ File.separator + bid + File.separator + LOCK_DIR;
	    
	    	ensureDirExists(lockDirPath);
	    	
	    	File locksPathFile = new File(databasePath + File.separator + lockDirPath);
	                
	    	File[] lockList = locksPathFile.listFiles();
		    	
	    	for (File lockFile : lockList) {
	    		if (lockFile.getName().matches(name + ".*") && lockFile.exists() 
	    				&& lockFile.isFile() && lockFile.canRead()) {
	    			return true;
	    	    }
	    	}
	    	    
	    	return false;
	    }
!!!549250.java!!!	clearLock(inout aid : AID, in name : String) : boolean
	    
	    String lockDirPath = aid + File.separator + LOCK_DIR;
	    
	    return clearLock(lockDirPath + File.separator + name);	    
!!!549378.java!!!	clearLock(inout aid : AID, inout eid : EID, in name : String) : boolean
	
	    String lockDirPath = aid + File.separator + eid
	    	+ File.separator + LOCK_DIR;
	    
	    return clearLock(lockDirPath + File.separator + name);	    
!!!549506.java!!!	clearLock(inout aid : AID, inout eid : EID, inout bid : BID, in name : String) : boolean
	    
	    String lockDirPath = aid + File.separator + eid
	    	+ File.separator + bid + File.separator + LOCK_DIR
	    	;
	    return clearLock(lockDirPath + File.separator + name);	    
