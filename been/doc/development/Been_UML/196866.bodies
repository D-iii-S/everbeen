class SoftwareRepositoryService
!!!623106.java!!!	SoftwareRepositoryService()
		/* Determine and check data and temp directories. */
		getAndCheckDirectories();
		
		/* Create the implementation. */
		try {
			implementation = SoftwareRepositoryImplementation.getInstance();
		} catch (RemoteException e) {
			throw new TaskInitializationException(e);
		}
		
		/* Register implemented interface. */
		addRemoteInterface(RMI_MAIN_IFACE, implementation);
!!!623234.java!!!	getName() : String
		return SERVICE_NAME;
!!!623362.java!!!	start() : void
		try {
			tryCopyExampleData();
		} catch (IOException e) {
			throw new TaskException(e);
		}
		
		try {
			implementation.initialize(dataDirectory, tempDirectory);
		} catch (IOException e) {
			throw new TaskException(e);
		} catch (ClassNotFoundException e) {
			throw new TaskException(e);
		}
!!!623618.java!!!	checkDirectory(in directoryName : String) : void
		File directory = new File(directoryName);
		if (!directory.exists()) {
			logFatal("Error: \"" + directory + "\" does not exist.");
			exitError();
		}
		if (!directory.isDirectory()) {
			logFatal("Error: \"" + directory + "\" is not directory.");
			exitError();
		}
		if (!directory.canWrite()) {
			logFatal("Error: \"" + directory + "\" is not writable.");
			exitError();
		}
!!!623746.java!!!	getAndCheckDirectories() : void
		if (getTaskProperty(DATA_DIR_PROPERTY) != null) {
			String beenHome = System.getenv(BEEN_HOME);
			if (beenHome != null) {
				dataDirectory = beenHome + File.separatorChar + getTaskProperty(DATA_DIR_PROPERTY);
			} else {
				logFatal("Environment variable BEEN_HOME not defined.");
				exitError();
			}
		} else {
			dataDirectory = getWorkingDirectory();
		}

		if (getTaskProperty(TEMP_DIR_PROPERTY) != null) {
			String beenHome = System.getenv(BEEN_HOME);
			if (beenHome != null) {
				tempDirectory = beenHome + File.separatorChar + getTaskProperty(TEMP_DIR_PROPERTY);
			} else {
				logFatal("Environment variable BEEN_HOME not defined.");
				exitError();
			}
		} else {
			tempDirectory = getTempDirectory(); 
		}

		checkDirectory(dataDirectory);
		checkDirectory(tempDirectory);
