class Experiment
!!!757762.java!!!	getId() : EID
		return entity.getId();
!!!757890.java!!!	getName() : String
		return entity.getName();
!!!758018.java!!!	getStatus() : EntityStatus
		return entity.getStatus();
!!!758146.java!!!	getRoles() : Role
		return entity.getBenchmarkRoles();
!!!758274.java!!!	getCallbackRScripts() : CallbackRScripts
		return entity.getScripts();
!!!758402.java!!!	aggregatedTaskCount() : int
		int result = tasks.length;
		for (Binary binary: binaries) {
			result += binary.aggregatedTaskCount();
		}
		return result;
!!!758530.java!!!	aggregatedFinishedTaskCount() : int
		int result = 0;
		for (TaskEntry task: tasks) {
			if (task.getState().equals(TaskState.FINISHED)) {
				result++;
			}
		}
		for (Binary binary: binaries) {
			result += binary.aggregatedFinishedTaskCount();
		}
		return result;
!!!758658.java!!!	runCount() : int
		int result = 0;
		for (Binary binary: binaries) {
			result += binary.runCount();
		}
		return result;
!!!758786.java!!!	binaryCount() : int
		return binaries.length;
!!!758914.java!!!	getBinaries() : Binary
		return binaries;
!!!759042.java!!!	getTasks() : TaskEntry
		return tasks;
!!!759170.java!!!	getAggregatedTasks() : TaskEntry
		List<TaskEntry> result = new LinkedList<TaskEntry>();
		result.addAll(Arrays.asList(tasks));
		for (Binary binary: binaries) {
			result.addAll(Arrays.asList(binary.getAggregatedTasks()));
		}
		return result.toArray(new TaskEntry[result.size()]);
!!!759298.java!!!	getCheckpoints() : TaskEntry
		return checkpoints;
!!!759426.java!!!	getContextId() : String
		return entity.getAnalysis() + "-" + entity.getId();
!!!759554.java!!!	Experiment(inout entity : ExperimentEntity, inout binaries : Binary, inout tasks : TaskEntry, inout checkpoints : Map<TaskEntry, CheckPoint[]>)
		this.entity = entity;
		this.binaries = binaries;
		this.tasks = tasks;
		this.checkpoints = checkpoints;
