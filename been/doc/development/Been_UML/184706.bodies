class TaskEntry
!!!722690.java!!!	TaskEntry()
		this.currentTimeMillis = System.currentTimeMillis();
		
//		this.taskId = "";
//		this.contextId = "";
//		this.packageName = "";
//		this.taskName = "";
//		this.taskDescription = "";
//		this.hostName = null;
//		this.directoryPathTask = "";
//		this.directoryPathWorking = "";
//		this.directoryPathTemporary = "";
//		this.exclusivity = TaskExclusivity.NON_EXCLUSIVE;
//		this.serviceFlag = false;
//		this.state = TaskState.SUBMITTED;
//		this.timeSubmitted = 0;
//		this.timeStarted = 0;
//		this.timeFinished = 0;
//		this.restartCount = 0;
//		this.restartMax = 0;
//		this.timeoutRun = 0;
!!!722818.java!!!	TaskEntry(in taskId : String, in contextId : String, in packageName : String, in taskName : String, in taskDescription : String, in hostName : String, in directoryPathTask : String, in directoryPathWorking : String, in directoryPathTemporary : String, inout taskProperties : Properties, inout exclusivity : TaskExclusivity, inout serviceFlag : boolean, in restartMax : int, in timeoutRun : long)
		this.currentTimeMillis = System.currentTimeMillis();
		
		/* Inicialization of variables with public write access. */
		this.setTaskId(taskId);
		this.setContextId(contextId);
		this.setPackageName(packageName);
		if (taskName != null) {
			this.setTaskName(taskName);
		}
		if (taskDescription != null) {
			this.setTaskDescription(taskDescription);
		}
		if (hostName != null) {
			this.setHostName(hostName);
		}
		this.setDirectoryPathTask(directoryPathTask);
		this.setDirectoryPathWorking(directoryPathWorking);
		this.setDirectoryPathTemporary(directoryPathTemporary);
		this.setTaskProperties(taskProperties);
		this.setExclusivity(exclusivity);
		this.setServiceFlag(serviceFlag);
		
//		/* Inicialization of following (protected write access) variables with
//		 * default values:
//		 * 	state,
//		 * 	timeSubmitted,
//		 * 	timeScheduled,
//		 * 	timeStarted,
//		 * 	timeFinished,
//		 * 	restartCount.
//		 */
//		this.initInternals(TaskState.SUBMITTED, 0, 0, 0, 0, 0);
		
		/* Inicialization of variables with public write access. */
		this.setRestartMax(restartMax);
		this.setTimeoutRun(timeoutRun);
!!!722946.java!!!	initInternals(inout state : TaskState, in timeSubmitted : long, in timeScheduled : long, in timeStarted : long, in timeFinished : long, in restartCount : int) : void
				this.setState(state);
				this.setTimeSubmitted(timeSubmitted);
				this.setTimeScheduled(timeScheduled);
				this.setTimeStarted(timeStarted);
				this.setTimeFinished(timeFinished);
				this.setRestartCount(restartCount);
!!!723074.java!!!	setTaskId(in taskId : String) : void
		if (Pattern.matches(REGEXP_TASK_ID, taskId)) {
			this.taskId = taskId;
		} else {
			throw new IllegalArgumentException("taskId is not valid");
		}
!!!723202.java!!!	setContextId(in contextId : String) : void
		if (Pattern.matches(REGEXP_CONTEXT_ID, contextId)) {
			this.contextId = contextId;
		} else {
			throw new IllegalArgumentException("contextId is not valid");
		}
!!!723330.java!!!	setPackageName(in packageName : String) : void
		if (Pattern.matches(REGEXP_PACKAGE_NAME, packageName)) {
			this.packageName = packageName;
		} else {
			throw new IllegalArgumentException("packageName is not valid");
		}
!!!723458.java!!!	setTaskName(in taskName : String) : void
//		if (Pattern.matches(REGEXP_TASK_NAME, taskName)) {
		if (taskName != null) {
			this.taskName = taskName;
		} else {
			throw new IllegalArgumentException("taskName is not valid");
		}
!!!723586.java!!!	setTaskDescription(in taskDescription : String) : void
//		if (Pattern.matches(REGEXP_TASK_DESCRIPTION, taskDescription)) {
		if (taskDescription != null) {
			this.taskDescription = taskDescription;
		} else {
			throw new IllegalArgumentException("taskDescription is not valid");
		}
!!!723714.java!!!	setHostName(in hostName : String) : void
		if (hostName == null) {
			return;  // do nothing (needed for unlink)
		}
		if (Pattern.matches(REGEXP_HOST_NAME, hostName)) {
			this.hostName = hostName;
		} else {
			throw new IllegalArgumentException("hostName is not valid");
		}
!!!723842.java!!!	setDirectoryPathTask(in directoryPathTask : String) : void
		if (Pattern.matches(REGEXP_DIRECTORY_PATH, directoryPathTask)) {
			this.directoryPathTask = directoryPathTask;
		} else {
			throw new IllegalArgumentException("directoryPathTask is not valid");
		}
!!!723970.java!!!	setDirectoryPathWorking(in directoryPathWorking : String) : void
		if (Pattern.matches(REGEXP_DIRECTORY_PATH, directoryPathWorking)) {
			this.directoryPathWorking = directoryPathWorking;
		} else {
			throw new IllegalArgumentException("directoryPathWorking is not valid");
		}
!!!724098.java!!!	setDirectoryPathTemporary(in directoryPathTemporary : String) : void
		if (Pattern.matches(REGEXP_DIRECTORY_PATH, directoryPathTemporary)) {
			this.directoryPathTemporary = directoryPathTemporary;
		} else {
			throw new IllegalArgumentException("directoryPathTemporary is not valid");
		}
!!!724226.java!!!	setTaskProperties(inout taskProperties : Properties) : void
		if (taskProperties != null) {
			this.taskProperties = taskProperties;
		} else {
			this.taskProperties = new Properties();  // Use empty...
		}
!!!724354.java!!!	setExclusivity(inout exclusivity : TaskExclusivity) : void
		this.exclusivity = exclusivity;
!!!724482.java!!!	setServiceFlag(inout serviceFlag : boolean) : void
		this.serviceFlag = serviceFlag;
!!!724610.java!!!	setState(inout state : TaskState) : void
		this.state = state;
!!!724738.java!!!	setTimeSubmitted(in timeSubmitted : long) : void
		this.timeSubmitted = timeSubmitted;
!!!724866.java!!!	setTimeScheduled(in timeScheduled : long) : void
		if ((timeScheduled == 0) || (timeScheduled >= this.timeSubmitted)) {
			this.timeScheduled = timeScheduled;
		} else {
			throw new IllegalArgumentException("timeScheduled is less than "
					+ "timeSubmitted");
		}
!!!724994.java!!!	setTimeStarted(in timeStarted : long) : void
		if ((timeStarted == 0) || (timeStarted >= this.timeScheduled)) {
			this.timeStarted = timeStarted;
		} else {
			throw new IllegalArgumentException("timeStarted is less than "
					+ "timeScheduled");
		}
!!!725122.java!!!	setTimeFinished(in timeFinished : long) : void
		if ((timeFinished == 0) || (timeFinished >= this.timeSubmitted)) {
			// we must compare with timeSubmitted because in case of failure
			// task can reach state finisched and never scheduled or started
			this.timeFinished = timeFinished;
		} else {
			throw new IllegalArgumentException("timeFinished is less than "
					+ "timeSubmitted");
		}
!!!725250.java!!!	setRestartCount(in restartCount : int) : void
		if (restartCount >= 0) {
			this.restartCount = restartCount;
		} else {
			throw new IllegalArgumentException("restartCount is less than 0");
		}
!!!725378.java!!!	setRestartMax(in restartMax : int) : void
		if (restartMax >= 0) {
			this.restartMax = restartMax;
		} else {
			throw new IllegalArgumentException("restartMax is less than 0");
		}
!!!725506.java!!!	setTimeoutRun(in timeoutRun : long) : void
		if (timeoutRun >= 0) {
			this.timeoutRun = timeoutRun;
		} else {
			throw new IllegalArgumentException("timeoutRun is less than 0");
		}
!!!725634.java!!!	getCurrentTime() : long
		return this.currentTimeMillis;
!!!725762.java!!!	getTaskId() : String
		return this.taskId;
!!!725890.java!!!	getContextId() : String
		return this.contextId;
!!!726018.java!!!	getPackageName() : String
		return this.packageName;
!!!726146.java!!!	getTaskName() : String
		return this.taskName;
!!!726274.java!!!	getTaskDescription() : String
		return this.taskDescription;
!!!726402.java!!!	getHostName() : String
		return this.hostName;
!!!726530.java!!!	getDirectoryPathTask() : String
		return this.directoryPathTask;
!!!726658.java!!!	getDirectoryPathWorking() : String
		return this.directoryPathWorking;
!!!726786.java!!!	getDirectoryPathTemporary() : String
		return this.directoryPathTemporary;
!!!726914.java!!!	getTaskProperties() : Properties
		return this.taskProperties;
!!!727042.java!!!	getExclusivity() : TaskExclusivity
		return this.exclusivity;
!!!727170.java!!!	getServiceFlag() : boolean
		return this.serviceFlag;
!!!727298.java!!!	getState() : TaskState
		return this.state;
!!!727426.java!!!	getTimeSubmitted() : long
		return this.timeSubmitted;
!!!727554.java!!!	getTimeScheduled() : long
		return this.timeScheduled;
!!!727682.java!!!	getTimeStarted() : long
		return this.timeStarted;
!!!727810.java!!!	getTimeFinished() : long
		return this.timeFinished;
!!!727938.java!!!	getRestartCount() : int
		return this.restartCount;
!!!728066.java!!!	getRestartMax() : int
		return this.restartMax;
!!!728194.java!!!	getTimeoutRun() : long
		return this.timeoutRun;
!!!728322.java!!!	clone() : TaskEntry
		TaskEntry taskEntry = (TaskEntry) super.clone();
		
		/* Set current time. */
		taskEntry.currentTimeMillis = System.currentTimeMillis();
		
		return taskEntry;
