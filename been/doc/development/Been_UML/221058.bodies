class RoutinesTest
!!!877570.java!!!	assertArraysEqual(inout expected : T, inout actual : T) : void
		assertEquals(expected.length, actual.length);
		for (int i = 0; i < expected.length; i++) {
			assertEquals(expected[i], actual[i]);
		}
!!!884738.java!!!	testHtmlspecialcharsNull() : void
		assertEquals(null, Routines.htmlspecialchars(null));
!!!884866.java!!!	testHtmlspecialCharsNormalText() : void
		assertEquals(
			"no special characters",
			Routines.htmlspecialchars("no special characters")
		);
!!!884994.java!!!	testHtmlspecialcharsSpecialCharacters() : void
		/* All characters are repeated twice - we want to test that *all* instances
		 * are replaced.
		 */
		assertEquals(
			"&amp;&quot;&#039;&lt;&gt;&amp;&quot;&#039;&lt;&gt;",
			Routines.htmlspecialchars("&\"'<>&\"'<>")
		
		);
!!!885122.java!!!	testUcfirstNull() : void
		assertEquals(null, Routines.ucfirst(null));
!!!885250.java!!!	testUcfirstEmptyString() : void
		assertEquals("", Routines.ucfirst(""));
!!!885378.java!!!	testUcfirstSmall() : void
		assertEquals("Abc", Routines.ucfirst("abc"));
!!!885506.java!!!	testUcfirstBig() : void
		assertEquals("ABC", Routines.ucfirst("ABC"));
!!!885634.java!!!	testUcfirstNonAlpha() : void
		assertEquals("%abc", Routines.ucfirst("%abc"));
!!!885762.java!!!	testJoinTStringEmpty() : void
		assertEquals("", Routines.join(":", new String[] {}));
!!!885890.java!!!	testJoinTStringOne() : void
		assertEquals("one", Routines.join(":", new String[] { "one" }));
!!!886018.java!!!	testJoinTStringThree() : void
		assertEquals(
			"one:two:three",
			Routines.join(":", new String[] { "one", "two", "three" })
		);
!!!886146.java!!!	testJoinTDateThree() : void
		Date date1 = new Date();
		Date date2 = new Date();
		Date date3 = new Date();
		
		assertEquals(
			date1.toString() + ":" + date2.toString() + ":" + date3.toString(),
			Routines.join(":", new Date[] { date1, date2, date3 })
		);
!!!886274.java!!!	testJoinIntEmpty() : void
		assertEquals("", Routines.join(":", new int[] {}));
!!!886402.java!!!	testJoinIntOne() : void
		assertEquals("1", Routines.join(":", new int[] { 1 }));
!!!886530.java!!!	testJoinIntThree() : void
		assertEquals(
			"1:2:3",
			Routines.join(":", new int[] { 1, 2, 3 })
		);
!!!886658.java!!!	testAddLeadingZeroIntOneCipher() : void
		assertEquals("05", Routines.addLeadingZero((int) 5));
!!!886786.java!!!	testAddLeadingZeroIntTwoCiphers() : void
		assertEquals("42", Routines.addLeadingZero((int) 42));
!!!886914.java!!!	testAddLeadingZeroIntManyCiphers() : void
		assertEquals("1234", Routines.addLeadingZero((int) 1234));
!!!887042.java!!!	testAddLeadingZeroLongOneCipher() : void
		assertEquals("05", Routines.addLeadingZero((long) 5));
!!!887170.java!!!	testAddLeadingZeroLongTwoCiphers() : void
		assertEquals("42", Routines.addLeadingZero((long) 42));
!!!887298.java!!!	testAddLeadingZeroLongManyCiphers() : void
		assertEquals("1234", Routines.addLeadingZero((long) 1234));
!!!887426.java!!!	testAddLeadingZeroInt0() : void
		assertEquals("42", Routines.addLeadingZeroes(42, 0));
!!!887554.java!!!	testAddLeadingZeroInt1() : void
		assertEquals("42", Routines.addLeadingZeroes(42, 1));
!!!887682.java!!!	testAddLeadingZeroInt2() : void
		assertEquals("42", Routines.addLeadingZeroes(42, 2));
!!!887810.java!!!	testAddLeadingZeroInt3() : void
		assertEquals("042", Routines.addLeadingZeroes(42, 3));
!!!887938.java!!!	testAddLeadingZeroInt4() : void
		assertEquals("0042", Routines.addLeadingZeroes(42, 4));
!!!888066.java!!!	testBrowserIsMSIEMozilla() : void
		assertFalse(Routines.browserIsMSIE(
			new TestRequest("Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.8.0.6) Gecko/20060728 Firefox/1.5.0.6")
		));
!!!888194.java!!!	testBrowserIsMSIEOpera() : void
		assertFalse(Routines.browserIsMSIE(
			new TestRequest("Opera/9.00 (Windows NT 5.1; U; en)")
		));
!!!888322.java!!!	testBrowserIsMSIEInternetExplorer() : void
		assertTrue(Routines.browserIsMSIE(
			new TestRequest("Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; .NET CLR 1.1.4322)")
		));
!!!888450.java!!!	testJavaScriptEscapeNull() : void
		assertEquals(null, Routines.javaScriptEscape(null));
!!!888578.java!!!	testJavaScriptEscapeNormalText() : void
		assertEquals(
			"no special characters",
			Routines.javaScriptEscape("no special characters")
		);
!!!888706.java!!!	testJavaScriptEscapeSpecialCharacters() : void
		assertEquals(
			/* All characters are repeated twice - we want to test that *all* instances
			 * are replaced.
			 */
			"\\x00\\x12\\'\\\"\\x00\\x12\\'\\\"",
			Routines.javaScriptEscape("\u0000\u0012'\"\u0000\u0012'\"")
		);
!!!888834.java!!!	testIsIntegerTrue() : void
		assertTrue(Routines.isInteger("42"));
!!!888962.java!!!	testIsIntegerFalse() : void
		assertFalse(Routines.isInteger("nonsense"));
!!!889090.java!!!	testIsIntegerBigNumber() : void
		assertFalse(Routines.isInteger("42000000000"));
!!!889218.java!!!	testIsLongTrue() : void
		assertTrue(Routines.isLong("42"));
!!!889346.java!!!	testIsLongFalse() : void
		assertFalse(Routines.isLong("nonsense"));
!!!889474.java!!!	testIsLongBigNumber() : void
		assertTrue(Routines.isLong("42000000000"));
!!!889602.java!!!	testsSplit2EmptyString() : void
		assertArraysEqual(new String[] {}, Routines.split2(":", ""));
!!!889730.java!!!	testsSplit2One() : void
		assertArraysEqual(new String[] { "one" }, Routines.split2(":", "one"));
!!!889858.java!!!	testsSplit2Three() : void
		assertArraysEqual(
			new String[] { "one", "two", "three" },
			Routines.split2(":", "one:two:three")
		);
!!!889986.java!!!	testsSplit2ThreeNontrivialRegexp() : void
		assertArraysEqual(
			new String[] { "one", "two", "three" },
			Routines.split2("\\d", "one1two2three")
		);
!!!890114.java!!!	testFormatNumberWithPrefixedUnitNullUnit() : void
		try {
			Routines.formatNumberWithPrefixedUnit(42, null, Locale.ENGLISH);
		} catch (NullPointerException e) {
			/* Eat it. */
		}
!!!890242.java!!!	testFormatNumberWithPrefixedUnitNullLocale() : void
		try {
			Routines.formatNumberWithPrefixedUnit(42, "Hz", null);
		} catch (NullPointerException e) {
			/* Eat it. */
		}
!!!890370.java!!!	testFormatNumberWithPrefixedUnitZero() : void
		assertEquals(
			"0 Hz",
			Routines.formatNumberWithPrefixedUnit(0, "Hz", Locale.ENGLISH)
		);
!!!890498.java!!!	testFormatNumberWithPrefixedUnitSmall() : void
		assertEquals(
			"42 Hz",
			Routines.formatNumberWithPrefixedUnit(42, "Hz", Locale.ENGLISH)
		);
!!!890626.java!!!	testFormatNumberWithPrefixedUnitSmallNoUnit() : void
		assertEquals(
			"42",
			Routines.formatNumberWithPrefixedUnit(42, "", Locale.ENGLISH)
		);
!!!890754.java!!!	testFormatNumberWithPrefixedUnitkHz() : void
		assertEquals(
			"42 kHz",
			Routines.formatNumberWithPrefixedUnit(42 * 1024, "Hz", Locale.ENGLISH)
		);
!!!890882.java!!!	testFormatNumberWithPrefixedUnitMHz() : void
		assertEquals(
			"42 MHz",
			Routines.formatNumberWithPrefixedUnit(
				42L * 1024 * 1024,
				"Hz",
				Locale.ENGLISH
			)
		);
!!!891010.java!!!	testFormatNumberWithPrefixedUnitGHz() : void
		assertEquals(
			"42 GHz",
			Routines.formatNumberWithPrefixedUnit(
				42L * 1024 * 1024 * 1024,
				"Hz",
				Locale.ENGLISH
			)
		);
!!!891138.java!!!	testFormatNumberWithPrefixedUnitTHz() : void
		assertEquals(
			"42 THz",
			Routines.formatNumberWithPrefixedUnit(
				42L * 1024 * 1024 * 1024 * 1024,
				"Hz",
				Locale.ENGLISH
			)
		);
!!!891266.java!!!	testFormatNumberWithPrefixedUnitPHz() : void
		assertEquals(
			"42 PHz",
			Routines.formatNumberWithPrefixedUnit(
				42L * 1024 * 1024 * 1024 * 1024 * 1024,
				"Hz",
				Locale.ENGLISH
			)
		);
!!!891394.java!!!	testFormatNumberWithPrefixedUnitBig() : void
		assertEquals(
			"42 PHz",
			Routines.formatNumberWithPrefixedUnit(
				42L * 1024 * 1024 * 1024 * 1024 * 1024 + 1,
				"Hz",
				Locale.ENGLISH
			)
		);
!!!891522.java!!!	testFormatNumberWithPrefixedUnitBigNoUnit() : void
		assertEquals(
			"42 P",
			Routines.formatNumberWithPrefixedUnit(
				42L * 1024 * 1024 * 1024 * 1024 * 1024 + 1,
				"",
				Locale.ENGLISH
			)
		);
!!!891650.java!!!	testFormatMillisAsHMSMillis() : void
		assertEquals("0:00", Routines.formatMillisAsHMS(12));
!!!891778.java!!!	testFormatMillisAsHMSSeconds() : void
		assertEquals("0:01", Routines.formatMillisAsHMS(1234));
!!!891906.java!!!	testFormatMillisAsHMSMinutes() : void
		assertEquals("2:03", Routines.formatMillisAsHMS(123456));
!!!892034.java!!!	testFormatMillisAsHMSHours() : void
		assertEquals("3:25:45", Routines.formatMillisAsHMS(12345678));
!!!892162.java!!!	testNl2br() : void
		assertEquals("test", Routines.nl2br("test"));
		assertEquals("", Routines.nl2br(""));
		assertEquals(null, Routines.nl2br(null));
		assertEquals("<br />\r\n", Routines.nl2br("\r\n"));
		assertEquals("<br />\n", Routines.nl2br("\n"));
		assertEquals("<br />\r", Routines.nl2br("\r"));
		assertEquals("<br />\n<br />\r", Routines.nl2br("\n\r"));
!!!892290.java!!!	testTrim() : void
		try {
			Routines.trim(null);
			fail();
		} catch (NullPointerException e) {
			/* Eat it. */
		}
		assertEquals("", Routines.trim(""));
		assertEquals("a", Routines.trim("  a"));
		assertEquals("a", Routines.trim("a  "));
		assertEquals("a", Routines.trim("  a  "));
		assertEquals("a a", Routines.trim(" a a "));
		assertEquals("", Routines.trim(" "));
		assertEquals("", Routines.trim("  "));
		assertEquals("", Routines.trim("   "));
!!!892418.java!!!	testBounded() : void
		try {
			Routines.bounded(null, 0, 0);
			fail();
		} catch (NullPointerException e) {
			/* Eat it. */
		}
		try {
			Routines.bounded(0, null, 0);
			fail();
		} catch (NullPointerException e) {
			/* Eat it. */
		}
		try {
			Routines.bounded(0, 0, null);
			fail();
		} catch (NullPointerException e) {
			/* Eat it. */
		}
		try {
			Routines.bounded(0, 2, 1);
			fail();
		} catch (IllegalArgumentException e) {
			/* Eat it. */
		}
		assertEquals(2, (int) Routines.bounded(1, 2, 4));
		assertEquals(2, (int) Routines.bounded(2, 2, 4));
		assertEquals(3, (int) Routines.bounded(3, 2, 4));
		assertEquals(4, (int) Routines.bounded(4, 2, 4));
		assertEquals(4, (int) Routines.bounded(5, 2, 4));
!!!892546.java!!!	testStringOrNone() : void
		try {
			Routines.stringOrNone(null);
			fail();
		} catch (NullPointerException e) {
			/* Eat it. */
		}
		assertEquals("(none)", Routines.stringOrNone(""));
		assertEquals("a", Routines.stringOrNone("a"));
