class CheckAndConvertTask
!!!646530.java!!!	CheckAndConvertTask()
		super();
!!!646914.java!!!	getCanonicalLocalhostName() : String
		
		try {
			return InetAddress.getLocalHost().getCanonicalHostName();
		} catch (Exception e) {
			return "localhost";
		}
!!!647042.java!!!	createCrashFile(inout filesToPack : List<String>, in dstName : String) : boolean
		try {
			File file = new File(dstName);
			if (file.exists()) {
				file.delete();
			} 
			
			FileOutputStream f = new FileOutputStream(file);
			ZipOutputStream zos = new ZipOutputStream(f);
			BufferedOutputStream out = new BufferedOutputStream(zos);

			for (String filename : filesToPack) {
				logDebug("Adding " + filename + " into " + dstName);
				Zipper.zipFile(zos, out, new File(filename), "");
			}
			out.close();

		} catch (IOException e) {
			Task.getTaskHandle().logError(
					"i/o error generating zip with crashed results");
			e.printStackTrace();
			return false;
		}
		return true;
!!!647170.java!!!	notifyTableCreation(in tableIndex : int, in tableTotal : int, inout bid : BID, inout rid : RID, inout valid : boolean) : void
		
		/* Add a line to tables.meta file containing info for collecting task */
		/* Number of table (per run), TAB, total number of tables, TAB, binaryId, 
		 * TAB, runId, TAB, runValidity, TAB, results role, TAB hostname */
		outputWriter.println(tableIndex + ASCII_TAB + tableTotal + ASCII_TAB 
				+ bid + ASCII_TAB + rid + ASCII_TAB
				+ ((valid) ? "1" : "0") + ASCII_TAB + resultsRole + ASCII_TAB + hostName);
!!!647298.java!!!	run() : void

		workDir = getWorkingDirectory();
		srcDirectories = getTaskProperty(RESULTS_PATHS_PROPERTY);
		String sampleCountString = getTaskProperty(SAMPLE_COUNTS_PROPERTY); 
		if (sampleCountString != null) { 
			sampleCount = Long.valueOf(sampleCountString);
		} else {
			sampleCount = 0;
		}

		resultsRole = getTaskProperty(RESULTS_ROLE_PROPERTY);
		hostName = getCanonicalLocalhostName();
		suiteName = getTaskProperty(SUITE_ARGUMENT);
	
		/*
		 * We suppose all methods addAnalysis, addExperiment, and addBinary has
		 * been called. Otherwise, attempt to upload results will result in an
		 * "analysis/experiment/binary doesn't exist" error, or metadata reading error
		 */
		
		/** Table with paths to files with results of runs */ 
		ArrayList<RunResultsPosition> resultsTable = new ArrayList<RunResultsPosition>();
		
		String[] lineTokens;
		String line;
		BufferedReader inputReader;

		inputReader = new BufferedReader(new StringReader(srcDirectories));

		/* In srcDirectories (task property read in constructor), there's table 
		 * containing info, where we should find results of runs. Table has got
		 * lines - one per each run to check and convert.
		 * 
		 * One line has got 4 items:
		 *   table index, BID, RID, Validity
		 *   
		 * Following code parses table.
		 * convert it from string to object (with Miso + Jaro) 
		 * - tracked as todo in RunResultsPosition.java
		 */
		
		try {
			while ((line = inputReader.readLine()) != null) {
				lineTokens = line.split(ASCII_TAB);
				if (lineTokens.length == 3) {
					RunResultsPosition temp = new RunResultsPosition(new BID(
							new Integer(lineTokens[0])), new RID(new Integer(
							lineTokens[1])), lineTokens[2]);

					resultsTable.add(temp);
				} else {					
					throw new TaskException("invalid task arguments (results directory table)");
				}
			}
			inputReader.close();
		} catch (IOException e) {
			throw new TaskException("Cannot read results", e);
		}

		
		/* Now, iterate through the table of all runs and check them all one by one */
		Iterator it = resultsTable.iterator();

			
		try {
			outputWriter = new PrintWriter(
					new BufferedWriter(new FileWriter(workDir
							+ File.separator + "tables.meta")));
		} catch (IOException e) {
			throw new TaskException("I/O error during results conversion,"
					+ " couldn't create 'tables.meta' file", e);			
		}
			
			/* Iterate through the table with items for runs */
			while (it.hasNext()) {				
				
				boolean validRun;
				
				RunResultsPosition currentRun = (RunResultsPosition) it.next();
			
				try {
					validRun = checkAndConvertOneRun(currentRun.getBid(),
							currentRun.getRid(), currentRun.getPath(), 
							workDir + File.separator + currentRun.getRid(), 
							resultsRole, suiteName, sampleCount);
				} catch (IOException e) {
					logError("I/O error during results conversion, BID(" + currentRun.getBid() + "), "
							+ "RID (" + currentRun.getRid() + ")");
					notifyTableCreation(0, 1, currentRun.getBid(), currentRun.getRid(), false);
					validRun = false;
				}
				
				/* If run is invalid, we collect the output of benchmark 
				 * to send to results repository */
				if (!validRun) {
					createCrashFile(getCrashList(currentRun.getPath()),
							workDir + File.separator + currentRun.getRid()); 
				}						

			}
			
			outputWriter.close();

		logInfo("Results checked and converted.");

!!!647426.java!!!	checkRequiredProperties() : void
		checkRequiredProperties(new String[]{
				RESULTS_PATHS_PROPERTY,
				RESULTS_ROLE_PROPERTY,
				SUITE_ARGUMENT
		});
