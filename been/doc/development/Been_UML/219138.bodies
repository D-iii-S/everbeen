class HostGenerator
!!!848258.java!!!	main(in args : String) : void
		
		{
			System.out.println(OUTPUT_DIRECTORY);
			File od = new File(OUTPUT_DIRECTORY);
		
			od.mkdirs();
		}
		
		Document document = XMLHelper.createDocument();
		
		Element root = document.createElement("index");
		Element hosts = document.createElement("hosts");
		Element groups = document.createElement("groups");
		
		document.appendChild(root);
		root.appendChild(hosts);
		root.appendChild(groups);
		
		GroupIndexEntry defaultEntry = new GroupIndexEntry(HostGroup.DEFAULT_GROUP_NAME, "0.group");
		ArrayList< Pair< HostGroup, GroupIndexEntry > > groupList = 
			new ArrayList< Pair < HostGroup, GroupIndexEntry > >();
		
		HostGroup def = new HostGroup(HostGroup.DEFAULT_GROUP_NAME);
		
		int i = 0;
		for (HostGenerator current: GENERATORS) {
			
			ArrayList< HostIndexEntry > result = current.generateAll(OUTPUT_DIRECTORY);
			HostGroup g = new HostGroup("Group " + l2(i));
			GroupIndexEntry e = new GroupIndexEntry(g.getName(), l2(i) + ".group");

			for (HostIndexEntry entry: result) {
				
				hosts.appendChild(entry.exportAsElement(document));
				def.addHost(entry.getHostName());
				g.addHost(entry.getHostName());
			}
			
			String desc = "Host name mask: " + current.getHostNameMask()
			              + "\nOS index: " + current.getOsIndex()
			              + "\nNetwork adapters: " + current.getNet()
			              + "\nMemory index: " + current.getMemIndex()
			              + "\nCPU index: " + current.getCpuIndex()
			              + "\nDrive index: " + current.getDriveIndex()
			              + "\nApplications: " + current.getApps()
			              + "\nJava info index: " + current.getJavaIndex();
			g.setDescription(desc);
			
			groupList.add(new Pair< HostGroup, GroupIndexEntry >(g, e));
			i += 1;
		}

		groups.appendChild(defaultEntry.exportAsElement(document));
		
		for (Pair< HostGroup, GroupIndexEntry > p: groupList) {
			
			XMLHelper.saveXMLSerializable(p.getFirst(), OUTPUT_DIRECTORY + p.getSecond().getDataFileName(), 
					true, "UTF-16");
			groups.appendChild(p.getSecond().exportAsElement(document));
		}
		
		XMLHelper.saveDocument(document, OUTPUT_DIRECTORY + "db.index");

		Document groupdoc = XMLHelper.createDocument();
		groupdoc.appendChild(def.exportAsElement(groupdoc));
		
		XMLHelper.saveDocument(groupdoc, OUTPUT_DIRECTORY + "0.group");
!!!848386.java!!!	HostGenerator(in postfix : String, in osIndex : int, in net : String, in memIndex : int, in cpuIndex : int, in driveIndex : int, in apps : String, in javaIndex : int, in hosts : int, in hist : int, in date : String)
		try {
			this.postfix = postfix;
			this.osIndex = osIndex;
			this.net = net;
			this.memIndex = memIndex;
			this.cpuIndex = cpuIndex;
			this.driveIndex = driveIndex;
			this.apps = apps;
			this.hosts = hosts;
			this.hist = hist;
			this.date = date;
			this.javaIndex = javaIndex;
			
			df = new SimpleDateFormat("yyyy-MM-dd-HH-mm-ss");
	
			realDate = df.parse(this.date);
			
			cal = new GregorianCalendar();
			cal.setTime(realDate);
		} catch (Exception e) {
			assert false : "bummer";
		}
!!!848514.java!!!	generateAll(in outDir : String) : HostIndexEntry
	
		ArrayList< HostIndexEntry > entries = new ArrayList< HostIndexEntry >();
		
		for (int i = 0; i < hosts; ++i)
		{
			String hostName = baseHostName(i);

			GregorianCalendar curCal = (GregorianCalendar) cal.clone();
			curCal.add(GregorianCalendar.MINUTE, i * HOST_ADD_DELTA_MIN);
			
			Date dd = curCal.getTime();
			String baseFileName = hostName + "-" + df.format(dd);
	
			HostIndexEntry e = new HostIndexEntry(hostName, 
					baseFileName + ".host", 
					baseFileName + ".load", 
					baseFileName + ".loadmap", dd);

			entries.add(e);
			
			System.out.println("Generating primary file for \"" + hostName + "\""); 
			generate(hostName, outDir + baseFileName + ".host", dd);

			for (int j = 0; j < hist; ++j)
			{
				curCal.add(GregorianCalendar.HOUR, -j * HISTORY_DELTA_HOURS);
				
				Date d = curCal.getTime();
				
				String fileName = hostName + "-" + df.format(d) + ".host";
				
				System.out.println("  Generating history file, date: " + df.format(d));
				generate(hostName, outDir + fileName, d);
				
				e.addHistoryEntry(d, fileName);
			}
		}
		
		return entries;
!!!848642.java!!!	generate(in hostName : String, in fileName : String, inout curDate : Date) : void

		String dateString = MiscUtils.formatDate(curDate, HostManagerInterface.DEFAULT_DATE_FORMAT);
		String timeString = MiscUtils.formatDate(curDate, HostManagerInterface.DEFAULT_TIME_FORMAT);
		
		String result = XML_HEADER
			            + "<hostName>" + hostName + "</hostName>\n"
		                + "<lastCheckDate>" + dateString + "</lastCheckDate>\n"
		                + "<lastCheckTime>" + timeString + "</lastCheckTime>\n"
		                + "<detector>" + "hwdet3_windows" + "</detector>\n";
		
		result += OS_INFO_NODES[this.osIndex];
		result += PROCESSOR_NODES[this.cpuIndex];
		result += MEMORY_NODES[this.memIndex];
		
		result += "<network>\n";
		
		for (int i = 0; i < net.length(); ++i) {
			int index = net.charAt(i) - 'A';
			result += NETWORK_ADAPTER_NODES[index];
		}
		
		result += "</network>\n";
		
		result += ALL_DRIVES[this.driveIndex];

		result += "<installedProducts>\n";
		
		for (int i = 0; i < this.apps.length(); ++i) {
			int index = this.apps.charAt(i) - 'A';
			result += APPLICATIONS[index];
		}
		
		result += MANDATORY_APPS;
		
		result += "</installedProducts>\n";
		
		result += JAVA_INFO[this.javaIndex];
		
		result += XML_FOOTER;
		
		BufferedWriter bw = MiscUtils.openFileForWritingWithEncoding(fileName, "UTF-16");
		
		bw.write(result);
		
		bw.close();
!!!848770.java!!!	getHostNameMask() : String
		
		return l1(osIndex) + "-" + l2(memIndex) + "-" + l2(cpuIndex) + "-"
		       + l2(driveIndex) + "-" + net + "-" + apps + ".***." + postfix;
!!!848898.java!!!	getApps() : String
		return apps;
!!!849026.java!!!	getCpuIndex() : int
		return cpuIndex;
!!!849154.java!!!	getDriveIndex() : int
		return driveIndex;
!!!849282.java!!!	getHist() : int
		return hist;
!!!849410.java!!!	getHosts() : int
		return hosts;
!!!849538.java!!!	getJavaIndex() : int
		return javaIndex;
!!!849666.java!!!	getMemIndex() : int
		return memIndex;
!!!849794.java!!!	getNet() : String
		return net;
!!!849922.java!!!	getOsIndex() : int
		return osIndex;
!!!850050.java!!!	getPostfix() : String
		return postfix;
!!!850178.java!!!	baseHostName(in index : int) : String
		
		String result = l1(osIndex) + "-" + l2(memIndex) + "-" + l2(cpuIndex) + "-" 
		                + l2(driveIndex) + "-" + net + "-" + apps + "." + ln(index, 3);
			
		return result + "." + postfix;
!!!850306.java!!!	l1(in i : int) : String
		
		return String.valueOf(i);
!!!850434.java!!!	l2(in i : int) : String
		
		String r = String.valueOf(i);
		
		if (i <= 9) {
			r = "0" + r;
		}
		
		return r;
!!!850562.java!!!	ln(in i : int, in l : int) : String
		
		String r = String.valueOf(i);
		
		while (r.length() < l) {
			r = "0" + r;
		}
		
		return r;
