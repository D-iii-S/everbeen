class JonasShutdown
!!!638850.java!!!	JonasShutdown()
		super();
!!!638978.java!!!	run() : void
		jonasDir = getTaskProperty(JONAS_DIR);
		logInfo("Jonas directory: " + jonasDir);
		
		/*
		 * Shutdown Jonas
		 */
		
		String fSep = File.separator;
		ArrayList<String> cmd = new ArrayList<String>(); 
		Process jonasProcess = null;

		if (isRunningInLinux()) {
			String jonasPath = jonasDir + fSep + "bin" + fSep + "unix";
			cmd.add(jonasPath + fSep + "jonas");
			cmd.add("stop");
			cmd.add("-fg");
		}
		if (isRunningInWindows()) {
			cmd.add("cmd");
			cmd.add("/C");
			cmd.add("call");
			String jonasPath = jonasDir + fSep + "bin" + fSep + "nt";
			cmd.add(jonasPath + fSep + "jonas.bat");
			cmd.add("stop");
			cmd.add("-fg");
		}

		String[] cmdArray = (String[]) cmd.toArray(new String[cmd.size()]);
		
		try {
			logInfo("Shutting down Jonas");
			logDebug("Executing: " + ArrayUtils.join(" ", cmdArray));
			jonasProcess = Runtime.getRuntime().exec(cmdArray, null, new File(jonasDir));
			jonasProcess.getOutputStream().close();
			
			/* Read in the output from the subprocess */
			OutputReader stdoutReader = 
				new OutputReader(jonasProcess.getInputStream(), OutputType.STDOUT);
			OutputReader stderrReader = 
				new OutputReader(jonasProcess.getErrorStream(), OutputType.STDERR);
			stdoutReader.start();
			stderrReader.start();

			// wait untill Jonas finishes
			jonasProcess.waitFor();
			logInfo("Jonas shut down");
		} catch (Exception e) {
			throw new TaskException("Cannot shutdown Jonas", e);
		}
!!!639106.java!!!	checkRequiredProperties() : void
		checkRequiredProperty(JONAS_DIR);
