class ValueList
!!!458882.java!!!	ValueList()

		value = new ArrayList< T >();
!!!459010.java!!!	ValueList(inout newValue : T)
	
		value = new ArrayList< T >();

		if (newValue == null) {
			return;
		}
		
		if (newValue.length > 0) {
			for (T x: newValue) {
				value.add(x);
			}
		
			setSubtypeName(newValue[0]);
		}
!!!459138.java!!!	ValueList(inout values : Collection< T >)
		
		if (values == null) {
			value = new ArrayList< T >();
			return;
		}
		
		value = new ArrayList< T >(values.size());
		
		if (values.size() > 0) {
			
			for (T x: values) {
				value.add(x);
			}
			
			setSubtypeName(values.iterator().next());
		}
!!!459266.java!!!	ValueList(inout node : Node)
		
		value = new ArrayList();
		
		parseXMLNode(node);
!!!459394.java!!!	toString() : String
		
		String result = "{";
		
		for (int i = 0; i < length(); i++) {
			
			result += value.get(i).toString();
			if (i < length() - 1) {
				result += ',';
			}
		}
		
		return result + "}";
!!!459522.java!!!	length() : int
		
		return value.size();
!!!459650.java!!!	get(in index : int) : T
		
		return value.get(index);
!!!459778.java!!!	set(in index : int, inout val : T) : void
		
		setSubtypeName(val);
		value.set(index, val);
!!!459906.java!!!	add(inout val : T) : void

		setSubtypeName(val);
		value.add(val);
!!!460034.java!!!	addAll(inout list : ValueList) : void
		
		subtypeName = list.subtypeName;

		value.addAll(list.value);
!!!460162.java!!!	addAll(inout list : Collection< T >) : void
		
		if (list.size() > 0) {
			setSubtypeName(list.iterator().next());
		}
		
		value.addAll(list);
!!!460290.java!!!	remove(inout val : T) : boolean
		
		return value.remove(val);
!!!460418.java!!!	remove(in index : int) : T
		
		return value.remove(index);
!!!460546.java!!!	empty() : boolean
		
		return value.isEmpty();
!!!460674.java!!!	contains(inout vb : T) : boolean
		
		for (Iterator< T > it = value.iterator(); it.hasNext(); ) {
			
			if (it.next().equals(vb)) {
				return true;
			}
		}
			
		return false;
!!!460802.java!!!	equals(inout o : Object) : boolean
		
		if (o instanceof ValueList) {
			return equals((ValueList) o);
		} else {
			return false;
		}
!!!460930.java!!!	equals(inout vc : ValueList) : boolean
		
		if (length() == vc.length()) {

			Iterator< T > it1 = value.iterator();
			Iterator< T > it2 = vc.value.iterator();
			
			for (; it1.hasNext(); ) {
				if (!it1.next().equals(it2.next())) {
					return false;
				}
			}
			
			return true;
		} else {
			return false;
		}
!!!461058.java!!!	hashCode() : int
		
		return value.hashCode();
!!!461186.java!!!	parseXMLNode(inout node : Node) : void
		
		if (!node.getNodeName().equals(getXMLNodeName())) {
			throw new InputParseException("Node does not contain list data. Node name is \""
					+ node.getNodeName() + "\".");
		}
		
		subtypeName = XMLHelper.getAttributeValueByName("type", node);

		if (subtypeName.equals("(none)")) {
			
			return;
		}
		
		Class subtypeClass = null;

		try {
			subtypeClass = Class.forName(subtypeName);
		} catch (Exception e) {
			throw new InputParseException("Error creating instance of the list element.", e);
		}
		
		ArrayList< Node > subnodes = null;
		
		try {
			subnodes = XMLHelper.getChildNodesByName(((T) subtypeClass.newInstance()).getXMLNodeName(), node);
		} catch (Exception e) {
			throw new InputParseException("Unable to create instance of the list element.", e);
		}

		for (Node current: subnodes) {
			T vbi = null;
			
			try {
				vbi = (T) subtypeClass.newInstance();
			} catch (Exception e) {
				throw new InputParseException("Error creating list items.", e);
			}
			
			vbi.parseXMLNode(current);
			
			value.add(vbi);
		}
!!!461314.java!!!	exportAsElement(inout document : Document) : Element
		
		/* Resulting node
		 * 
		 * <list subtype="<subtype-name>">
		 *    <element-node 0>
		 *          .
		 *          .
		 *          .
		 *    <element-node n-1>
		 * </list>
		 * 
		 * where <subtype-name> is canonical name of the type of elements in the list or (none) if
		 * list  is empty, <element-node 0> to <element-node n-1> are serialised items from the list.
		 * These nodes will not be present if the list is empty.
		 */
		
		Element element = document.createElement(getXMLNodeName());

		element.setAttribute("type", subtypeName == null ? "(none)" : subtypeName);
		
		if (value.size() > 0) {
			
			for (T current: value) {
				element.appendChild(current.exportAsElement(document));
			}
		}

		return element;
!!!461442.java!!!	setSubtypeName(inout val : T) : void
		
		if (val != null) {
			subtypeName = val.getClass().getCanonicalName();
		}
!!!461570.java!!!	getXMLNodeName() : String
		
		return "list";
!!!461698.java!!!	iterator() : Iterator< T >
		
		return value.iterator();
!!!461826.java!!!	getValue() : List< T >
		
		return value;
