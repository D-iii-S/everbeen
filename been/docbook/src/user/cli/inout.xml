<?xml version="1.0" encoding="UTF-8"?>

<sect1
	xml:id="been.user.cli.inout"
	xmlns="http://docbook.org/ns/docbook"
	xmlns:xlink="http://www.w3.org/1999/xlink"
	xmlns:xml="http://www.w3.org/XML/1998/namespace"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:xi="http://www.w3.org/2001/XInclude"
	xsi:schemaLocation="http://docbook.org/ns/docbook ../../../docbook-5.0/xsd/docbook.xsd"
>
	<title>CLI Input/Output Details</title>
	
	<para>The Command Line Interface is designed to operate in a way friendly to shell scripts.
	The <command>bcmd</command> application transfers data and arguments from the user to the
	Command Line Service and prints out the response it obtains.</para>
	
	<para>The communication protocol is designed to minimize the latency. It works in a way similar
	to HTTP. Each invocation of the <command>bcmd</command> command only includes one roundtrip
	to the Command Line Service and back. There is no interactive communication. Only one request
	and one response can be handled by one <command>bcmd</command> process.</para>
	
	<para>As already mentioned in <xref linkend="been.user.cli.line"/>, the input data consists
	of two separate data streams. The first part includes a <glossterm>module</glossterm> name,
	an <glossterm>action</glossterm> name and <glossterm baseform="parameter">parameters</glossterm>
	and <glossterm baseform="flag">flags</glossterm> supplied to the action. The second part, mostly
	optional or not required at all, can be a data stream of any format. The former part can be read
	either from the command line (by default) or from a file, possibly standard input (when
	specified). The latter is always read either form a file or from standard input.</para>
	
	<para>The response obtained from the Command Line Service is split into three separate parts
	by <command>bcmd</command>: The standard output stream conveys the response data when
	the operation succeeds. This is mostly human-readable plain text or XML data, but actions that
	download files can use the standard output to send binary file data of any kind. The error
	output will contain error messages, table format headers and other human-readable data that
	is not intended for further processing. The third (and smallest) part of the output data is
	the return code. It is exactly one byte large and can be found in the well-known
	<varname>$?</varname> virtual shell variable after <command>bcmd</command> exits.</para>
	
	<para>Details about the error codes mentioned above are closely related to the implementation
	of command line modules and Development Documentation, <xref linkend="been.devel.cli"/> describes these details. A non-zero error code
	can be caused by either a local error or an error reported by the Command Line Service. When
	both of these errors occur, then the error code generated by the service will be preferred over
	the <varname>errno</varname> value detected by <command>bcmd</command>.</para>
	
	<para>A return value of 0 indicates a successful operation. Return values from 1 through 192 are
	<varname>errno</varname> values that refer to local errors detected on the C side, in the
	<command>bcmd</command> client. Return values from 192 through 247 report errors originating
	from the Java side, the Command Line Service. Each error condition detected on the Java side
	is assigned an error message. Each command line module has its own enumeration of error codes
	and error messages, distinct from other modules. Return values from 248 to 255 are related to
	module-independent errors detected on the Java side, such as illegal characters in the command
	line string.</para>
	
	<para>Some command line actions read XML data as input or produce an XML output. In such cases,
	XML marshalling and unmarshalling is namespace-aware. Both input and output data must be valid. XML Schema
	files used for validation are included in the BEEN source tree.</para>
	
	<para>XML Schema files are located in <filename>been/src/cz/cuni/mff/been/jaxb</filename>. Each
	subsection of <xref linkend="been.user.cli.reference"/> gives a list of Schema files relevant
	to the input and output data used by the described module. Example input and output XML data
	can be found at the end of each subsection.</para>
</sect1>