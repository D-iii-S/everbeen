<?xml version="1.0" encoding="UTF-8"?>

<sect3
	xml:id="been.user.cli.reference.hosts.examples"
	xmlns="http://docbook.org/ns/docbook"
	xmlns:xlink="http://www.w3.org/1999/xlink"
	xmlns:xml="http://www.w3.org/XML/1998/namespace"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:xi="http://www.w3.org/2001/XInclude"
	xsi:schemaLocation="http://docbook.org/ns/docbook ../../../../docbook-5.0/xsd/docbook.xsd"
>
	<title>Hosts Module Examples</title>
	
	<para>XML Schema files related to this module: <filename>group.xsd</filename>,
	<filename>properties.xsd</filename></para>
	
	<para>The Hosts Module communicates with the Task Manager and the Host Manager with its Load
	Server component. All the <option>*-put</option> and <option>*-dump</option> actions use XML
	input and output. Example XML content will be shown in this section. Output data of all other
	actions that produce output is described in <xref linkend="been.user.cli.reference.hosts"/>.</para>
	
	<para>Details about special meanings of the <option>changed</option> attribute and
	the <option>&lt;remove&gt;</option> element in some XML representations can be found in
	<xref linkend="been.user.cli.reference.hosts"/> as well, especially in the
	detailed footnotes linked with every action.</para>
	
	<para>The <option>changed</option> attribute defaults to <constant>true</constant>
	and specifies whether an XML element was changed. It is ignored when new objects (such as software
	aliases and host groups) are created. When editing an object, specifying
	<option>changed="false"</option> on unmodified parts of its XML definition can improve the
	performance.</para>
	
	<para>The <option>&lt;remove&gt;</option> element is used only when host property trees are
	edited. It instructs CLI to remove the host property of the given name before adding or editing
	other properties specified on the same tree level. The XML examples specified below shed
	more light on this.</para>
	
	<para>Listing all host names, optionally filtered by a regular expression:</para>
	<screen>$ <emphasis role="strong">./bcmd hosts list</emphasis></screen>	
	<screen>$ <emphasis role="strong">./bcmd hosts list pattern='.*ion'</emphasis></screen>	
	
	<para>Listing host configuration dates:</para>
	<screen>$ <emphasis role="strong">./bcmd hosts config history host=albatross.been.mff</emphasis></screen>
	
	<para>Listing host configuration data using the <option>cpu</option>, <option>network</option>,
	<option>storage</option> and <option>system</option> flags:</para>
	<screen>$ <emphasis role="strong">./bcmd hosts config cpu network host=albatross.been.mff</emphasis></screen>
	<screen>$ <emphasis role="strong">./bcmd hosts config host=albatross.been.mff network storage system</emphasis></screen>
	
	<para>Optionally, a timestamp can be specified. It defaults to he time of the lates probe.</para>
	<screen>$ <emphasis role="strong">./bcmd hosts config date='"23.1.10 3:48"' cpu system host=sparrow.been.mff</emphasis></screen>
	
	<para>Obtaining a <glossterm>load sample</glossterm> from the Load Server:</para>
	<screen>$ <emphasis role="strong">./bcmd hosts sample host=skylark.been.mff</emphasis></screen>
	
	<para>Running a hardware detector manually on a host or on all hosts:</para>
	<screen>$ <emphasis role="strong">./bcmd hosts refresh host=skylark.been.mff</emphasis></screen>
	<screen>$ <emphasis role="strong">./bcmd hosts refresh all</emphasis></screen>
	
	<para>Listing tasks running on a host:</para>
	<screen>$ <emphasis role="strong">./bcmd hosts tasks host=sparrow.been.mff</emphasis></screen>	
	
	<para>Optionally, task names can be filtered and/or human-readable descriptions can be shown.</para>
	<screen>$ <emphasis role="strong">./bcmd hosts tasks pattern='.*manager' host=sparrow.been.mff</emphasis></screen>
	<screen>$ <emphasis role="strong">./bcmd hosts tasks desc host=skylark.been.mff</emphasis></screen>
	
	<para>Listing log output generated by all tasks running on the host, with the optional line numbers:</para>
	<screen>$ <emphasis role="strong">./bcmd hosts logs host=skylark.been.mff</emphasis></screen>
	<screen>$ <emphasis role="strong">./bcmd hosts logs host=skylark.been.mff numbers</emphasis></screen>

	<para>Listing host groups with optional filtering and/or human-readable descriptions and
	metadata strings:</para>
	<screen>$ <emphasis role="strong">./bcmd hosts group-list</emphasis></screen>
	<screen>$ <emphasis role="strong">./bcmd hosts group-list desc pattern='servers[1-4]'</emphasis></screen>
	
	<para>Listing software aliases with optional filtering and/or <glossterm>RSL</glossterm>
	restriction strings:</para>
	<screen>$ <emphasis role="strong">./bcmd hosts alias-list</emphasis></screen>
	<screen>$ <emphasis role="strong">./bcmd hosts alias-list pattern='Sun|Oracle'</emphasis></screen>
	<screen>$ <emphasis role="strong">./bcmd hosts alias-list restrict</emphasis></screen>
	
	<para>Listing host properties with optional human-readable description and/or filtering:</para>
	<screen>$ <emphasis role="strong">./bcmd hosts property-list host=sparrow.been.mff</emphasis></screen>
	<screen>$ <emphasis role="strong">./bcmd hosts property-list desc host=skylark.been.mff pattern='.*dap.*'</emphasis></screen>

	<para>The output can be limited to user-defined host properties only. (There are no description
	strings available for user-defined properties.)</para>
	<screen>$ <emphasis role="strong">./bcmd hosts property-list user host=nightingale.been.mff</emphasis></screen>
	<screen>$ <emphasis role="strong">./bcmd hosts property-list user host=sparrow.been.mff pattern='var[5-9]'</emphasis></screen>
	
	<para>Removing a host group:</para>
	<screen>$ <emphasis role="strong">./bcmd hosts group-del name=Servers</emphasis></screen>

	<para>Removing a software alias:</para>
	<screen>$ <emphasis role="strong">./bcmd hosts alias-del name='"Apache Tomcat"'</emphasis></screen>
	
	<para>Removing a flat (simple) host property:</para>
	<screen>$ <emphasis role="strong">./bcmd hosts property-del name=myProperty0</emphasis></screen>
	<screen>$ <emphasis role="strong">./bcmd hosts property-del name=mySubtree.nested0</emphasis></screen>
	
	<para>Removing a structured (tree-like) host property, using the <option>tree</option> flag:</para>
	<screen>$ <emphasis role="strong">./bcmd hosts property-del name=myTree0 tree</emphasis></screen>
	<screen>$ <emphasis role="strong">./bcmd hosts property-del tree name=myTree0(5)</emphasis></screen>
	
	<para>Dumping a host group to an XML representation:</para>
	<screen>$ <emphasis role="strong">./bcmd hosts group-dump name=Clients</emphasis></screen>

	<para>Creating a new host group:</para>
	<screen>$ <emphasis role="strong">./bcmd -b- hosts group-put</emphasis></screen>
	<screen>$ <emphasis role="strong">./bcmd -b mygroup.xml hosts group-put</emphasis></screen>

	<para>Possible XML input/output:</para>
	<screen><![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<group xmlns="http://been.mff.cuni.cz/hostmanager/group" name="Clients">
    <hosts>
        <host name="nightingale.been.mff"/>
        <host name="sparrow.been.mff"/>
        <host name="starling.been.mff"/>
    </hosts>
    <meta>A metadata string.</meta>
    <desc>A description string.</desc>
</group>]]></screen>

	<para>Alternatively, you can provide an <glossterm>RSL</glossterm> expression. It will be
	evaluated only once when the group is created.</para>

	<screen><![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<group xmlns="http://been.mff.cuni.cz/hostmanager/group" name="Clients">
    <hosts>
        <rsl>(name =~ /.*sparrow.*|.*nightingale.*/)</rsl>
    </hosts>
    <meta>A metadata string.</meta>
    <desc>A description string.</desc>
</group>]]></screen>
	
	<para>Editing an existing host group:</para>
	<screen>$ <emphasis role="strong">./bcmd -b- hosts group-put edit=Clients</emphasis></screen>
	<screen>$ <emphasis role="strong">./bcmd -b mygroup.xml hosts group-put edit=Clients</emphasis></screen>
	
	<para>Possible XML input:</para>
	<screen><![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<group xmlns="http://been.mff.cuni.cz/hostmanager/group" name="Clients">
    <hosts changed="false"/>
    <meta changed="false"/>
    <desc>A modified and much longer description.</desc>
</group>]]></screen>
	
	<para>Dumping a software alias to an XML representation:</para>
	<screen>$ <emphasis role="strong">./bcmd hosts alias-dump name='"Apache Tomcat"'</emphasis></screen>
	
	<para>Creating a new software alias:</para>
	<screen>$ <emphasis role="strong">./bcmd -b- hosts alias-put</emphasis></screen>
	<screen>$ <emphasis role="strong">./bcmd -b tomcat.xml hosts alias-put</emphasis></screen>
	
	<para>Possible XML input/output:</para>

<screen><![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<alias
    xmlns="http://been.mff.cuni.cz/hostmanager/properties"
    name="Apache Tomcat"
>
    <product>${name}</product>
    <vendor>${vendor}</vendor>
    <version>${version}</version>
    <osRestriction>
        <rsl>family == &quot;Windows&quot;</rsl>
    </osRestriction>
    <appRestriction>
        <rsl>name =~ /.*apache tomcat.*/</rsl>
    </appRestriction>
</alias>]]></screen>
	
	<para>Editing an existing software alias:</para>
	<screen>$ <emphasis role="strong">./bcmd -b- hosts alias-put edit='"Apache Tomcat"'</emphasis></screen>
	<screen>$ <emphasis role="strong">./bcmd -b tomcat.xml hosts alias-put edit='"Apache Tomcat"'</emphasis></screen>
	
	<para>The XML input is very similar in this case. Again, you can set the <option>changed</option>
	attribute to <constant>false</constant> for the children of the <option>&lt;alias&gt;</option>
	element you do not want to modify. Instead of an RSL restriction, you can use an Object
	Restriction. See the XML Schena file (<filename>properties.xsd</filename>) for details on how
	object restrictions can be defined. A very simple example follows.:</para>

<screen><![CDATA[<osRestriction>
     <object path="address.off.data.subtree">
        <bool name="someBool">true</bool>
        <string name="someString">This is a String.</string>
        <double name="tripple">2.6</double>
        <!-- More data types are available. See the XSD. -->
    </object>
</osRestriction>]]></screen>
    
    <para>Presumably, <option>&lt;appRestriction&gt;</option> could also be defined in a similar
    fashion. Using object restriction requires a good knowledge of the Host Manager internals,
    especially the tree data structures that store host properties.</para>
    	
	<para>Dumping host properties to an XML representation, possibly limiting the output to
	user-defined properties:</para>
	<screen>$ <emphasis role="strong">./bcmd hosts property-dump host=skylark.been.mff</emphasis></screen>
	<screen>$ <emphasis role="strong">./bcmd hosts property-dump user host=skylark.been.mff</emphasis></screen>
	
	<para>Possible XML output:</para>
	<screen><![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="yes"?>             
<properties xmlns="http://been.mff.cuni.cz/hostmanager/properties"> 
    <simple>                                                        
        <int name="adapters">2</int>
        ]]><emphasis>[...]</emphasis><![CDATA[                                
        <string name="checktime"> 3:48.54</string>                  
        <lstring name="memberof">                                   
            <item index="0">Universe</item>                         
        </lstring>
        <string name="name">skylark.been.mff</string>
        <int name="processors">2</int>
    </simple>
    <complex>
        ]]><emphasis>[...]</emphasis><![CDATA[                                
        <tree name="memory" index="0">
            <simple>
                <int name="pagefile" unit="B">0</int>
                ]]><emphasis>[...]</emphasis><![CDATA[                                
            </simple>
        </tree>
        ]]><emphasis>[...]</emphasis><![CDATA[                                
        <tree name="processor" index="0">
            <simple>
                ]]><emphasis>[...]</emphasis><![CDATA[                                
                <int name="speed" unit="Hz">3000000000</int>
                <string name="vendor">Intel</string>
            </simple>
        </tree>
        <tree name="processor" index="1">
            ]]><emphasis>[...]</emphasis><![CDATA[                                
        </tree>
        <tree name="user" index="0"/>
    </complex>
</properties>]]></screen>
	
	<para>Editing host properties using processing instructions specified as XML:</para>
	<screen>$ <emphasis role="strong">./bcmd hosts -b- property-put host=skylark.been.mff</emphasis></screen>
	<screen>$ <emphasis role="strong">./bcmd hosts -b props.xml property-put host=skylark.been.mff</emphasis></screen>
	
	<para>Possible XML input:</para>
	<screen><![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="yes"?>             
<properties xmlns="http://been.mff.cuni.cz/hostmanager/properties"> 
    <simple>
        <remove name="unwanted1"/>
        <remove name="unwanted2"/>
        <remove name="unwanted3"/>                                                       
        ]]><emphasis>[...]</emphasis><![CDATA[                                
        <string name="newString">blabla</string>                  
        <lstring name="newStringList">                                   
            <item>One</item>
            <item>Two</item>                          
        </lstring>
        <ldouble name="newDoubleList"/>
        <int name="newInteger">2</int>
        ]]><emphasis>[...]</emphasis><![CDATA[                                
    </simple>
    <complex>
        <remove name="unwantedTree1" index="6"/>
        <remove name="unwantedTree2" index="3"/>
        <remove name="unwantedTree1" index="5"/>
        <remove name="unwantedTree2" index="2"/>
        ]]><emphasis>[...]</emphasis><![CDATA[                                
        <tree name="editedTree" index="5">
            <simple>]]><emphasis>[...]</emphasis><![CDATA[</simple>
            <complex>]]><emphasis>[...]</emphasis><![CDATA[</complex>
        </tree>
        <tree name="newTree1">
            <simple>]]><emphasis>[...]</emphasis><![CDATA[</simple>
            <complex>]]><emphasis>[...]</emphasis><![CDATA[</complex>
        </tree>
        <tree name="newTree1">
            <simple>]]><emphasis>[...]</emphasis><![CDATA[</simple>
            <complex>]]><emphasis>[...]</emphasis><![CDATA[</complex>
        </tree>
        <tree name="EditedEmpty" index="5"/>
        <tree name="Empty"/>
        ]]><emphasis>[...]</emphasis><![CDATA[                                
    </complex>
</properties>]]></screen>

	<para>You need to understand the Host Manager data structures to use this mechanism correctly.
	All the remove operations are carried out first. Then the requested simple parameters are added.
	Finally, complex parameters (subtrees) are either added or edited recursively as needed.
	Subtrees that have an <option>index</option> attribute are expected to exist and will be edited
	recursively. Subtrees with no <option>index</option> are expected to be new. They will be
	created and appended to the list of subtrees associated with their name(s). New subtrees with
	identical names will be appended to the same list.</para>
</sect3>