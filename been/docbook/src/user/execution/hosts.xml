<?xml version="1.0" encoding="UTF-8"?>

<sect1
	xmlns="http://docbook.org/ns/docbook"
	xmlns:xlink="http://www.w3.org/1999/xlink"
	xmlns:xml="http://www.w3.org/XML/1998/namespace"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:xi="http://www.w3.org/2001/XInclude"
	xsi:schemaLocation="http://docbook.org/ns/docbook ../../../docbook-5.0/xsd/docbook.xsd"
>
	<title>Hosts</title>

	<para>This section has been (mostly) copied from <biblioref linkend="BUD2" units="page" begin="16" end="26"/></para>

	<sect2>
		<title>Software Aliases</title>

		<para>Software aliases are designed to simplify orientation in the list of software packages installed
		on the host. Typically, applications or packages may have slightly different names across
		various operating systems and it may be difficult and error-prone to write database queries
		that match all supported versions of the application. Each software alias acts as a common
		representative for given application across different versions of an application or operating
		system. Since software aliases are stored in database and have own set of objects and
		properties, database queries that work with aliases can be created.</para>

		<para>Each alias has its own name (not necessarily unique) and contains data about application it
		represents (name, version and vendor). Aliases are automatically generated by the database
		when host is added to the database or when host’s data in the database is updated.</para>

		<para>For each software alias there is an alias definition that contains all data needed for the database
		engine to create representative aliases. Each alias definition contains two restrictions (written
		in RSL query language) and four fields that define values of the properties of the resulting alias.</para>

		<para>First restriction in the alias definition specifies conditions on the operating system. In this
		restriction, all properties and child objects of the os object can be used. Second restriction
		specifies conditions on application resulting alias will represent. All properties of the
		application object can be used in this restriction.</para>

		<para>Properties of the resulting alias can be specified either as constant values or they may contain
		references to the properties of the application that matched conditions specified via
		restrictions. Property references are specified with syntax similar to the syntax of the property
		names in Ant. That is, <code>${name}</code>, <code>${vendor}</code> and <code>${version}</code> variables can be used in any
		of the four fields that define properties of the resulting alias. Multiple variables can be used in
		one field and database engine will substitute all with the actual values of properties from the
		matched application.</para>

		<para>For example, following alias definition</para>

		<screen><![CDATA[Alias name: Visual Studio (${version})
Result name: ${name}
Result vendor: Microsoft
Result version: ${version}
OS restriction: family == "Windows"
Application restriction: name=~/.*Visual Studio.*/i]]></screen>

		<para>will result in alias</para>

		<screen><![CDATA[Alias name: Visual Studio (8.0.50727.42)
Application name: Microsoft Visual Studio 2005 ]]><emphasis>[...]</emphasis><![CDATA[
Application vendor: Microsoft
Application version: 8.0.50727.42]]></screen>

		<para>when matched with the following application</para>
		
		<screen><![CDATA[Name: Microsoft Visual Studio 2005 ]]><emphasis>[...]</emphasis><![CDATA[
Vendor: Microsoft Corporation
Version: 8.0.50727.42]]></screen>
	</sect2>

	<sect2>
		<title>Host Groups</title>

		<para>The Host Manager allows user to assign hosts from the environment to one or more host
		groups. Host groups are provided to simplify orientation within larger benchmarking
		environments.</para>

		<para>Host group is a named set of hosts from the benchmarking environment. Host Manager
		provides one default group which always contains all hosts in the environment. The default
		group is automatically maintained by the Host Manager and always reflects current state of the
		database.</para>

		<para>Each host will be member of at least one group (the default group).</para>

		<para>All groups except the default group are managed by the user. Host Manager does not enforce
		relations between hosts in the group in any way and therefore groups are not automatically
		updated to reflect changes in hardware and software configuration.</para>

		<para>Groups in the database are identified by their name which has to be unique. Each group can
		also contain textual description of the group and a metadata. Description is simple string
		which should describe purpose and contents of the group. It is not used by the Host Manager
		and it is provided only for user’s convenience. Metadata are provided for other components of
		the BEEN as a storage for custom data about the group. The metadata cannot be edited by
		user.</para>
	</sect2>

	<sect2>
		<title>Host Properties</title>

		<para>Data about each host in host database is organized into a tree-like structure. Inner nodes of
		the tree are called objects, leaves are called properties. Structure of the tree is based on the way
		various hardware and software components relate to each other with each child node adding
		more details about the parent. For example, object which represents on hard drive can have
		several child objects representing different partitions present of the drive.</para>

		<para>Each node in the tree has its own name which does not need to be unique within the tree.
		Name of an object consists of two parts: object’s type name and index. Type name of an object
		should provide a hint about the data that the object contain. For example, type name of the
		object which stores details about memory is memory. Index of an object is non-negative
		integer which identifies objects with the same type name within their parent object. For
		example, if the disk drive contains two partitions, first one will have index of zero, second one
		will have index of one. Name of an object is then written as typename(index) (e.g.
		<code>Partition(2)</code>).</para>
		
		<para>Name of a property contains only type name (indexed properties are not allowed) and has to
		be unique within its parent object.</para>

		<para>All objects and properties in the tree can be uniquely identified by their full name. Full name of
		the object consists of names of all objects that are on the path from the root node to the object.
		Names of objects on the path are separated by the period character. Full name of a property
		consists of full name of its parent object and type name of the property separated by the period
		character. For example, full name of the object representing second partition of the first drive
		is <code>drive(0).partition(1)</code> and full name of the property which represents size of that
		partition is <code>drive(0).partition(1).size</code>.</para>

		<para>Most of the properties and objects in the database contain data collected by the detector.
		However, several properties that reflect current status of the host and are therefore not
		available to the detector (for example group membership property) are added by the Host
		Manager. Since various components of the BEEN may require storage of custom data for
		specific host, Host manager provides an API which allows storage and manipulation of user-defined
		properties and objects in the database.</para>
	</sect2>

	<sect2>
		<title>WillBeen Contributions</title>
		
		<para>The WillBeen project contributed a Command Line Interface which makes it possible
		to download the tree-like structures of host data as XML, edit them and update them.
		The original BEEN implementation could only edit basic data types. The new CLI
		can edit ranges, subtrees and lists as well. See the CLI documentation for details
		on host data editing (<xref linkend="been.user.cli.reference.hosts"/>).</para>
		
		<para>Frequently used components of the Host Manager have been optimized. Numerous bugs
		related to <glossterm>RSL</glossterm> constraints have been fixed.</para>
		
		<para>The new load limitation mechanism (<xref linkend="been.user.install.config.limitation"/>)
		was added to the Task Manager. This required support from the Host Manager as well. The default
		value of the <option>loadUnits</option> tunable parameter is computed by the Host Manager
		from the amount of physical memory.</para>
	</sect2>
</sect1>
