<?xml version="1.0" encoding="UTF-8"?>

<sect1
	xml:id="been.devel.theory.debug"
	xmlns="http://docbook.org/ns/docbook"
	xmlns:xlink="http://www.w3.org/1999/xlink"
	xmlns:xml="http://www.w3.org/XML/1998/namespace"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:xi="http://www.w3.org/2001/XInclude"
	xsi:schemaLocation="http://docbook.org/ns/docbook ../../../docbook-5.0/xsd/docbook.xsd"
>
	<title>Debugging BEEN</title>
	
	<para>
	Because developing more complex task or extending BEEN without debugging would 
	be virtually impossible, BEEN comes with good support for debugging. BEEN is a distributed
	system, so only remote debugging can be considered useful. 
	</para>
	<para>The basic
	idea is that all the JVMs run by BEEN should be accessible to remote debugger if 
	BEEN is running in <glossterm>debug mode</glossterm>. In addition to that, a convenient 
	way must exist to manage possibly numerous tasks running in BEEN. This need comes from 
	consideration that developers would usually need to debug one specific <glossterm>task</glossterm> (or couple of them)
	, but this <glossterm>task</glossterm> needs to interact also with other <glossterm>tasks</glossterm> run by BEEN. That tasks 
	would need to be let run while the former one will be stopped and debugged remotely.
	These issues were considered when designing how debugging will work in BEEN.
	Final BEEN debugging solution will be described in this section.
	</para>
	
	<sect2>
	<title>BEEN Debug Mode</title>
	<para>
	First thing you need to do in order to debug BEEN is to run it in <glossterm>debug mode</glossterm>.
	You can do it by setting <code>BEEN_DEBUG</code> environment variable to <code>1</code> before starting 
	BEEN. In debug mode, all the JVMs executed by BEEN will listen on a port (i.e.
	it's running in server mode) , which can be used by remote debugger (e.g. the one from Eclipse) to connect to. The 
	assigned port numbers are these:
	<itemizedlist>
		<listitem><para><glossterm>Task Manager</glossterm> listens by default on port 8100 (see <glossterm>Task Manager</glossterm>
		launch script for details or to change the port)</para></listitem>
		<listitem><para><glossterm>Host Runtime</glossterm> listens by default on port 8101 (see <glossterm>Host Runtime</glossterm>
		launch script for details or to change the port)</para></listitem>
		<listitem><para>All the other <glossterm>tasks</glossterm> and <glossterm>services</glossterm> get a port assigned by <glossterm>Host Runtime</glossterm>
		they're running on. <glossterm>Host Runtime</glossterm> generates port numbers incrementally starting at 8200.
		Assigned port number is written to each <glossterm>task</glossterm>'s standard output whenever <glossterm>task</glossterm> is run (and this is where you can find it once you need it).
		</para></listitem>
	</itemizedlist>
	</para>
	<para>
	All the <glossterm>tasks</glossterm> run in <glossterm>debug mode</glossterm> are executed with <code>suspend=n</code> option, which means 
	they're executed immediately without waiting for a debugger to connect. It's because
	most of the <glossterm>tasks</glossterm> will not be debugged and connecting to every <glossterm>task</glossterm> with debugger
	and telling it to resume would be very annoying for the developers. On the other hand,
	sometimes you need to debug tasks with <code>suspend=y</code> option. This is why <glossterm>Debug Assistant</glossterm>
	is here (will be described later).
	</para>
	</sect2>
	
	<sect2>
	<title>WebUI Debugging</title>
	<para>
	Sometimes there's a need to run even WebUI in <glossterm>debug mode</glossterm>. This can be done 
	easily by following Tomcat's documentation. An example how to do that is here (
	sets remote debugging port of Catalina to 5050): 
	
<programlisting language="bash"><![CDATA[#!/bin/sh

export JPDA_TRANSPORT=dt_socket
export JPDA_ADDRESS=5050
export JAVA_HOME="your java home directory"

./catalina.sh jpda run]]></programlisting>
	</para>
	</sect2>
	
	<sect2>
	<title>Debug Assistant Service</title>
	<para>
	For the reasons mentioned before, you sometimes need to have control of which
	<glossterm>tasks</glossterm> will be run immediately after starting them and which ones will
	wait for remote debugger to connect. This is exactly why <glossterm>Debug Assistant</glossterm> is 
	part of BEEN.  
	</para>
	<para>
	<glossterm>Debug Assistant</glossterm> is a BEEN core service (can be started in "Services" tab). If the
	service is not running, <glossterm>debug mode</glossterm> works exactly how it was described above in
	this section. But once you start <glossterm>Debug Assistant</glossterm>, two things change:
	<orderedlist>
	<listitem><para>All the <glossterm>tasks</glossterm> (and <glossterm>services</glossterm>) started by <glossterm>Host Runtime</glossterm> will be started with
	<code>suspend=y</code> option and so they will wait for remote debugger to connect and let them start running.</para></listitem>
	<listitem><para>All the <glossterm>tasks</glossterm> (and <glossterm>services</glossterm>) started by <glossterm>Host Runtime</glossterm> will be registered
	by <glossterm>Debug Assistant</glossterm>.</para></listitem>
	</orderedlist>
	</para>
	<para>
	Registration means that <glossterm>Debug Assistant</glossterm> will know about all the task that are about 
	to be run and will display list of waiting tasks in <glossterm>Debug Assistant</glossterm> tab in WebUI.
	For every <glossterm>task</glossterm>, <glossterm>Debug Assistant</glossterm> will display debugging information (host name and debug
	port number) and two actions - "Delete from list" and "Let run". Letting task run means 
	that <glossterm>Debug Assistant</glossterm> will let the task run without any debugging. If you want to 
	debug the <glossterm>task</glossterm>, you simply use Eclipse or another debugging tool and connect to the <glossterm>task</glossterm>
	using debugging information given. After you don't need debugging information anymore,
	you can delete task from Debug Assistant's listing and it will disappear.  
	</para>
	</sect2>
		
</sect1>