/* Generated By:JavaCC: Do not edit this line. Parser.java */
        package cz.cuni.mff.been.common.rsl;

        import java.io.PrintStream; /* Required by code generated by javacc. */
        import java.text.SimpleDateFormat;
        import java.util.List;
        import java.util.Date;
        import java.util.ArrayList;
        import java.util.regex.Pattern;
        import java.util.regex.PatternSyntaxException;

        import cz.cuni.mff.been.common.rsl.LongWithUnit;
        import cz.cuni.mff.been.common.Version;
        import cz.cuni.mff.been.softwarerepository.PackageType;

        @SuppressWarnings("all")
        class Parser implements ParserConstants {
                /* We're creating generic array. That's impossible without warnings.*/
                @SuppressWarnings("unchecked")
                private <T> Condition buildSimpleCondition(String propertyPath, int operatorKind, T value) {
                                switch (operatorKind) {
                                        case ParserConstants.EQUALS:
                                                return new EqualsCondition<T>(propertyPath, value);
                                        case ParserConstants.NOT_EQUAL:
                                                return new NotEqualCondition<T>(propertyPath, value);
                                        case ParserConstants.LESS_THAN:
                                                return new LessThanCondition<T>(propertyPath, value);
                                        case ParserConstants.LESS_OR_EQUAL:
                                                return new LessOrEqualCondition<T>(propertyPath, value);
                                        case ParserConstants.GREATER_THAN:
                                                return new GreaterThanCondition<T>(propertyPath, value);
                                        case ParserConstants.GREATER_OR_EQUAL:
                                                return new GreaterOrEqualCondition<T>(propertyPath, value);
                                        case ParserConstants.CONTAINS:
                                                return new ContainsCondition<T>(propertyPath, value);
                                        case ParserConstants.MATCHES:
                                                return new MatchesCondition<T>(propertyPath, value);
                                        case ParserConstants.DOES_NOT_MATCH:
                                                return new DoesNotMatchCondition<T>(propertyPath, value);
                                        default:
                                                assert false: "Invalid token kind.";
                                                return null; // to shut up the compiler
                                }
                }

/* ===== Grammar rules ===== */
  final public Condition Start(PrintStream printStream) throws ParseException {
        Condition c;
    c = Condition();
    jj_consume_token(0);
          {if (true) return c;}
    throw new Error("Missing return statement in function");
  }

  final public Condition Condition() throws ParseException {
        Condition c;
    c = OrCondition();
          {if (true) return c;}
    throw new Error("Missing return statement in function");
  }

  final public Condition OrCondition() throws ParseException {
        List<Condition> subConditions = new ArrayList<Condition>();
        Condition c;
    c = AndCondition();
          subConditions.add(c);
    label_1:
    while (true) {
      if (jj_2_1(2)) {
        ;
      } else {
        break label_1;
      }
      jj_consume_token(OR);
      c = AndCondition();
                  subConditions.add(c);
    }
                if (subConditions.size() > 1) {
                        Condition[] subConditionsArray = new Condition[subConditions.size()];
                        {if (true) return new OrCondition(subConditions.toArray(subConditionsArray));}
                } else {
                        {if (true) return subConditions.get(0);}
                }
    throw new Error("Missing return statement in function");
  }

  final public Condition AndCondition() throws ParseException {
        List<Condition> subConditions = new ArrayList<Condition>();
        Condition c;
    if (jj_2_2(2147483647)) {
      c = SimpleCondition();
    } else if (jj_2_3(2147483647)) {
      c = QualifiedCondition();
    } else if (jj_2_4(2)) {
      c = SubCondition();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
          subConditions.add(c);
    label_2:
    while (true) {
      if (jj_2_5(2)) {
        ;
      } else {
        break label_2;
      }
      jj_consume_token(AND);
      if (jj_2_6(2147483647)) {
        c = SimpleCondition();
      } else if (jj_2_7(2147483647)) {
        c = QualifiedCondition();
      } else if (jj_2_8(2)) {
        c = SubCondition();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
                  subConditions.add(c);
    }
                if (subConditions.size() > 1) {
                        Condition[] subConditionsArray = new Condition[subConditions.size()];
                        {if (true) return new AndCondition(subConditions.toArray(subConditionsArray));}
                } else {
                        {if (true) return subConditions.get(0);}
                }
    throw new Error("Missing return statement in function");
  }

  final public Condition SimpleCondition() throws ParseException {
        Token t1, t2, t3;
        Condition c = null;
    t1 = jj_consume_token(PROPERTY_PATH);
    if (jj_2_9(2)) {
      t2 = jj_consume_token(EQUALS);
    } else if (jj_2_10(2)) {
      t2 = jj_consume_token(NOT_EQUAL);
    } else if (jj_2_11(2)) {
      t2 = jj_consume_token(LESS_THAN);
    } else if (jj_2_12(2)) {
      t2 = jj_consume_token(LESS_OR_EQUAL);
    } else if (jj_2_13(2)) {
      t2 = jj_consume_token(GREATER_THAN);
    } else if (jj_2_14(2)) {
      t2 = jj_consume_token(GREATER_OR_EQUAL);
    } else if (jj_2_15(2)) {
      t2 = jj_consume_token(CONTAINS);
    } else if (jj_2_16(2)) {
      t2 = jj_consume_token(MATCHES);
    } else if (jj_2_17(2)) {
      t2 = jj_consume_token(DOES_NOT_MATCH);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    if (jj_2_18(2)) {
      t3 = jj_consume_token(LONG);
                        c = buildSimpleCondition(t1.image, t2.kind, new LongWithUnit(t3.image));
    } else if (jj_2_19(2)) {
      t3 = jj_consume_token(VERSION);
                        c = buildSimpleCondition(t1.image, t2.kind, new Version(t3.image));
    } else if (jj_2_20(2)) {
      t3 = jj_consume_token(DATE);
                        /* We parse the date by hand, because... SimpleDateFormat was
			 * tried and was found unusable.
			 *
			 * Maybe should be cleaned up and commented a bit sometimes...
			 */
                        Date date = new Date();
                        date.setYear(Integer.valueOf(t3.image.substring(0, 4)) - 1900);
                        date.setMonth(Integer.valueOf(t3.image.substring(5, 7)) - 1);
                        if (t3.image.length() > 7) {
                                date.setDate(Integer.valueOf(t3.image.substring(8, 10)));
                        } else {
                                date.setDate(0);
                        }
                        if (t3.image.length() > 10) {
                                date.setHours(Integer.valueOf(t3.image.substring(11, 13)));
                                date.setMinutes(Integer.valueOf(t3.image.substring(14, 16)));
                        } else {
                                date.setHours(0);
                                date.setMinutes(0);
                        }
                        if (t3.image.length() > 16 && t3.image.charAt(16) != 'Z'
                                        && t3.image.charAt(16) != '+' && t3.image.charAt(16) != '-') {
                                date.setSeconds(Integer.valueOf(t3.image.substring(17, 19)));
                        } else {
                                date.setSeconds(0);
                        }
                        if (t3.image.length() > 19 && t3.image.charAt(19) != 'Z'
                                        && t3.image.charAt(19) != '+' && t3.image.charAt(19) != '-') {
                                date.setTime((date.getTime() / 1000) * 1000
                                        + Integer.valueOf(t3.image.substring(20, 21)) * 100);
                        } else {
                                date.setTime((date.getTime() / 1000) * 1000);
                        }

                        if (t3.image.length() > 16) {
                                if (t3.image.charAt(t3.image.length() - 1) == 'Z') {
                                        date.setTime(date.getTime() - date.getTimezoneOffset() * 60000);
                                } else {
                                        int l = t3.image.length();
                                        int diff = Integer.valueOf(t3.image.substring(l - 2, l))
                                                + Integer.valueOf(t3.image.substring(l - 5, l - 3)) * 60;
                                        diff = diff * 60000;
                                        diff = t3.image.charAt(l - 6) == '+' ? diff : -diff;
                                        date.setTime(date.getTime() - date.getTimezoneOffset() * 60000 - diff);
                                }
                        }

                        c = buildSimpleCondition(t1.image, t2.kind, date);
    } else if (jj_2_21(2)) {
      t3 = jj_consume_token(PATTERN);
                        boolean caseInsensitive = t3.image.charAt(t3.image.length() - 1) == 'i';
                        Pattern pattern = null;
                        try {
                                pattern = Pattern.compile(
                                        t3.image
                                                .substring(1, t3.image.length() - (caseInsensitive ? 2 : 1))
                                                .replaceAll("\u005c\u005c\u005c\u005c/", "/"),
                                        caseInsensitive ? Pattern.CASE_INSENSITIVE : 0);
                        } catch (PatternSyntaxException e) {
                                {if (true) throw new ParseException(e.getMessage());}
                        }
                        c = buildSimpleCondition(t1.image, t2.kind, pattern);
    } else if (jj_2_22(2)) {
      t3 = jj_consume_token(STRING);
                        c = buildSimpleCondition(t1.image, t2.kind, t3.image
                                .substring(1, t3.image.length() - 1)
                                .replaceAll("\u005c\u005c\u005c\u005c\u005c"", "\u005c"")
                        );
    } else if (jj_2_23(2)) {
      t3 = jj_consume_token(PACKAGE_TYPE);
                        c = buildSimpleCondition(t1.image, t2.kind, PackageType.realValueOf(t3.image));
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return c;}
    throw new Error("Missing return statement in function");
  }

  final public Condition QualifiedCondition() throws ParseException {
        Token t;
        Condition c;
    t = jj_consume_token(PROPERTY_PATH);
          String qualifier = t.image;
    jj_consume_token(LEFT_BRACE);
    c = Condition();
    jj_consume_token(RIGHT_BRACE);
          {if (true) return new QualifiedCondition(qualifier, c);}
    throw new Error("Missing return statement in function");
  }

  final public Condition SubCondition() throws ParseException {
        Condition c;
    jj_consume_token(LEFT_PAREN);
    c = Condition();
    jj_consume_token(RIGHT_PAREN);
          {if (true) return c;}
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  private boolean jj_3_21() {
    if (jj_scan_token(PATTERN)) return true;
    return false;
  }

  private boolean jj_3_8() {
    if (jj_3R_4()) return true;
    return false;
  }

  private boolean jj_3R_6() {
    if (jj_3R_11()) return true;
    return false;
  }

  private boolean jj_3R_5() {
    if (jj_3R_10()) return true;
    return false;
  }

  private boolean jj_3R_4() {
    if (jj_scan_token(LEFT_PAREN)) return true;
    if (jj_3R_9()) return true;
    return false;
  }

  private boolean jj_3_20() {
    if (jj_scan_token(DATE)) return true;
    return false;
  }

  private boolean jj_3R_12() {
    if (jj_3R_3()) return true;
    return false;
  }

  private boolean jj_3_19() {
    if (jj_scan_token(VERSION)) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_scan_token(PROPERTY_PATH)) return true;
    if (jj_scan_token(LEFT_BRACE)) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_scan_token(PROPERTY_PATH)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(6)) {
    jj_scanpos = xsp;
    if (jj_scan_token(7)) {
    jj_scanpos = xsp;
    if (jj_scan_token(8)) {
    jj_scanpos = xsp;
    if (jj_scan_token(9)) {
    jj_scanpos = xsp;
    if (jj_scan_token(10)) {
    jj_scanpos = xsp;
    if (jj_scan_token(11)) {
    jj_scanpos = xsp;
    if (jj_scan_token(12)) {
    jj_scanpos = xsp;
    if (jj_scan_token(13)) {
    jj_scanpos = xsp;
    if (jj_scan_token(14)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_18() {
    if (jj_scan_token(LONG)) return true;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_scan_token(AND)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_5()) {
    jj_scanpos = xsp;
    if (jj_3R_6()) {
    jj_scanpos = xsp;
    if (jj_3_8()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_11() {
    if (jj_scan_token(PROPERTY_PATH)) return true;
    return false;
  }

  private boolean jj_3R_9() {
    if (jj_3R_12()) return true;
    return false;
  }

  private boolean jj_3_17() {
    if (jj_scan_token(DOES_NOT_MATCH)) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_3R_4()) return true;
    return false;
  }

  private boolean jj_3_16() {
    if (jj_scan_token(MATCHES)) return true;
    return false;
  }

  private boolean jj_3R_8() {
    if (jj_3R_11()) return true;
    return false;
  }

  private boolean jj_3_15() {
    if (jj_scan_token(CONTAINS)) return true;
    return false;
  }

  private boolean jj_3R_7() {
    if (jj_3R_10()) return true;
    return false;
  }

  private boolean jj_3_23() {
    if (jj_scan_token(PACKAGE_TYPE)) return true;
    return false;
  }

  private boolean jj_3_14() {
    if (jj_scan_token(GREATER_OR_EQUAL)) return true;
    return false;
  }

  private boolean jj_3_13() {
    if (jj_scan_token(GREATER_THAN)) return true;
    return false;
  }

  private boolean jj_3_12() {
    if (jj_scan_token(LESS_OR_EQUAL)) return true;
    return false;
  }

  private boolean jj_3_11() {
    if (jj_scan_token(LESS_THAN)) return true;
    return false;
  }

  private boolean jj_3_22() {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  private boolean jj_3R_3() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_7()) {
    jj_scanpos = xsp;
    if (jj_3R_8()) {
    jj_scanpos = xsp;
    if (jj_3_4()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_10() {
    if (jj_scan_token(NOT_EQUAL)) return true;
    return false;
  }

  private boolean jj_3_9() {
    if (jj_scan_token(EQUALS)) return true;
    return false;
  }

  private boolean jj_3_7() {
    if (jj_scan_token(PROPERTY_PATH)) return true;
    if (jj_scan_token(LEFT_BRACE)) return true;
    return false;
  }

  private boolean jj_3_6() {
    if (jj_scan_token(PROPERTY_PATH)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(6)) {
    jj_scanpos = xsp;
    if (jj_scan_token(7)) {
    jj_scanpos = xsp;
    if (jj_scan_token(8)) {
    jj_scanpos = xsp;
    if (jj_scan_token(9)) {
    jj_scanpos = xsp;
    if (jj_scan_token(10)) {
    jj_scanpos = xsp;
    if (jj_scan_token(11)) {
    jj_scanpos = xsp;
    if (jj_scan_token(12)) {
    jj_scanpos = xsp;
    if (jj_scan_token(13)) {
    jj_scanpos = xsp;
    if (jj_scan_token(14)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_1() {
    if (jj_scan_token(OR)) return true;
    if (jj_3R_3()) return true;
    return false;
  }

  private boolean jj_3R_10() {
    if (jj_scan_token(PROPERTY_PATH)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public ParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[0];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[23];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Parser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[37];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 0; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 37; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 23; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

        }
